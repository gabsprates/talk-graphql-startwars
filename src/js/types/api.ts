/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * The query root of GitHub's GraphQL interface.
 */
export interface Query {
  
  /**
   * Look up a code of conduct by its key
   */
  codeOfConduct?: CodeOfConduct;
  
  /**
   * Look up a code of conduct by its key
   */
  codesOfConduct?: Array<CodeOfConduct | null>;
  
  /**
   * Look up an open source license by its key
   */
  license?: License;
  
  /**
   * Return a list of known open source licenses
   */
  licenses: Array<License | null>;
  
  /**
   * Get alphabetically sorted list of Marketplace categories
   */
  marketplaceCategories: Array<MarketplaceCategory>;
  
  /**
   * Look up a Marketplace category by its slug.
   */
  marketplaceCategory?: MarketplaceCategory;
  
  /**
   * Look up a single Marketplace listing
   */
  marketplaceListing?: MarketplaceListing;
  
  /**
   * Look up Marketplace listings
   */
  marketplaceListings: MarketplaceListingConnection;
  
  /**
   * Return information about the GitHub instance
   */
  meta: GitHubMetadata;
  
  /**
   * Fetches an object given its ID.
   */
  node?: Node;
  
  /**
   * Lookup nodes by a list of IDs.
   */
  nodes: Array<Node | null>;
  
  /**
   * Lookup a organization by login.
   */
  organization?: Organization;
  
  /**
   * The client's rate limit information.
   */
  rateLimit?: RateLimit;
  
  /**
   * Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
   */
  relay: Query;
  
  /**
   * Lookup a given repository by the owner and repository name.
   */
  repository?: Repository;
  
  /**
   * Lookup a repository owner (ie. either a User or an Organization) by login.
   */
  repositoryOwner?: RepositoryOwner;
  
  /**
   * Lookup resource by a URL.
   */
  resource?: UniformResourceLocatable;
  
  /**
   * Perform a search across resources.
   */
  search: SearchResultItemConnection;
  
  /**
   * GitHub Security Advisories
   */
  securityAdvisories: SecurityAdvisoryConnection;
  
  /**
   * Fetch a Security Advisory by its GHSA ID
   */
  securityAdvisory?: SecurityAdvisory;
  
  /**
   * Software Vulnerabilities documented by GitHub Security Advisories
   */
  securityVulnerabilities: SecurityVulnerabilityConnection;
  
  /**
   * Look up a topic by name.
   */
  topic?: Topic;
  
  /**
   * Lookup a user by login.
   */
  user?: User;
  
  /**
   * The currently authenticated user.
   */
  viewer: User;
}

/**
 * The Code of Conduct for a repository
 */
export interface CodeOfConduct extends Node {
  
  /**
   * The body of the Code of Conduct
   */
  body?: string;
  id: string;
  
  /**
   * The key for the Code of Conduct
   */
  key: string;
  
  /**
   * The formal name of the Code of Conduct
   */
  name: string;
  
  /**
   * The HTTP path for this Code of Conduct
   */
  resourcePath?: URI;
  
  /**
   * The HTTP URL for this Code of Conduct
   */
  url?: URI;
}

/**
 * An object with an ID.
 */
export interface Node {
  
  /**
   * ID of the object.
   */
  id: string;
}

/** Use this to resolve interface type Node */
export type PossibleNodeTypeNames =
'CodeOfConduct' |
'License' |
'MarketplaceCategory' |
'MarketplaceListing' |
'App' |
'Organization' |
'Project' |
'ProjectColumn' |
'ProjectCard' |
'Issue' |
'User' |
'Repository' |
'BranchProtectionRule' |
'Ref' |
'PullRequest' |
'UserContentEdit' |
'Label' |
'Reaction' |
'IssueComment' |
'PullRequestCommit' |
'Commit' |
'CommitComment' |
'Deployment' |
'DeploymentStatus' |
'Status' |
'StatusContext' |
'Tree' |
'Milestone' |
'ReviewRequest' |
'Team' |
'OrganizationInvitation' |
'PullRequestReview' |
'PullRequestReviewComment' |
'CommitCommentThread' |
'PullRequestReviewThread' |
'ClosedEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'UnsubscribedEvent' |
'MergedEvent' |
'ReferencedEvent' |
'CrossReferencedEvent' |
'AssignedEvent' |
'UnassignedEvent' |
'LabeledEvent' |
'UnlabeledEvent' |
'MilestonedEvent' |
'DemilestonedEvent' |
'RenamedTitleEvent' |
'LockedEvent' |
'UnlockedEvent' |
'DeployedEvent' |
'DeploymentEnvironmentChangedEvent' |
'HeadRefDeletedEvent' |
'HeadRefRestoredEvent' |
'HeadRefForcePushedEvent' |
'BaseRefForcePushedEvent' |
'ReviewRequestedEvent' |
'ReviewRequestRemovedEvent' |
'ReviewDismissedEvent' |
'PushAllowance' |
'ReviewDismissalAllowance' |
'DeployKey' |
'Language' |
'ProtectedBranch' |
'Release' |
'ReleaseAsset' |
'RepositoryTopic' |
'Topic' |
'Gist' |
'GistComment' |
'PublicKey' |
'TransferredEvent' |
'OrganizationIdentityProvider' |
'ExternalIdentity' |
'SecurityAdvisory' |
'AddedToProjectEvent' |
'BaseRefChangedEvent' |
'Blob' |
'Bot' |
'CommentDeletedEvent' |
'ConvertedNoteToIssueEvent' |
'MentionedEvent' |
'MovedColumnsInProjectEvent' |
'PinnedEvent' |
'RemovedFromProjectEvent' |
'UnpinnedEvent' |
'RepositoryInvitation' |
'Tag';

export interface NodeNameMap {
  Node: Node;
  CodeOfConduct: CodeOfConduct;
  License: License;
  MarketplaceCategory: MarketplaceCategory;
  MarketplaceListing: MarketplaceListing;
  App: App;
  Organization: Organization;
  Project: Project;
  ProjectColumn: ProjectColumn;
  ProjectCard: ProjectCard;
  Issue: Issue;
  User: User;
  Repository: Repository;
  BranchProtectionRule: BranchProtectionRule;
  Ref: Ref;
  PullRequest: PullRequest;
  UserContentEdit: UserContentEdit;
  Label: Label;
  Reaction: Reaction;
  IssueComment: IssueComment;
  PullRequestCommit: PullRequestCommit;
  Commit: Commit;
  CommitComment: CommitComment;
  Deployment: Deployment;
  DeploymentStatus: DeploymentStatus;
  Status: Status;
  StatusContext: StatusContext;
  Tree: Tree;
  Milestone: Milestone;
  ReviewRequest: ReviewRequest;
  Team: Team;
  OrganizationInvitation: OrganizationInvitation;
  PullRequestReview: PullRequestReview;
  PullRequestReviewComment: PullRequestReviewComment;
  CommitCommentThread: CommitCommentThread;
  PullRequestReviewThread: PullRequestReviewThread;
  ClosedEvent: ClosedEvent;
  ReopenedEvent: ReopenedEvent;
  SubscribedEvent: SubscribedEvent;
  UnsubscribedEvent: UnsubscribedEvent;
  MergedEvent: MergedEvent;
  ReferencedEvent: ReferencedEvent;
  CrossReferencedEvent: CrossReferencedEvent;
  AssignedEvent: AssignedEvent;
  UnassignedEvent: UnassignedEvent;
  LabeledEvent: LabeledEvent;
  UnlabeledEvent: UnlabeledEvent;
  MilestonedEvent: MilestonedEvent;
  DemilestonedEvent: DemilestonedEvent;
  RenamedTitleEvent: RenamedTitleEvent;
  LockedEvent: LockedEvent;
  UnlockedEvent: UnlockedEvent;
  DeployedEvent: DeployedEvent;
  DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent: HeadRefDeletedEvent;
  HeadRefRestoredEvent: HeadRefRestoredEvent;
  HeadRefForcePushedEvent: HeadRefForcePushedEvent;
  BaseRefForcePushedEvent: BaseRefForcePushedEvent;
  ReviewRequestedEvent: ReviewRequestedEvent;
  ReviewRequestRemovedEvent: ReviewRequestRemovedEvent;
  ReviewDismissedEvent: ReviewDismissedEvent;
  PushAllowance: PushAllowance;
  ReviewDismissalAllowance: ReviewDismissalAllowance;
  DeployKey: DeployKey;
  Language: Language;
  ProtectedBranch: ProtectedBranch;
  Release: Release;
  ReleaseAsset: ReleaseAsset;
  RepositoryTopic: RepositoryTopic;
  Topic: Topic;
  Gist: Gist;
  GistComment: GistComment;
  PublicKey: PublicKey;
  TransferredEvent: TransferredEvent;
  OrganizationIdentityProvider: OrganizationIdentityProvider;
  ExternalIdentity: ExternalIdentity;
  SecurityAdvisory: SecurityAdvisory;
  AddedToProjectEvent: AddedToProjectEvent;
  BaseRefChangedEvent: BaseRefChangedEvent;
  Blob: Blob;
  Bot: Bot;
  CommentDeletedEvent: CommentDeletedEvent;
  ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent;
  MentionedEvent: MentionedEvent;
  MovedColumnsInProjectEvent: MovedColumnsInProjectEvent;
  PinnedEvent: PinnedEvent;
  RemovedFromProjectEvent: RemovedFromProjectEvent;
  UnpinnedEvent: UnpinnedEvent;
  RepositoryInvitation: RepositoryInvitation;
  Tag: Tag;
}

/**
 * An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
 */
export type URI = any;

/**
 * A repository's open source license
 */
export interface License extends Node {
  
  /**
   * The full text of the license
   */
  body: string;
  
  /**
   * The conditions set by the license
   */
  conditions: Array<LicenseRule | null>;
  
  /**
   * A human-readable description of the license
   */
  description?: string;
  
  /**
   * Whether the license should be featured
   */
  featured: boolean;
  
  /**
   * Whether the license should be displayed in license pickers
   */
  hidden: boolean;
  id: string;
  
  /**
   * Instructions on how to implement the license
   */
  implementation?: string;
  
  /**
   * The lowercased SPDX ID of the license
   */
  key: string;
  
  /**
   * The limitations set by the license
   */
  limitations: Array<LicenseRule | null>;
  
  /**
   * The license full name specified by <https://spdx.org/licenses>
   */
  name: string;
  
  /**
   * Customary short name if applicable (e.g, GPLv3)
   */
  nickname?: string;
  
  /**
   * The permissions set by the license
   */
  permissions: Array<LicenseRule | null>;
  
  /**
   * Whether the license is a pseudo-license placeholder (e.g., other, no-license)
   */
  pseudoLicense: boolean;
  
  /**
   * Short identifier specified by <https://spdx.org/licenses>
   */
  spdxId?: string;
  
  /**
   * URL to the license on <https://choosealicense.com>
   */
  url?: URI;
}

/**
 * Describes a License's conditions, permissions, and limitations
 */
export interface LicenseRule {
  
  /**
   * A description of the rule
   */
  description: string;
  
  /**
   * The machine-readable rule key
   */
  key: string;
  
  /**
   * The human-readable rule label
   */
  label: string;
}

/**
 * A public description of a Marketplace category.
 */
export interface MarketplaceCategory extends Node {
  
  /**
   * The category's description.
   */
  description?: string;
  
  /**
   * The technical description of how apps listed in this category work with GitHub.
   */
  howItWorks?: string;
  id: string;
  
  /**
   * The category's name.
   */
  name: string;
  
  /**
   * How many Marketplace listings have this as their primary category.
   */
  primaryListingCount: number;
  
  /**
   * The HTTP path for this Marketplace category.
   */
  resourcePath: URI;
  
  /**
   * How many Marketplace listings have this as their secondary category.
   */
  secondaryListingCount: number;
  
  /**
   * The short name of the category used in its URL.
   */
  slug: string;
  
  /**
   * The HTTP URL for this Marketplace category.
   */
  url: URI;
}

/**
 * A listing in the GitHub integration marketplace.
 */
export interface MarketplaceListing extends Node {
  
  /**
   * The GitHub App this listing represents.
   */
  app?: App;
  
  /**
   * URL to the listing owner's company site.
   */
  companyUrl?: URI;
  
  /**
   * The HTTP path for configuring access to the listing's integration or OAuth app
   */
  configurationResourcePath: URI;
  
  /**
   * The HTTP URL for configuring access to the listing's integration or OAuth app
   */
  configurationUrl: URI;
  
  /**
   * URL to the listing's documentation.
   */
  documentationUrl?: URI;
  
  /**
   * The listing's detailed description.
   */
  extendedDescription?: string;
  
  /**
   * The listing's detailed description rendered to HTML.
   */
  extendedDescriptionHTML: HTML;
  
  /**
   * The listing's introductory description.
   */
  fullDescription: string;
  
  /**
   * The listing's introductory description rendered to HTML.
   */
  fullDescriptionHTML: HTML;
  
  /**
   * Whether this listing has been submitted for review from GitHub for approval to be displayed in the Marketplace.
   */
  hasApprovalBeenRequested: boolean;
  
  /**
   * Does this listing have any plans with a free trial?
   */
  hasPublishedFreeTrialPlans: boolean;
  
  /**
   * Does this listing have a terms of service link?
   */
  hasTermsOfService: boolean;
  
  /**
   * A technical description of how this app works with GitHub.
   */
  howItWorks?: string;
  
  /**
   * The listing's technical description rendered to HTML.
   */
  howItWorksHTML: HTML;
  id: string;
  
  /**
   * URL to install the product to the viewer's account or organization.
   */
  installationUrl?: URI;
  
  /**
   * Whether this listing's app has been installed for the current viewer
   */
  installedForViewer: boolean;
  
  /**
   * Whether this listing has been approved for display in the Marketplace.
   */
  isApproved: boolean;
  
  /**
   * Whether this listing has been removed from the Marketplace.
   */
  isDelisted: boolean;
  
  /**
   * Whether this listing is still an editable draft that has not been submitted
   * for review and is not publicly visible in the Marketplace.
   */
  isDraft: boolean;
  
  /**
   * Whether the product this listing represents is available as part of a paid plan.
   */
  isPaid: boolean;
  
  /**
   * Whether this listing has been rejected by GitHub for display in the Marketplace.
   */
  isRejected: boolean;
  
  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: string;
  
  /**
   * URL for the listing's logo image.
   */
  logoUrl?: URI;
  
  /**
   * The listing's full name.
   */
  name: string;
  
  /**
   * The listing's very short description without a trailing period or ampersands.
   */
  normalizedShortDescription: string;
  
  /**
   * URL to the listing's detailed pricing.
   */
  pricingUrl?: URI;
  
  /**
   * The category that best describes the listing.
   */
  primaryCategory: MarketplaceCategory;
  
  /**
   * URL to the listing's privacy policy.
   */
  privacyPolicyUrl: URI;
  
  /**
   * The HTTP path for the Marketplace listing.
   */
  resourcePath: URI;
  
  /**
   * The URLs for the listing's screenshots.
   */
  screenshotUrls: Array<string | null>;
  
  /**
   * An alternate category that describes the listing.
   */
  secondaryCategory?: MarketplaceCategory;
  
  /**
   * The listing's very short description.
   */
  shortDescription: string;
  
  /**
   * The short name of the listing used in its URL.
   */
  slug: string;
  
  /**
   * URL to the listing's status page.
   */
  statusUrl?: URI;
  
  /**
   * An email address for support for this listing's app.
   */
  supportEmail?: string;
  
  /**
   * Either a URL or an email address for support for this listing's app.
   */
  supportUrl: URI;
  
  /**
   * URL to the listing's terms of service.
   */
  termsOfServiceUrl?: URI;
  
  /**
   * The HTTP URL for the Marketplace listing.
   */
  url: URI;
  
  /**
   * Can the current viewer add plans for this Marketplace listing.
   */
  viewerCanAddPlans: boolean;
  
  /**
   * Can the current viewer approve this Marketplace listing.
   */
  viewerCanApprove: boolean;
  
  /**
   * Can the current viewer delist this Marketplace listing.
   */
  viewerCanDelist: boolean;
  
  /**
   * Can the current viewer edit this Marketplace listing.
   */
  viewerCanEdit: boolean;
  
  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   */
  viewerCanEditCategories: boolean;
  
  /**
   * Can the current viewer edit the plans for this Marketplace listing.
   */
  viewerCanEditPlans: boolean;
  
  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   */
  viewerCanRedraft: boolean;
  
  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   */
  viewerCanReject: boolean;
  
  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace.
   */
  viewerCanRequestApproval: boolean;
  
  /**
   * Indicates whether the current user has an active subscription to this Marketplace listing.
   */
  viewerHasPurchased: boolean;
  
  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   */
  viewerHasPurchasedForAllOrganizations: boolean;
  
  /**
   * Does the current viewer role allow them to administer this Marketplace listing.
   */
  viewerIsListingAdmin: boolean;
}

/**
 * A GitHub App.
 */
export interface App extends Node {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The description of the app.
   */
  description?: string;
  id: string;
  
  /**
   * The hex color code, without the leading '#', for the logo background.
   */
  logoBackgroundColor: string;
  
  /**
   * A URL pointing to the app's logo.
   */
  logoUrl: URI;
  
  /**
   * The name of the app.
   */
  name: string;
  
  /**
   * A slug based on the name of the app for use in URLs.
   */
  slug: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The URL to the app's homepage.
   */
  url: URI;
}

/**
 * An ISO-8601 encoded UTC date string.
 */
export type DateTime = any;

/**
 * A string containing HTML code.
 */
export type HTML = any;

/**
 * Look up Marketplace Listings
 */
export interface MarketplaceListingConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<MarketplaceListingEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<MarketplaceListing | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface MarketplaceListingEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: MarketplaceListing;
}

/**
 * Information about pagination in a connection.
 */
export interface PageInfo {
  
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor?: string;
  
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: boolean;
  
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: boolean;
  
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor?: string;
}

/**
 * Represents information about the GitHub instance.
 */
export interface GitHubMetadata {
  
  /**
   * Returns a String that's a SHA of `github-services`
   */
  gitHubServicesSha: GitObjectID;
  
  /**
   * IP addresses that users connect to for git operations
   */
  gitIpAddresses?: Array<string>;
  
  /**
   * IP addresses that service hooks are sent from
   */
  hookIpAddresses?: Array<string>;
  
  /**
   * IP addresses that the importer connects from
   */
  importerIpAddresses?: Array<string>;
  
  /**
   * Whether or not users are verified
   */
  isPasswordAuthenticationVerifiable: boolean;
  
  /**
   * IP addresses for GitHub Pages' A records
   */
  pagesIpAddresses?: Array<string>;
}

/**
 * A Git object ID.
 */
export type GitObjectID = any;

/**
 * An account on GitHub, with one or more owners, that has repositories, members and teams.
 */
export interface Organization extends Node, Actor, RegistryPackageOwner, RegistryPackageSearch, ProjectOwner, RepositoryOwner, UniformResourceLocatable {
  
  /**
   * A URL pointing to the organization's public avatar.
   */
  avatarUrl: URI;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The organization's public profile description.
   */
  description?: string;
  
  /**
   * The organization's public email.
   */
  email?: string;
  id: string;
  
  /**
   * Whether the organization has verified its profile email and website.
   */
  isVerified: boolean;
  
  /**
   * The organization's public profile location.
   */
  location?: string;
  
  /**
   * The organization's login name.
   */
  login: string;
  
  /**
   * A list of users who are members of this organization.
   * @deprecated The `members` field is deprecated and will be removed soon. Use `Organization.membersWithRole` instead. Removal on 2019-04-01 UTC.
   */
  members: UserConnection;
  
  /**
   * A list of users who are members of this organization.
   */
  membersWithRole: OrganizationMemberConnection;
  
  /**
   * The organization's public profile name.
   */
  name?: string;
  
  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: URI;
  
  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: URI;
  
  /**
   * The billing email for the organization.
   */
  organizationBillingEmail?: string;
  
  /**
   * A list of users who have been invited to join this organization.
   */
  pendingMembers: UserConnection;
  
  /**
   * A list of repositories this user has pinned to their profile
   */
  pinnedRepositories: RepositoryConnection;
  
  /**
   * Find project by number.
   */
  project?: Project;
  
  /**
   * A list of projects under the owner.
   */
  projects: ProjectConnection;
  
  /**
   * The HTTP path listing organization's projects
   */
  projectsResourcePath: URI;
  
  /**
   * The HTTP URL listing organization's projects
   */
  projectsUrl: URI;
  
  /**
   * A list of repositories that the user owns.
   */
  repositories: RepositoryConnection;
  
  /**
   * Find Repository.
   */
  repository?: Repository;
  
  /**
   * When true the organization requires all members, billing managers, and outside
   * collaborators to enable two-factor authentication.
   */
  requiresTwoFactorAuthentication?: boolean;
  
  /**
   * The HTTP path for this organization.
   */
  resourcePath: URI;
  
  /**
   * The Organization's SAML Identity Providers
   */
  samlIdentityProvider?: OrganizationIdentityProvider;
  
  /**
   * Find an organization's team by its slug.
   */
  team?: Team;
  
  /**
   * A list of teams in this organization.
   */
  teams: TeamConnection;
  
  /**
   * The HTTP path listing organization's teams
   */
  teamsResourcePath: URI;
  
  /**
   * The HTTP URL listing organization's teams
   */
  teamsUrl: URI;
  
  /**
   * The HTTP URL for this organization.
   */
  url: URI;
  
  /**
   * Organization is adminable by the viewer.
   */
  viewerCanAdminister: boolean;
  
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
  
  /**
   * Viewer can create repositories on this organization
   */
  viewerCanCreateRepositories: boolean;
  
  /**
   * Viewer can create teams on this organization.
   */
  viewerCanCreateTeams: boolean;
  
  /**
   * Viewer is an active member of this organization.
   */
  viewerIsAMember: boolean;
  
  /**
   * The organization's public profile URL.
   */
  websiteUrl?: URI;
}

/**
 * Represents an object which can take actions on GitHub. Typically a User or Bot.
 */
export interface Actor {
  
  /**
   * A URL pointing to the actor's public avatar.
   */
  avatarUrl: URI;
  
  /**
   * The username of the actor.
   */
  login: string;
  
  /**
   * The HTTP path for this actor.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this actor.
   */
  url: URI;
}

/** Use this to resolve interface type Actor */
export type PossibleActorTypeNames = 'Organization' | 'User' | 'Bot';

export interface ActorNameMap {
  Actor: Actor;
  Organization: Organization;
  User: User;
  Bot: Bot;
}

/**
 * Represents an owner of a registry package.
 */
export interface RegistryPackageOwner {
  id: string;
}

/** Use this to resolve interface type RegistryPackageOwner */
export type PossibleRegistryPackageOwnerTypeNames =
'Organization' |
'User' |
'Repository';

export interface RegistryPackageOwnerNameMap {
  RegistryPackageOwner: RegistryPackageOwner;
  Organization: Organization;
  User: User;
  Repository: Repository;
}

/**
 * Represents an interface to search packages on an object.
 */
export interface RegistryPackageSearch {
  id: string;
}

/** Use this to resolve interface type RegistryPackageSearch */
export type PossibleRegistryPackageSearchTypeNames = 'Organization' | 'User';

export interface RegistryPackageSearchNameMap {
  RegistryPackageSearch: RegistryPackageSearch;
  Organization: Organization;
  User: User;
}

/**
 * Represents an owner of a Project.
 */
export interface ProjectOwner {
  id: string;
  
  /**
   * Find project by number.
   */
  project?: Project;
  
  /**
   * A list of projects under the owner.
   */
  projects: ProjectConnection;
  
  /**
   * The HTTP path listing owners projects
   */
  projectsResourcePath: URI;
  
  /**
   * The HTTP URL listing owners projects
   */
  projectsUrl: URI;
  
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
}

/** Use this to resolve interface type ProjectOwner */
export type PossibleProjectOwnerTypeNames = 'Organization' | 'Repository';

export interface ProjectOwnerNameMap {
  ProjectOwner: ProjectOwner;
  Organization: Organization;
  Repository: Repository;
}

/**
 * Projects manage issues, pull requests and notes within a project owner.
 */
export interface Project extends Node, Closable, Updatable {
  
  /**
   * The project's description body.
   */
  body?: string;
  
  /**
   * The projects description body rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: DateTime;
  
  /**
   * List of columns in the project
   */
  columns: ProjectColumnConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The actor who originally created the project.
   */
  creator?: Actor;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The project's name.
   */
  name: string;
  
  /**
   * The project's number.
   */
  number: number;
  
  /**
   * The project's owner. Currently limited to repositories and organizations.
   */
  owner: ProjectOwner;
  
  /**
   * List of pending cards in this project
   */
  pendingCards: ProjectCardConnection;
  
  /**
   * The HTTP path for this project
   */
  resourcePath: URI;
  
  /**
   * Whether the project is open or closed.
   */
  state: ProjectState;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this project
   */
  url: URI;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
}

/**
 * An object that can be closed
 */
export interface Closable {
  
  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: DateTime;
}

/** Use this to resolve interface type Closable */
export type PossibleClosableTypeNames =
'Project' |
'Issue' |
'PullRequest' |
'Milestone';

export interface ClosableNameMap {
  Closable: Closable;
  Project: Project;
  Issue: Issue;
  PullRequest: PullRequest;
  Milestone: Milestone;
}

/**
 * Entities that can be updated.
 */
export interface Updatable {
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
}

/** Use this to resolve interface type Updatable */
export type PossibleUpdatableTypeNames =
'Project' |
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'GistComment';

export interface UpdatableNameMap {
  Updatable: Updatable;
  Project: Project;
  Issue: Issue;
  PullRequest: PullRequest;
  IssueComment: IssueComment;
  CommitComment: CommitComment;
  PullRequestReview: PullRequestReview;
  PullRequestReviewComment: PullRequestReviewComment;
  GistComment: GistComment;
}

/**
 * The connection type for ProjectColumn.
 */
export interface ProjectColumnConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ProjectColumnEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<ProjectColumn | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ProjectColumnEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: ProjectColumn;
}

/**
 * A column inside a project.
 */
export interface ProjectColumn extends Node {
  
  /**
   * List of cards in the column
   */
  cards: ProjectCardConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The project column's name.
   */
  name: string;
  
  /**
   * The project that contains this column.
   */
  project: Project;
  
  /**
   * The semantic purpose of the column
   */
  purpose?: ProjectColumnPurpose;
  
  /**
   * The HTTP path for this project column
   */
  resourcePath: URI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this project column
   */
  url: URI;
}

/**
 * The possible archived states of a project card.
 */
export enum ProjectCardArchivedState {
  
  /**
   * A project card that is archived
   */
  ARCHIVED = 'ARCHIVED',
  
  /**
   * A project card that is not archived
   */
  NOT_ARCHIVED = 'NOT_ARCHIVED'
}

/**
 * The connection type for ProjectCard.
 */
export interface ProjectCardConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ProjectCardEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<ProjectCard | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ProjectCardEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: ProjectCard;
}

/**
 * A card in a project.
 */
export interface ProjectCard extends Node {
  
  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   */
  column?: ProjectColumn;
  
  /**
   * The card content item
   */
  content?: ProjectCardItem;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The actor who created this card
   */
  creator?: Actor;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * Whether the card is archived
   */
  isArchived: boolean;
  
  /**
   * The card note
   */
  note?: string;
  
  /**
   * The project that contains this card.
   */
  project: Project;
  
  /**
   * The HTTP path for this card
   */
  resourcePath: URI;
  
  /**
   * The state of ProjectCard
   */
  state?: ProjectCardState;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this card
   */
  url: URI;
}

/**
 * Types that can be inside Project Cards.
 */
export type ProjectCardItem = Issue | PullRequest;

/** Use this to resolve union type ProjectCardItem */
export type PossibleProjectCardItemTypeNames = 'Issue' | 'PullRequest';

export interface ProjectCardItemNameMap {
  ProjectCardItem: ProjectCardItem;
  Issue: Issue;
  PullRequest: PullRequest;
}

/**
 * An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
 */
export interface Issue extends Node, Assignable, Closable, Comment, Updatable, UpdatableComment, Labelable, Lockable, Reactable, RepositoryNode, Subscribable, UniformResourceLocatable {
  
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: LockReason;
  
  /**
   * A list of Users assigned to this object.
   */
  assignees: UserConnection;
  
  /**
   * The actor who authored the comment.
   */
  author?: Actor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: CommentAuthorAssociation;
  
  /**
   * Identifies the body of the issue.
   */
  body: string;
  
  /**
   * Identifies the body of the issue rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * Identifies the body of the issue rendered to text.
   */
  bodyText: string;
  
  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: DateTime;
  
  /**
   * A list of comments associated with the Issue.
   */
  comments: IssueCommentConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: Actor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * A list of labels associated with the object.
   */
  labels?: LabelConnection;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: DateTime;
  
  /**
   * `true` if the object is locked
   */
  locked: boolean;
  
  /**
   * Identifies the milestone associated with the issue.
   */
  milestone?: Milestone;
  
  /**
   * Identifies the issue number.
   */
  number: number;
  
  /**
   * A list of Users that are participating in the Issue conversation.
   */
  participants: UserConnection;
  
  /**
   * List of project cards associated with this issue.
   */
  projectCards: ProjectCardConnection;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: DateTime;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<ReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: ReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  
  /**
   * The HTTP path for this issue
   */
  resourcePath: URI;
  
  /**
   * Identifies the state of the issue.
   */
  state: IssueState;
  
  /**
   * A list of events, comments, commits, etc. associated with the issue.
   */
  timeline: IssueTimelineConnection;
  
  /**
   * Identifies the issue title.
   */
  title: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this issue
   */
  url: URI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: UserContentEditConnection;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: SubscriptionState;
}

/**
 * An object that can have users assigned to it.
 */
export interface Assignable {
  
  /**
   * A list of Users assigned to this object.
   */
  assignees: UserConnection;
}

/** Use this to resolve interface type Assignable */
export type PossibleAssignableTypeNames = 'Issue' | 'PullRequest';

export interface AssignableNameMap {
  Assignable: Assignable;
  Issue: Issue;
  PullRequest: PullRequest;
}

/**
 * The connection type for User.
 */
export interface UserConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<UserEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<User | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user.
 */
export interface UserEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: User;
}

/**
 * A user is an individual's account on GitHub that owns repositories and can make new content.
 */
export interface User extends Node, Actor, RegistryPackageOwner, RegistryPackageSearch, RepositoryOwner, UniformResourceLocatable {
  
  /**
   * A URL pointing to the user's public avatar.
   */
  avatarUrl: URI;
  
  /**
   * The user's public profile bio.
   */
  bio?: string;
  
  /**
   * The user's public profile bio as HTML.
   */
  bioHTML: HTML;
  
  /**
   * A list of commit comments made by this user.
   */
  commitComments: CommitCommentConnection;
  
  /**
   * The user's public profile company.
   */
  company?: string;
  
  /**
   * The user's public profile company as HTML.
   */
  companyHTML: HTML;
  
  /**
   * The collection of contributions this user has made to different repositories.
   */
  contributionsCollection: ContributionsCollection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The user's publicly visible profile email.
   */
  email: string;
  
  /**
   * A list of users the given user is followed by.
   */
  followers: FollowerConnection;
  
  /**
   * A list of users the given user is following.
   */
  following: FollowingConnection;
  
  /**
   * Find gist by repo name.
   */
  gist?: Gist;
  
  /**
   * A list of gist comments made by this user.
   */
  gistComments: GistCommentConnection;
  
  /**
   * A list of the Gists the user has created.
   */
  gists: GistConnection;
  id: string;
  
  /**
   * Whether or not this user is a participant in the GitHub Security Bug Bounty.
   */
  isBountyHunter: boolean;
  
  /**
   * Whether or not this user is a participant in the GitHub Campus Experts Program.
   */
  isCampusExpert: boolean;
  
  /**
   * Whether or not this user is a GitHub Developer Program member.
   */
  isDeveloperProgramMember: boolean;
  
  /**
   * Whether or not this user is a GitHub employee.
   */
  isEmployee: boolean;
  
  /**
   * Whether or not the user has marked themselves as for hire.
   */
  isHireable: boolean;
  
  /**
   * Whether or not this user is a site administrator.
   */
  isSiteAdmin: boolean;
  
  /**
   * Whether or not this user is the viewing user.
   */
  isViewer: boolean;
  
  /**
   * A list of issue comments made by this user.
   */
  issueComments: IssueCommentConnection;
  
  /**
   * A list of issues associated with this user.
   */
  issues: IssueConnection;
  
  /**
   * The user's public profile location.
   */
  location?: string;
  
  /**
   * The username used to login.
   */
  login: string;
  
  /**
   * The user's public profile name.
   */
  name?: string;
  
  /**
   * Find an organization by its login that the user belongs to.
   */
  organization?: Organization;
  
  /**
   * A list of organizations the user belongs to.
   */
  organizations: OrganizationConnection;
  
  /**
   * A list of repositories this user has pinned to their profile
   */
  pinnedRepositories: RepositoryConnection;
  
  /**
   * A list of public keys associated with this user.
   */
  publicKeys: PublicKeyConnection;
  
  /**
   * A list of pull requests associated with this user.
   */
  pullRequests: PullRequestConnection;
  
  /**
   * A list of repositories that the user owns.
   */
  repositories: RepositoryConnection;
  
  /**
   * A list of repositories that the user recently contributed to.
   */
  repositoriesContributedTo: RepositoryConnection;
  
  /**
   * Find Repository.
   */
  repository?: Repository;
  
  /**
   * The HTTP path for this user
   */
  resourcePath: URI;
  
  /**
   * Repositories the user has starred.
   */
  starredRepositories: StarredRepositoryConnection;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this user
   */
  url: URI;
  
  /**
   * Whether or not the viewer is able to follow the user.
   */
  viewerCanFollow: boolean;
  
  /**
   * Whether or not this user is followed by the viewer.
   */
  viewerIsFollowing: boolean;
  
  /**
   * A list of repositories the given user is watching.
   */
  watching: RepositoryConnection;
  
  /**
   * A URL pointing to the user's public website/blog.
   */
  websiteUrl?: URI;
}

/**
 * Represents an owner of a Repository.
 */
export interface RepositoryOwner {
  
  /**
   * A URL pointing to the owner's public avatar.
   */
  avatarUrl: URI;
  id: string;
  
  /**
   * The username used to login.
   */
  login: string;
  
  /**
   * A list of repositories this user has pinned to their profile
   */
  pinnedRepositories: RepositoryConnection;
  
  /**
   * A list of repositories that the user owns.
   */
  repositories: RepositoryConnection;
  
  /**
   * Find Repository.
   */
  repository?: Repository;
  
  /**
   * The HTTP URL for the owner.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for the owner.
   */
  url: URI;
}

/** Use this to resolve interface type RepositoryOwner */
export type PossibleRepositoryOwnerTypeNames = 'Organization' | 'User';

export interface RepositoryOwnerNameMap {
  RepositoryOwner: RepositoryOwner;
  Organization: Organization;
  User: User;
}

/**
 * The privacy of a repository
 */
export enum RepositoryPrivacy {
  
  /**
   * Public
   */
  PUBLIC = 'PUBLIC',
  
  /**
   * Private
   */
  PRIVATE = 'PRIVATE'
}

/**
 * Ordering options for repository connections
 */
export interface RepositoryOrder {
  
  /**
   * The field to order repositories by.
   */
  field: RepositoryOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which repository connections can be ordered.
 */
export enum RepositoryOrderField {
  
  /**
   * Order repositories by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order repositories by update time
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Order repositories by push time
   */
  PUSHED_AT = 'PUSHED_AT',
  
  /**
   * Order repositories by name
   */
  NAME = 'NAME',
  
  /**
   * Order repositories by number of stargazers
   */
  STARGAZERS = 'STARGAZERS'
}

/**
 * Possible directions in which to order a list of items when provided an `orderBy` argument.
 */
export enum OrderDirection {
  
  /**
   * Specifies an ascending order for a given `orderBy` argument.
   */
  ASC = 'ASC',
  
  /**
   * Specifies a descending order for a given `orderBy` argument.
   */
  DESC = 'DESC'
}

/**
 * The affiliation of a user to a repository
 */
export enum RepositoryAffiliation {
  
  /**
   * Repositories that are owned by the authenticated user.
   */
  OWNER = 'OWNER',
  
  /**
   * Repositories that the user has been added to as a collaborator.
   */
  COLLABORATOR = 'COLLABORATOR',
  
  /**
   * Repositories that the user has access to through being a member of an
   * organization. This includes every repository on every team that the user is on.
   */
  ORGANIZATION_MEMBER = 'ORGANIZATION_MEMBER'
}

/**
 * A list of repositories owned by the subject.
 */
export interface RepositoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<RepositoryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Repository | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * The total size in kilobytes of all repositories in the connection.
   */
  totalDiskUsage: number;
}

/**
 * An edge in a connection.
 */
export interface RepositoryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Repository;
}

/**
 * A repository contains the content for a project.
 */
export interface Repository extends Node, ProjectOwner, RegistryPackageOwner, Subscribable, Starrable, UniformResourceLocatable, RepositoryInfo {
  
  /**
   * A list of users that can be assigned to issues in this repository.
   */
  assignableUsers: UserConnection;
  
  /**
   * A list of branch protection rules for this repository.
   */
  branchProtectionRules: BranchProtectionRuleConnection;
  
  /**
   * Returns the code of conduct for this repository
   */
  codeOfConduct?: CodeOfConduct;
  
  /**
   * A list of collaborators associated with the repository.
   */
  collaborators?: RepositoryCollaboratorConnection;
  
  /**
   * A list of commit comments associated with the repository.
   */
  commitComments: CommitCommentConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The Ref associated with the repository's default branch.
   */
  defaultBranchRef?: Ref;
  
  /**
   * A list of deploy keys that are on this repository.
   */
  deployKeys: DeployKeyConnection;
  
  /**
   * Deployments associated with the repository
   */
  deployments: DeploymentConnection;
  
  /**
   * The description of the repository.
   */
  description?: string;
  
  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: HTML;
  
  /**
   * The number of kilobytes this repository occupies on disk.
   */
  diskUsage?: number;
  
  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: number;
  
  /**
   * A list of direct forked repositories.
   */
  forks: RepositoryConnection;
  
  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: boolean;
  
  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: boolean;
  
  /**
   * The repository's URL.
   */
  homepageUrl?: URI;
  id: string;
  
  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: boolean;
  
  /**
   * Identifies if the repository is a fork.
   */
  isFork: boolean;
  
  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: boolean;
  
  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: boolean;
  
  /**
   * Identifies if the repository is private.
   */
  isPrivate: boolean;
  
  /**
   * Returns a single issue from the current repository by number.
   */
  issue?: Issue;
  
  /**
   * Returns a single issue-like object from the current repository by number.
   */
  issueOrPullRequest?: IssueOrPullRequest;
  
  /**
   * A list of issues that have been opened in the repository.
   */
  issues: IssueConnection;
  
  /**
   * Returns a single label by name
   */
  label?: Label;
  
  /**
   * A list of labels associated with the repository.
   */
  labels?: LabelConnection;
  
  /**
   * A list containing a breakdown of the language composition of the repository.
   */
  languages?: LanguageConnection;
  
  /**
   * The license associated with the repository
   */
  licenseInfo?: License;
  
  /**
   * The reason the repository has been locked.
   */
  lockReason?: RepositoryLockReason;
  
  /**
   * A list of Users that can be mentioned in the context of the repository.
   */
  mentionableUsers: UserConnection;
  
  /**
   * Whether or not PRs are merged with a merge commit on this repository.
   */
  mergeCommitAllowed: boolean;
  
  /**
   * Returns a single milestone from the current repository by number.
   */
  milestone?: Milestone;
  
  /**
   * A list of milestones associated with the repository.
   */
  milestones?: MilestoneConnection;
  
  /**
   * The repository's original mirror URL.
   */
  mirrorUrl?: URI;
  
  /**
   * The name of the repository.
   */
  name: string;
  
  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;
  
  /**
   * A Git object in the repository
   */
  object?: GitObject;
  
  /**
   * The User owner of the repository.
   */
  owner: RepositoryOwner;
  
  /**
   * The repository parent, if this is a fork.
   */
  parent?: Repository;
  
  /**
   * The primary language of the repository's code.
   */
  primaryLanguage?: Language;
  
  /**
   * Find project by number.
   */
  project?: Project;
  
  /**
   * A list of projects under the owner.
   */
  projects: ProjectConnection;
  
  /**
   * The HTTP path listing the repository's projects
   */
  projectsResourcePath: URI;
  
  /**
   * The HTTP URL listing the repository's projects
   */
  projectsUrl: URI;
  
  /**
   * A list of protected branches that are on this repository.
   * @deprecated The `ProtectedBranch` type is deprecated and will be removed soon. Use `Repository.branchProtectionRules` instead. Removal on 2019-01-01 UTC.
   */
  protectedBranches: ProtectedBranchConnection;
  
  /**
   * Returns a single pull request from the current repository by number.
   */
  pullRequest?: PullRequest;
  
  /**
   * A list of pull requests that have been opened in the repository.
   */
  pullRequests: PullRequestConnection;
  
  /**
   * Identifies when the repository was last pushed to.
   */
  pushedAt?: DateTime;
  
  /**
   * Whether or not rebase-merging is enabled on this repository.
   */
  rebaseMergeAllowed: boolean;
  
  /**
   * Fetch a given ref from the repository
   */
  ref?: Ref;
  
  /**
   * Fetch a list of refs from the repository
   */
  refs?: RefConnection;
  
  /**
   * Lookup a single release given various criteria.
   */
  release?: Release;
  
  /**
   * List of releases which are dependent on this repository.
   */
  releases: ReleaseConnection;
  
  /**
   * A list of applied repository-topic associations for this repository.
   */
  repositoryTopics: RepositoryTopicConnection;
  
  /**
   * The HTTP path for this repository
   */
  resourcePath: URI;
  
  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: HTML;
  
  /**
   * Whether or not squash-merging is enabled on this repository.
   */
  squashMergeAllowed: boolean;
  
  /**
   * The SSH URL to clone this repository
   */
  sshUrl: GitSSHRemote;
  
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: StargazerConnection;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this repository
   */
  url: URI;
  
  /**
   * Indicates whether the viewer has admin permissions on this repository.
   */
  viewerCanAdminister: boolean;
  
  /**
   * Can the current viewer create new projects on this owner.
   */
  viewerCanCreateProjects: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Indicates whether the viewer can update the topics of this repository.
   */
  viewerCanUpdateTopics: boolean;
  
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
  
  /**
   * The users permission level on the repository. Will return null if authenticated as an GitHub App.
   */
  viewerPermission?: RepositoryPermission;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: SubscriptionState;
  
  /**
   * A list of users watching the repository.
   */
  watchers: UserConnection;
}

/**
 * Entities that can be subscribed to for web and email notifications.
 */
export interface Subscribable {
  id: string;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: SubscriptionState;
}

/** Use this to resolve interface type Subscribable */
export type PossibleSubscribableTypeNames =
'Issue' |
'Repository' |
'PullRequest' |
'Commit' |
'Team';

export interface SubscribableNameMap {
  Subscribable: Subscribable;
  Issue: Issue;
  Repository: Repository;
  PullRequest: PullRequest;
  Commit: Commit;
  Team: Team;
}

/**
 * The possible states of a subscription.
 */
export enum SubscriptionState {
  
  /**
   * The User is only notified when participating or @mentioned.
   */
  UNSUBSCRIBED = 'UNSUBSCRIBED',
  
  /**
   * The User is notified of all conversations.
   */
  SUBSCRIBED = 'SUBSCRIBED',
  
  /**
   * The User is never notified.
   */
  IGNORED = 'IGNORED'
}

/**
 * Things that can be starred.
 */
export interface Starrable {
  id: string;
  
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: StargazerConnection;
  
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

/** Use this to resolve interface type Starrable */
export type PossibleStarrableTypeNames = 'Repository' | 'Topic' | 'Gist';

export interface StarrableNameMap {
  Starrable: Starrable;
  Repository: Repository;
  Topic: Topic;
  Gist: Gist;
}

/**
 * Ways in which star connections can be ordered.
 */
export interface StarOrder {
  
  /**
   * The field in which to order nodes by.
   */
  field: StarOrderField;
  
  /**
   * The direction in which to order nodes.
   */
  direction: OrderDirection;
}

/**
 * Properties by which star connections can be ordered.
 */
export enum StarOrderField {
  
  /**
   * Allows ordering a list of stars by when they were created.
   */
  STARRED_AT = 'STARRED_AT'
}

/**
 * The connection type for User.
 */
export interface StargazerConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<StargazerEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<User | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user that's starred a repository.
 */
export interface StargazerEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: User;
  
  /**
   * Identifies when the item was starred.
   */
  starredAt: DateTime;
}

/**
 * Represents a type that can be retrieved by a URL.
 */
export interface UniformResourceLocatable {
  
  /**
   * The HTML path to this resource.
   */
  resourcePath: URI;
  
  /**
   * The URL to this resource.
   */
  url: URI;
}

/** Use this to resolve interface type UniformResourceLocatable */
export type PossibleUniformResourceLocatableTypeNames =
'Organization' |
'Issue' |
'User' |
'Repository' |
'PullRequest' |
'PullRequestCommit' |
'Commit' |
'Milestone' |
'ClosedEvent' |
'MergedEvent' |
'CrossReferencedEvent' |
'ReviewDismissedEvent' |
'Release' |
'RepositoryTopic' |
'Bot';

export interface UniformResourceLocatableNameMap {
  UniformResourceLocatable: UniformResourceLocatable;
  Organization: Organization;
  Issue: Issue;
  User: User;
  Repository: Repository;
  PullRequest: PullRequest;
  PullRequestCommit: PullRequestCommit;
  Commit: Commit;
  Milestone: Milestone;
  ClosedEvent: ClosedEvent;
  MergedEvent: MergedEvent;
  CrossReferencedEvent: CrossReferencedEvent;
  ReviewDismissedEvent: ReviewDismissedEvent;
  Release: Release;
  RepositoryTopic: RepositoryTopic;
  Bot: Bot;
}

/**
 * A subset of repository info.
 */
export interface RepositoryInfo {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The description of the repository.
   */
  description?: string;
  
  /**
   * The description of the repository rendered to HTML.
   */
  descriptionHTML: HTML;
  
  /**
   * Returns how many forks there are of this repository in the whole network.
   */
  forkCount: number;
  
  /**
   * Indicates if the repository has issues feature enabled.
   */
  hasIssuesEnabled: boolean;
  
  /**
   * Indicates if the repository has wiki feature enabled.
   */
  hasWikiEnabled: boolean;
  
  /**
   * The repository's URL.
   */
  homepageUrl?: URI;
  
  /**
   * Indicates if the repository is unmaintained.
   */
  isArchived: boolean;
  
  /**
   * Identifies if the repository is a fork.
   */
  isFork: boolean;
  
  /**
   * Indicates if the repository has been locked or not.
   */
  isLocked: boolean;
  
  /**
   * Identifies if the repository is a mirror.
   */
  isMirror: boolean;
  
  /**
   * Identifies if the repository is private.
   */
  isPrivate: boolean;
  
  /**
   * The license associated with the repository
   */
  licenseInfo?: License;
  
  /**
   * The reason the repository has been locked.
   */
  lockReason?: RepositoryLockReason;
  
  /**
   * The repository's original mirror URL.
   */
  mirrorUrl?: URI;
  
  /**
   * The name of the repository.
   */
  name: string;
  
  /**
   * The repository's name with owner.
   */
  nameWithOwner: string;
  
  /**
   * The User owner of the repository.
   */
  owner: RepositoryOwner;
  
  /**
   * Identifies when the repository was last pushed to.
   */
  pushedAt?: DateTime;
  
  /**
   * The HTTP path for this repository
   */
  resourcePath: URI;
  
  /**
   * A description of the repository, rendered to HTML without any links in it.
   */
  shortDescriptionHTML: HTML;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this repository
   */
  url: URI;
}

/** Use this to resolve interface type RepositoryInfo */
export type PossibleRepositoryInfoTypeNames = 'Repository';

export interface RepositoryInfoNameMap {
  RepositoryInfo: RepositoryInfo;
  Repository: Repository;
}

/**
 * The possible reasons a given repository could be in a locked state.
 */
export enum RepositoryLockReason {
  
  /**
   * The repository is locked due to a move.
   */
  MOVING = 'MOVING',
  
  /**
   * The repository is locked due to a billing related reason.
   */
  BILLING = 'BILLING',
  
  /**
   * The repository is locked due to a rename.
   */
  RENAME = 'RENAME',
  
  /**
   * The repository is locked due to a migration.
   */
  MIGRATING = 'MIGRATING'
}

/**
 * The connection type for BranchProtectionRule.
 */
export interface BranchProtectionRuleConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<BranchProtectionRuleEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<BranchProtectionRule | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface BranchProtectionRuleEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: BranchProtectionRule;
}

/**
 * A branch protection rule.
 */
export interface BranchProtectionRule extends Node {
  
  /**
   * A list of conflicts matching branches protection rule and other branch protection rules
   */
  branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection;
  
  /**
   * The actor who created this branch protection rule.
   */
  creator?: Actor;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews: boolean;
  id: string;
  
  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced: boolean;
  
  /**
   * Repository refs that are protected by this rule
   */
  matchingRefs: RefConnection;
  
  /**
   * Identifies the protection rule pattern.
   */
  pattern: string;
  
  /**
   * A list push allowances for this branch protection rule.
   */
  pushAllowances: PushAllowanceConnection;
  
  /**
   * The repository associated with this branch protection rule.
   */
  repository?: Repository;
  
  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number;
  
  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string | null>;
  
  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews: boolean;
  
  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures: boolean;
  
  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks: boolean;
  
  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks: boolean;
  
  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes: boolean;
  
  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals: boolean;
  
  /**
   * A list review dismissal allowances for this branch protection rule.
   */
  reviewDismissalAllowances: ReviewDismissalAllowanceConnection;
}

/**
 * The connection type for BranchProtectionRuleConflict.
 */
export interface BranchProtectionRuleConflictConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<BranchProtectionRuleConflictEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<BranchProtectionRuleConflict | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface BranchProtectionRuleConflictEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: BranchProtectionRuleConflict;
}

/**
 * A conflict between two branch protection rules.
 */
export interface BranchProtectionRuleConflict {
  
  /**
   * Identifies the branch protection rule.
   */
  branchProtectionRule?: BranchProtectionRule;
  
  /**
   * Identifies the conflicting branch protection rule.
   */
  conflictingBranchProtectionRule?: BranchProtectionRule;
  
  /**
   * Identifies the branch ref that has conflicting rules
   */
  ref?: Ref;
}

/**
 * Represents a Git reference.
 */
export interface Ref extends Node {
  
  /**
   * A list of pull requests with this ref as the head ref.
   */
  associatedPullRequests: PullRequestConnection;
  id: string;
  
  /**
   * The ref name.
   */
  name: string;
  
  /**
   * The ref's prefix, such as `refs/heads/` or `refs/tags/`.
   */
  prefix: string;
  
  /**
   * The repository the ref belongs to.
   */
  repository: Repository;
  
  /**
   * The object the ref points to.
   */
  target: GitObject;
}

/**
 * The possible states of a pull request.
 */
export enum PullRequestState {
  
  /**
   * A pull request that is still open.
   */
  OPEN = 'OPEN',
  
  /**
   * A pull request that has been closed without being merged.
   */
  CLOSED = 'CLOSED',
  
  /**
   * A pull request that has been closed by being merged.
   */
  MERGED = 'MERGED'
}

/**
 * Ways in which lists of issues can be ordered upon return.
 */
export interface IssueOrder {
  
  /**
   * The field in which to order issues by.
   */
  field: IssueOrderField;
  
  /**
   * The direction in which to order issues by the specified field.
   */
  direction: OrderDirection;
}

/**
 * Properties by which issue connections can be ordered.
 */
export enum IssueOrderField {
  
  /**
   * Order issues by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order issues by update time
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Order issues by comment count
   */
  COMMENTS = 'COMMENTS'
}

/**
 * The connection type for PullRequest.
 */
export interface PullRequestConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<PullRequestEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<PullRequest | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface PullRequestEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PullRequest;
}

/**
 * A repository pull request.
 */
export interface PullRequest extends Node, Assignable, Closable, Comment, Updatable, UpdatableComment, Labelable, Lockable, Reactable, RepositoryNode, Subscribable, UniformResourceLocatable {
  
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: LockReason;
  
  /**
   * The number of additions in this pull request.
   */
  additions: number;
  
  /**
   * A list of Users assigned to this object.
   */
  assignees: UserConnection;
  
  /**
   * The actor who authored the comment.
   */
  author?: Actor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: CommentAuthorAssociation;
  
  /**
   * Identifies the base Ref associated with the pull request.
   */
  baseRef?: Ref;
  
  /**
   * Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefName: string;
  
  /**
   * Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
   */
  baseRefOid: GitObjectID;
  
  /**
   * The body as Markdown.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * The number of changed files in this pull request.
   */
  changedFiles: number;
  
  /**
   * `true` if the pull request is closed
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: DateTime;
  
  /**
   * A list of comments associated with the pull request.
   */
  comments: IssueCommentConnection;
  
  /**
   * A list of commits present in this pull request's head branch not present in the base branch.
   */
  commits: PullRequestCommitConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The number of deletions in this pull request.
   */
  deletions: number;
  
  /**
   * The actor who edited this pull request's body.
   */
  editor?: Actor;
  
  /**
   * Identifies the head Ref associated with the pull request.
   */
  headRef?: Ref;
  
  /**
   * Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
   */
  headRefName: string;
  
  /**
   * Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
   */
  headRefOid: GitObjectID;
  
  /**
   * The repository associated with this pull request's head Ref.
   */
  headRepository?: Repository;
  
  /**
   * The owner of the repository associated with this pull request's head Ref.
   */
  headRepositoryOwner?: RepositoryOwner;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * The head and base repositories are different.
   */
  isCrossRepository: boolean;
  
  /**
   * A list of labels associated with the object.
   */
  labels?: LabelConnection;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: DateTime;
  
  /**
   * `true` if the pull request is locked
   */
  locked: boolean;
  
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainerCanModify: boolean;
  
  /**
   * The commit that was created when this pull request was merged.
   */
  mergeCommit?: Commit;
  
  /**
   * Whether or not the pull request can be merged based on the existence of merge conflicts.
   */
  mergeable: MergeableState;
  
  /**
   * Whether or not the pull request was merged.
   */
  merged: boolean;
  
  /**
   * The date and time that the pull request was merged.
   */
  mergedAt?: DateTime;
  
  /**
   * The actor who merged the pull request.
   */
  mergedBy?: Actor;
  
  /**
   * Identifies the milestone associated with the pull request.
   */
  milestone?: Milestone;
  
  /**
   * Identifies the pull request number.
   */
  number: number;
  
  /**
   * A list of Users that are participating in the Pull Request conversation.
   */
  participants: UserConnection;
  
  /**
   * The permalink to the pull request.
   */
  permalink: URI;
  
  /**
   * The commit that GitHub automatically generated to test if this pull request
   * could be merged. This field will not return a value if the pull request is
   * merged, or if the test merge commit is still being generated. See the
   * `mergeable` field for more details on the mergeability of the pull request.
   */
  potentialMergeCommit?: Commit;
  
  /**
   * List of project cards associated with this pull request.
   */
  projectCards: ProjectCardConnection;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: DateTime;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<ReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: ReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  
  /**
   * The HTTP path for this pull request.
   */
  resourcePath: URI;
  
  /**
   * The HTTP path for reverting this pull request.
   */
  revertResourcePath: URI;
  
  /**
   * The HTTP URL for reverting this pull request.
   */
  revertUrl: URI;
  
  /**
   * A list of review requests associated with the pull request.
   */
  reviewRequests?: ReviewRequestConnection;
  
  /**
   * A list of reviews associated with the pull request.
   */
  reviews?: PullRequestReviewConnection;
  
  /**
   * Identifies the state of the pull request.
   */
  state: PullRequestState;
  
  /**
   * A list of reviewer suggestions based on commit history and past review comments.
   */
  suggestedReviewers: Array<SuggestedReviewer | null>;
  
  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   */
  timeline: PullRequestTimelineConnection;
  
  /**
   * Identifies the pull request title.
   */
  title: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this pull request.
   */
  url: URI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: UserContentEditConnection;
  
  /**
   * Whether or not the viewer can apply suggestion.
   */
  viewerCanApplySuggestion: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: SubscriptionState;
}

/**
 * Represents a comment.
 */
export interface Comment {
  
  /**
   * The actor who authored the comment.
   */
  author?: Actor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: CommentAuthorAssociation;
  
  /**
   * The body as Markdown.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * The actor who edited the comment.
   */
  editor?: Actor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: DateTime;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: DateTime;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: UserContentEditConnection;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/** Use this to resolve interface type Comment */
export type PossibleCommentTypeNames =
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'GistComment';

export interface CommentNameMap {
  Comment: Comment;
  Issue: Issue;
  PullRequest: PullRequest;
  IssueComment: IssueComment;
  CommitComment: CommitComment;
  PullRequestReview: PullRequestReview;
  PullRequestReviewComment: PullRequestReviewComment;
  GistComment: GistComment;
}

/**
 * A comment author association with repository.
 */
export enum CommentAuthorAssociation {
  
  /**
   * Author is a member of the organization that owns the repository.
   */
  MEMBER = 'MEMBER',
  
  /**
   * Author is the owner of the repository.
   */
  OWNER = 'OWNER',
  
  /**
   * Author has been invited to collaborate on the repository.
   */
  COLLABORATOR = 'COLLABORATOR',
  
  /**
   * Author has previously committed to the repository.
   */
  CONTRIBUTOR = 'CONTRIBUTOR',
  
  /**
   * Author has not previously committed to the repository.
   */
  FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR',
  
  /**
   * Author has not previously committed to GitHub.
   */
  FIRST_TIMER = 'FIRST_TIMER',
  
  /**
   * Author has no association with the repository.
   */
  NONE = 'NONE'
}

/**
 * A list of edits to content.
 */
export interface UserContentEditConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<UserContentEditEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<UserContentEdit | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface UserContentEditEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: UserContentEdit;
}

/**
 * An edit on user content
 */
export interface UserContentEdit extends Node {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the date and time when the object was deleted.
   */
  deletedAt?: DateTime;
  
  /**
   * The actor who deleted this content
   */
  deletedBy?: Actor;
  
  /**
   * A summary of the changes for this edit
   */
  diff?: string;
  
  /**
   * When this content was edited
   */
  editedAt: DateTime;
  
  /**
   * The actor who edited this content
   */
  editor?: Actor;
  id: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
}

/**
 * Comments that can be updated.
 */
export interface UpdatableComment {
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
}

/** Use this to resolve interface type UpdatableComment */
export type PossibleUpdatableCommentTypeNames =
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'GistComment';

export interface UpdatableCommentNameMap {
  UpdatableComment: UpdatableComment;
  Issue: Issue;
  PullRequest: PullRequest;
  IssueComment: IssueComment;
  CommitComment: CommitComment;
  PullRequestReview: PullRequestReview;
  PullRequestReviewComment: PullRequestReviewComment;
  GistComment: GistComment;
}

/**
 * The possible errors that will prevent a user from updating a comment.
 */
export enum CommentCannotUpdateReason {
  
  /**
   * You must be the author or have write access to this repository to update this comment.
   */
  INSUFFICIENT_ACCESS = 'INSUFFICIENT_ACCESS',
  
  /**
   * Unable to create comment because issue is locked.
   */
  LOCKED = 'LOCKED',
  
  /**
   * You must be logged in to update this comment.
   */
  LOGIN_REQUIRED = 'LOGIN_REQUIRED',
  
  /**
   * Repository is under maintenance.
   */
  MAINTENANCE = 'MAINTENANCE',
  
  /**
   * At least one email address must be verified to update this comment.
   */
  VERIFIED_EMAIL_REQUIRED = 'VERIFIED_EMAIL_REQUIRED',
  
  /**
   * You cannot update this comment
   */
  DENIED = 'DENIED'
}

/**
 * An object that can have labels assigned to it.
 */
export interface Labelable {
  
  /**
   * A list of labels associated with the object.
   */
  labels?: LabelConnection;
}

/** Use this to resolve interface type Labelable */
export type PossibleLabelableTypeNames = 'Issue' | 'PullRequest';

export interface LabelableNameMap {
  Labelable: Labelable;
  Issue: Issue;
  PullRequest: PullRequest;
}

/**
 * The connection type for Label.
 */
export interface LabelConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<LabelEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Label | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface LabelEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Label;
}

/**
 * A label for categorizing Issues or Milestones with a given Repository.
 */
export interface Label extends Node {
  
  /**
   * Identifies the label color.
   */
  color: string;
  
  /**
   * Identifies the date and time when the label was created.
   */
  createdAt?: DateTime;
  
  /**
   * A brief description of this label.
   */
  description?: string;
  id: string;
  
  /**
   * Indicates whether or not this is a default label.
   */
  isDefault: boolean;
  
  /**
   * A list of issues associated with this label.
   */
  issues: IssueConnection;
  
  /**
   * Identifies the label name.
   */
  name: string;
  
  /**
   * A list of pull requests associated with this label.
   */
  pullRequests: PullRequestConnection;
  
  /**
   * The repository associated with this label.
   */
  repository: Repository;
  
  /**
   * The HTTP path for this label.
   */
  resourcePath: URI;
  
  /**
   * Identifies the date and time when the label was last updated.
   */
  updatedAt?: DateTime;
  
  /**
   * The HTTP URL for this label.
   */
  url: URI;
}

/**
 * The possible states of an issue.
 */
export enum IssueState {
  
  /**
   * An issue that is still open
   */
  OPEN = 'OPEN',
  
  /**
   * An issue that has been closed
   */
  CLOSED = 'CLOSED'
}

/**
 * The connection type for Issue.
 */
export interface IssueConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<IssueEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Issue | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IssueEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Issue;
}

/**
 * An object that can be locked.
 */
export interface Lockable {
  
  /**
   * Reason that the conversation was locked.
   */
  activeLockReason?: LockReason;
  
  /**
   * `true` if the object is locked
   */
  locked: boolean;
}

/** Use this to resolve interface type Lockable */
export type PossibleLockableTypeNames = 'Issue' | 'PullRequest';

export interface LockableNameMap {
  Lockable: Lockable;
  Issue: Issue;
  PullRequest: PullRequest;
}

/**
 * The possible reasons that an issue or pull request was locked.
 */
export enum LockReason {
  
  /**
   * The issue or pull request was locked because the conversation was off-topic.
   */
  OFF_TOPIC = 'OFF_TOPIC',
  
  /**
   * The issue or pull request was locked because the conversation was too heated.
   */
  TOO_HEATED = 'TOO_HEATED',
  
  /**
   * The issue or pull request was locked because the conversation was resolved.
   */
  RESOLVED = 'RESOLVED',
  
  /**
   * The issue or pull request was locked because the conversation was spam.
   */
  SPAM = 'SPAM'
}

/**
 * Represents a subject that can be reacted on.
 */
export interface Reactable {
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<ReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: ReactionConnection;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
}

/** Use this to resolve interface type Reactable */
export type PossibleReactableTypeNames =
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment';

export interface ReactableNameMap {
  Reactable: Reactable;
  Issue: Issue;
  PullRequest: PullRequest;
  IssueComment: IssueComment;
  CommitComment: CommitComment;
  PullRequestReview: PullRequestReview;
  PullRequestReviewComment: PullRequestReviewComment;
}

/**
 * A group of emoji reactions to a particular piece of content.
 */
export interface ReactionGroup {
  
  /**
   * Identifies the emoji reaction.
   */
  content: ReactionContent;
  
  /**
   * Identifies when the reaction was created.
   */
  createdAt?: DateTime;
  
  /**
   * The subject that was reacted to.
   */
  subject: Reactable;
  
  /**
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   */
  users: ReactingUserConnection;
  
  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: boolean;
}

/**
 * Emojis that can be attached to Issues, Pull Requests and Comments.
 */
export enum ReactionContent {
  
  /**
   * Represents the 👍 emoji.
   */
  THUMBS_UP = 'THUMBS_UP',
  
  /**
   * Represents the 👎 emoji.
   */
  THUMBS_DOWN = 'THUMBS_DOWN',
  
  /**
   * Represents the 😄 emoji.
   */
  LAUGH = 'LAUGH',
  
  /**
   * Represents the 🎉 emoji.
   */
  HOORAY = 'HOORAY',
  
  /**
   * Represents the 😕 emoji.
   */
  CONFUSED = 'CONFUSED',
  
  /**
   * Represents the ❤️ emoji.
   */
  HEART = 'HEART',
  
  /**
   * Represents the 🚀 emoji.
   */
  ROCKET = 'ROCKET',
  
  /**
   * Represents the 👀 emoji.
   */
  EYES = 'EYES'
}

/**
 * The connection type for User.
 */
export interface ReactingUserConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ReactingUserEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<User | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user that's made a reaction.
 */
export interface ReactingUserEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: User;
  
  /**
   * The moment when the user made the reaction.
   */
  reactedAt: DateTime;
}

/**
 * Ways in which lists of reactions can be ordered upon return.
 */
export interface ReactionOrder {
  
  /**
   * The field in which to order reactions by.
   */
  field: ReactionOrderField;
  
  /**
   * The direction in which to order reactions by the specified field.
   */
  direction: OrderDirection;
}

/**
 * A list of fields that reactions can be ordered by.
 */
export enum ReactionOrderField {
  
  /**
   * Allows ordering a list of reactions by when they were created.
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * A list of reactions that have been left on the subject.
 */
export interface ReactionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ReactionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Reaction | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * Whether or not the authenticated user has left a reaction on the subject.
   */
  viewerHasReacted: boolean;
}

/**
 * An edge in a connection.
 */
export interface ReactionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Reaction;
}

/**
 * An emoji reaction to a particular piece of content.
 */
export interface Reaction extends Node {
  
  /**
   * Identifies the emoji reaction.
   */
  content: ReactionContent;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The reactable piece of content
   */
  reactable: Reactable;
  
  /**
   * Identifies the user who created this reaction.
   */
  user?: User;
}

/**
 * Represents a object that belongs to a repository.
 */
export interface RepositoryNode {
  
  /**
   * The repository associated with this node.
   */
  repository: Repository;
}

/** Use this to resolve interface type RepositoryNode */
export type PossibleRepositoryNodeTypeNames =
'Issue' |
'PullRequest' |
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'CommitCommentThread';

export interface RepositoryNodeNameMap {
  RepositoryNode: RepositoryNode;
  Issue: Issue;
  PullRequest: PullRequest;
  IssueComment: IssueComment;
  CommitComment: CommitComment;
  PullRequestReview: PullRequestReview;
  PullRequestReviewComment: PullRequestReviewComment;
  CommitCommentThread: CommitCommentThread;
}

/**
 * The connection type for IssueComment.
 */
export interface IssueCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<IssueCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<IssueComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IssueCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: IssueComment;
}

/**
 * Represents a comment on an Issue.
 */
export interface IssueComment extends Node, Comment, Deletable, Updatable, UpdatableComment, Reactable, RepositoryNode {
  
  /**
   * The actor who authored the comment.
   */
  author?: Actor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: CommentAuthorAssociation;
  
  /**
   * The body as Markdown.
   */
  body: string;
  
  /**
   * The body rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: Actor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * Identifies the issue associated with the comment.
   */
  issue: Issue;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: DateTime;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: DateTime;
  
  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   */
  pullRequest?: PullRequest;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<ReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: ReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  
  /**
   * The HTTP path for this issue comment
   */
  resourcePath: URI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this issue comment
   */
  url: URI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: UserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * Entities that can be deleted.
 */
export interface Deletable {
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
}

/** Use this to resolve interface type Deletable */
export type PossibleDeletableTypeNames =
'IssueComment' |
'CommitComment' |
'PullRequestReview' |
'PullRequestReviewComment' |
'GistComment';

export interface DeletableNameMap {
  Deletable: Deletable;
  IssueComment: IssueComment;
  CommitComment: CommitComment;
  PullRequestReview: PullRequestReview;
  PullRequestReviewComment: PullRequestReviewComment;
  GistComment: GistComment;
}

/**
 * The connection type for PullRequestCommit.
 */
export interface PullRequestCommitConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<PullRequestCommitEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<PullRequestCommit | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface PullRequestCommitEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PullRequestCommit;
}

/**
 * Represents a Git commit part of a pull request.
 */
export interface PullRequestCommit extends Node, UniformResourceLocatable {
  
  /**
   * The Git commit object
   */
  commit: Commit;
  id: string;
  
  /**
   * The pull request this commit belongs to
   */
  pullRequest: PullRequest;
  
  /**
   * The HTTP path for this pull request commit
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this pull request commit
   */
  url: URI;
}

/**
 * Represents a Git commit.
 */
export interface Commit extends Node, GitObject, Subscribable, UniformResourceLocatable {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * The number of additions in this commit.
   */
  additions: number;
  
  /**
   * Authorship details of the commit.
   */
  author?: GitActor;
  
  /**
   * Check if the committer and the author match.
   */
  authoredByCommitter: boolean;
  
  /**
   * The datetime when this commit was authored.
   */
  authoredDate: DateTime;
  
  /**
   * Fetches `git blame` information.
   */
  blame: Blame;
  
  /**
   * The number of changed files in this commit.
   */
  changedFiles: number;
  
  /**
   * Comments made on the commit.
   */
  comments: CommitCommentConnection;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: URI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: URI;
  
  /**
   * The datetime when this commit was committed.
   */
  committedDate: DateTime;
  
  /**
   * Check if commited via GitHub web UI.
   */
  committedViaWeb: boolean;
  
  /**
   * Committership details of the commit.
   */
  committer?: GitActor;
  
  /**
   * The number of deletions in this commit.
   */
  deletions: number;
  
  /**
   * The deployments associated with a commit.
   */
  deployments?: DeploymentConnection;
  
  /**
   * The linear commit history starting from (and including) this commit, in the same order as `git log`.
   */
  history: CommitHistoryConnection;
  id: string;
  
  /**
   * The Git commit message
   */
  message: string;
  
  /**
   * The Git commit message body
   */
  messageBody: string;
  
  /**
   * The commit message body rendered to HTML.
   */
  messageBodyHTML: HTML;
  
  /**
   * The Git commit message headline
   */
  messageHeadline: string;
  
  /**
   * The commit message headline rendered to HTML.
   */
  messageHeadlineHTML: HTML;
  
  /**
   * The Git object ID
   */
  oid: GitObjectID;
  
  /**
   * The parents of a commit.
   */
  parents: CommitConnection;
  
  /**
   * The datetime when this commit was pushed.
   */
  pushedDate?: DateTime;
  
  /**
   * The Repository this commit belongs to
   */
  repository: Repository;
  
  /**
   * The HTTP path for this commit
   */
  resourcePath: URI;
  
  /**
   * Commit signing information, if present.
   */
  signature?: GitSignature;
  
  /**
   * Status information for this commit
   */
  status?: Status;
  
  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  tarballUrl: URI;
  
  /**
   * Commit's root Tree
   */
  tree: Tree;
  
  /**
   * The HTTP path for the tree of this commit
   */
  treeResourcePath: URI;
  
  /**
   * The HTTP URL for the tree of this commit
   */
  treeUrl: URI;
  
  /**
   * The HTTP URL for this commit
   */
  url: URI;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: SubscriptionState;
  
  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  zipballUrl: URI;
}

/**
 * Represents a Git object.
 */
export interface GitObject {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: URI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: URI;
  id: string;
  
  /**
   * The Git object ID
   */
  oid: GitObjectID;
  
  /**
   * The Repository the Git object belongs to
   */
  repository: Repository;
}

/** Use this to resolve interface type GitObject */
export type PossibleGitObjectTypeNames = 'Commit' | 'Tree' | 'Blob' | 'Tag';

export interface GitObjectNameMap {
  GitObject: GitObject;
  Commit: Commit;
  Tree: Tree;
  Blob: Blob;
  Tag: Tag;
}

/**
 * Represents an actor in a Git commit (ie. an author or committer).
 */
export interface GitActor {
  
  /**
   * A URL pointing to the author's public avatar.
   */
  avatarUrl: URI;
  
  /**
   * The timestamp of the Git action (authoring or committing).
   */
  date?: GitTimestamp;
  
  /**
   * The email in the Git commit.
   */
  email?: string;
  
  /**
   * The name in the Git commit.
   */
  name?: string;
  
  /**
   * The GitHub user corresponding to the email field. Null if no such user exists.
   */
  user?: User;
}

/**
 * An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
 */
export type GitTimestamp = any;

/**
 * Represents a Git blame.
 */
export interface Blame {
  
  /**
   * The list of ranges from a Git blame.
   */
  ranges: Array<BlameRange>;
}

/**
 * Represents a range of information from a Git blame.
 */
export interface BlameRange {
  
  /**
   * Identifies the recency of the change, from 1 (new) to 10 (old). This is
   * calculated as a 2-quantile and determines the length of distance between the
   * median age of all the changes in the file and the recency of the current
   * range's change.
   */
  age: number;
  
  /**
   * Identifies the line author
   */
  commit: Commit;
  
  /**
   * The ending line for the range
   */
  endingLine: number;
  
  /**
   * The starting line for the range
   */
  startingLine: number;
}

/**
 * The connection type for CommitComment.
 */
export interface CommitCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<CommitCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<CommitComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface CommitCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: CommitComment;
}

/**
 * Represents a comment on a given Commit.
 */
export interface CommitComment extends Node, Comment, Deletable, Updatable, UpdatableComment, Reactable, RepositoryNode {
  
  /**
   * The actor who authored the comment.
   */
  author?: Actor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: CommentAuthorAssociation;
  
  /**
   * Identifies the comment body.
   */
  body: string;
  
  /**
   * Identifies the comment body rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the commit associated with the comment, if the commit exists.
   */
  commit?: Commit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: Actor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: DateTime;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Identifies the file path associated with the comment.
   */
  path?: string;
  
  /**
   * Identifies the line position associated with the comment.
   */
  position?: number;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: DateTime;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<ReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: ReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  
  /**
   * The HTTP path permalink for this commit comment.
   */
  resourcePath: URI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL permalink for this commit comment.
   */
  url: URI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: UserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * Ordering options for deployment connections
 */
export interface DeploymentOrder {
  
  /**
   * The field to order deployments by.
   */
  field: DeploymentOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which deployment connections can be ordered.
 */
export enum DeploymentOrderField {
  
  /**
   * Order collection by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for Deployment.
 */
export interface DeploymentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<DeploymentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Deployment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface DeploymentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Deployment;
}

/**
 * Represents triggered deployment instance.
 */
export interface Deployment extends Node {
  
  /**
   * Identifies the commit sha of the deployment.
   */
  commit?: Commit;
  
  /**
   * Identifies the oid of the deployment commit, even if the commit has been deleted.
   */
  commitOid: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the actor who triggered the deployment.
   */
  creator?: Actor;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The deployment description.
   */
  description?: string;
  
  /**
   * The environment to which this deployment was made.
   */
  environment?: string;
  id: string;
  
  /**
   * The latest status of this deployment.
   */
  latestStatus?: DeploymentStatus;
  
  /**
   * Extra information that a deployment system might need.
   */
  payload?: string;
  
  /**
   * Identifies the Ref of the deployment, if the deployment was created by ref.
   */
  ref?: Ref;
  
  /**
   * Identifies the repository associated with the deployment.
   */
  repository: Repository;
  
  /**
   * The current state of the deployment.
   */
  state?: DeploymentState;
  
  /**
   * A list of statuses associated with the deployment.
   */
  statuses?: DeploymentStatusConnection;
  
  /**
   * The deployment task.
   */
  task?: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
}

/**
 * Describes the status of a given deployment attempt.
 */
export interface DeploymentStatus extends Node {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the actor who triggered the deployment.
   */
  creator?: Actor;
  
  /**
   * Identifies the deployment associated with status.
   */
  deployment: Deployment;
  
  /**
   * Identifies the description of the deployment.
   */
  description?: string;
  
  /**
   * Identifies the environment URL of the deployment.
   */
  environmentUrl?: URI;
  id: string;
  
  /**
   * Identifies the log URL of the deployment.
   */
  logUrl?: URI;
  
  /**
   * Identifies the current state of the deployment.
   */
  state: DeploymentStatusState;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
}

/**
 * The possible states for a deployment status.
 */
export enum DeploymentStatusState {
  
  /**
   * The deployment is pending.
   */
  PENDING = 'PENDING',
  
  /**
   * The deployment was successful.
   */
  SUCCESS = 'SUCCESS',
  
  /**
   * The deployment has failed.
   */
  FAILURE = 'FAILURE',
  
  /**
   * The deployment is inactive.
   */
  INACTIVE = 'INACTIVE',
  
  /**
   * The deployment experienced an error.
   */
  ERROR = 'ERROR'
}

/**
 * The possible states in which a deployment can be.
 */
export enum DeploymentState {
  
  /**
   * The pending deployment was not updated after 30 minutes.
   */
  ABANDONED = 'ABANDONED',
  
  /**
   * The deployment is currently active.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * An inactive transient deployment.
   */
  DESTROYED = 'DESTROYED',
  
  /**
   * The deployment experienced an error.
   */
  ERROR = 'ERROR',
  
  /**
   * The deployment has failed.
   */
  FAILURE = 'FAILURE',
  
  /**
   * The deployment is inactive.
   */
  INACTIVE = 'INACTIVE',
  
  /**
   * The deployment is pending.
   */
  PENDING = 'PENDING'
}

/**
 * The connection type for DeploymentStatus.
 */
export interface DeploymentStatusConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<DeploymentStatusEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<DeploymentStatus | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface DeploymentStatusEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: DeploymentStatus;
}

/**
 * Specifies an author for filtering Git commits.
 */
export interface CommitAuthor {
  
  /**
   * ID of a User to filter by. If non-null, only commits authored by this user
   * will be returned. This field takes precedence over emails.
   */
  id?: string;
  
  /**
   * Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
   */
  emails?: Array<string>;
}

/**
 * The connection type for Commit.
 */
export interface CommitHistoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<CommitEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Commit | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface CommitEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Commit;
}

/**
 * The connection type for Commit.
 */
export interface CommitConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<CommitEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Commit | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.
 */
export interface GitSignature {
  
  /**
   * Email used to sign this object.
   */
  email: string;
  
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;
  
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;
  
  /**
   * ASCII-armored signature header from object.
   */
  signature: string;
  
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: User;
  
  /**
   * The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: GitSignatureState;
  
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/** Use this to resolve interface type GitSignature */
export type PossibleGitSignatureTypeNames =
'GpgSignature' |
'SmimeSignature' |
'UnknownSignature';

export interface GitSignatureNameMap {
  GitSignature: GitSignature;
  GpgSignature: GpgSignature;
  SmimeSignature: SmimeSignature;
  UnknownSignature: UnknownSignature;
}

/**
 * The state of a Git signature.
 */
export enum GitSignatureState {
  
  /**
   * Valid signature and verified by GitHub
   */
  VALID = 'VALID',
  
  /**
   * Invalid signature
   */
  INVALID = 'INVALID',
  
  /**
   * Malformed signature
   */
  MALFORMED_SIG = 'MALFORMED_SIG',
  
  /**
   * Key used for signing not known to GitHub
   */
  UNKNOWN_KEY = 'UNKNOWN_KEY',
  
  /**
   * Invalid email used for signing
   */
  BAD_EMAIL = 'BAD_EMAIL',
  
  /**
   * Email used for signing unverified on GitHub
   */
  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',
  
  /**
   * Email used for signing not known to GitHub
   */
  NO_USER = 'NO_USER',
  
  /**
   * Unknown signature type
   */
  UNKNOWN_SIG_TYPE = 'UNKNOWN_SIG_TYPE',
  
  /**
   * Unsigned
   */
  UNSIGNED = 'UNSIGNED',
  
  /**
   * Internal error - the GPG verification service is unavailable at the moment
   */
  GPGVERIFY_UNAVAILABLE = 'GPGVERIFY_UNAVAILABLE',
  
  /**
   * Internal error - the GPG verification service misbehaved
   */
  GPGVERIFY_ERROR = 'GPGVERIFY_ERROR',
  
  /**
   * The usage flags for the key that signed this don't allow signing
   */
  NOT_SIGNING_KEY = 'NOT_SIGNING_KEY',
  
  /**
   * Signing key expired
   */
  EXPIRED_KEY = 'EXPIRED_KEY',
  
  /**
   * Valid signature, pending certificate revocation checking
   */
  OCSP_PENDING = 'OCSP_PENDING',
  
  /**
   * Valid siganture, though certificate revocation check failed
   */
  OCSP_ERROR = 'OCSP_ERROR',
  
  /**
   * The signing certificate or its chain could not be verified
   */
  BAD_CERT = 'BAD_CERT',
  
  /**
   * One or more certificates in chain has been revoked
   */
  OCSP_REVOKED = 'OCSP_REVOKED'
}

/**
 * Represents a commit status.
 */
export interface Status extends Node {
  
  /**
   * The commit this status is attached to.
   */
  commit?: Commit;
  
  /**
   * Looks up an individual status context by context name.
   */
  context?: StatusContext;
  
  /**
   * The individual status contexts for this commit.
   */
  contexts: Array<StatusContext>;
  id: string;
  
  /**
   * The combined commit status.
   */
  state: StatusState;
}

/**
 * Represents an individual commit status context
 */
export interface StatusContext extends Node {
  
  /**
   * This commit this status context is attached to.
   */
  commit?: Commit;
  
  /**
   * The name of this status context.
   */
  context: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The actor who created this status context.
   */
  creator?: Actor;
  
  /**
   * The description for this status context.
   */
  description?: string;
  id: string;
  
  /**
   * The state of this status context.
   */
  state: StatusState;
  
  /**
   * The URL for this status context.
   */
  targetUrl?: URI;
}

/**
 * The possible commit status states.
 */
export enum StatusState {
  
  /**
   * Status is expected.
   */
  EXPECTED = 'EXPECTED',
  
  /**
   * Status is errored.
   */
  ERROR = 'ERROR',
  
  /**
   * Status is failing.
   */
  FAILURE = 'FAILURE',
  
  /**
   * Status is pending.
   */
  PENDING = 'PENDING',
  
  /**
   * Status is successful.
   */
  SUCCESS = 'SUCCESS'
}

/**
 * Represents a Git tree.
 */
export interface Tree extends Node, GitObject {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: URI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: URI;
  
  /**
   * A list of tree entries.
   */
  entries?: Array<TreeEntry>;
  id: string;
  
  /**
   * The Git object ID
   */
  oid: GitObjectID;
  
  /**
   * The Repository the Git object belongs to
   */
  repository: Repository;
}

/**
 * Represents a Git tree entry.
 */
export interface TreeEntry {
  
  /**
   * Entry file mode.
   */
  mode: number;
  
  /**
   * Entry file name.
   */
  name: string;
  
  /**
   * Entry file object.
   */
  object?: GitObject;
  
  /**
   * Entry file Git object ID.
   */
  oid: GitObjectID;
  
  /**
   * The Repository the tree entry belongs to
   */
  repository: Repository;
  
  /**
   * Entry file type.
   */
  type: string;
}

/**
 * Whether or not a PullRequest can be merged.
 */
export enum MergeableState {
  
  /**
   * The pull request can be merged.
   */
  MERGEABLE = 'MERGEABLE',
  
  /**
   * The pull request cannot be merged due to merge conflicts.
   */
  CONFLICTING = 'CONFLICTING',
  
  /**
   * The mergeability of the pull request is still being calculated.
   */
  UNKNOWN = 'UNKNOWN'
}

/**
 * Represents a Milestone object on a given repository.
 */
export interface Milestone extends Node, Closable, UniformResourceLocatable {
  
  /**
   * `true` if the object is closed (definition of closed may depend on type)
   */
  closed: boolean;
  
  /**
   * Identifies the date and time when the object was closed.
   */
  closedAt?: DateTime;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the actor who created the milestone.
   */
  creator?: Actor;
  
  /**
   * Identifies the description of the milestone.
   */
  description?: string;
  
  /**
   * Identifies the due date of the milestone.
   */
  dueOn?: DateTime;
  id: string;
  
  /**
   * A list of issues associated with the milestone.
   */
  issues: IssueConnection;
  
  /**
   * Identifies the number of the milestone.
   */
  number: number;
  
  /**
   * A list of pull requests associated with the milestone.
   */
  pullRequests: PullRequestConnection;
  
  /**
   * The repository associated with this milestone.
   */
  repository: Repository;
  
  /**
   * The HTTP path for this milestone
   */
  resourcePath: URI;
  
  /**
   * Identifies the state of the milestone.
   */
  state: MilestoneState;
  
  /**
   * Identifies the title of the milestone.
   */
  title: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this milestone
   */
  url: URI;
}

/**
 * The possible states of a milestone.
 */
export enum MilestoneState {
  
  /**
   * A milestone that is still open.
   */
  OPEN = 'OPEN',
  
  /**
   * A milestone that has been closed.
   */
  CLOSED = 'CLOSED'
}

/**
 * The connection type for ReviewRequest.
 */
export interface ReviewRequestConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ReviewRequestEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<ReviewRequest | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ReviewRequestEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: ReviewRequest;
}

/**
 * A request for a user to review a pull request.
 */
export interface ReviewRequest extends Node {
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * Identifies the pull request associated with this review request.
   */
  pullRequest: PullRequest;
  
  /**
   * The reviewer that is requested.
   */
  requestedReviewer?: RequestedReviewer;
}

/**
 * Types that can be requested reviewers.
 */
export type RequestedReviewer = User | Team;

/** Use this to resolve union type RequestedReviewer */
export type PossibleRequestedReviewerTypeNames = 'User' | 'Team';

export interface RequestedReviewerNameMap {
  RequestedReviewer: RequestedReviewer;
  User: User;
  Team: Team;
}

/**
 * A team of users in an organization.
 */
export interface Team extends Node, Subscribable {
  
  /**
   * A list of teams that are ancestors of this team.
   */
  ancestors: TeamConnection;
  
  /**
   * A URL pointing to the team's avatar.
   */
  avatarUrl?: URI;
  
  /**
   * List of child teams belonging to this team
   */
  childTeams: TeamConnection;
  
  /**
   * The slug corresponding to the organization and team.
   */
  combinedSlug: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The description of the team.
   */
  description?: string;
  
  /**
   * The HTTP path for editing this team
   */
  editTeamResourcePath: URI;
  
  /**
   * The HTTP URL for editing this team
   */
  editTeamUrl: URI;
  id: string;
  
  /**
   * A list of pending invitations for users to this team
   */
  invitations?: OrganizationInvitationConnection;
  
  /**
   * A list of users who are members of this team.
   */
  members: TeamMemberConnection;
  
  /**
   * The HTTP path for the team' members
   */
  membersResourcePath: URI;
  
  /**
   * The HTTP URL for the team' members
   */
  membersUrl: URI;
  
  /**
   * The name of the team.
   */
  name: string;
  
  /**
   * The HTTP path creating a new team
   */
  newTeamResourcePath: URI;
  
  /**
   * The HTTP URL creating a new team
   */
  newTeamUrl: URI;
  
  /**
   * The organization that owns this team.
   */
  organization: Organization;
  
  /**
   * The parent team of the team.
   */
  parentTeam?: Team;
  
  /**
   * The level of privacy the team has.
   */
  privacy: TeamPrivacy;
  
  /**
   * A list of repositories this team has access to.
   */
  repositories: TeamRepositoryConnection;
  
  /**
   * The HTTP path for this team's repositories
   */
  repositoriesResourcePath: URI;
  
  /**
   * The HTTP URL for this team's repositories
   */
  repositoriesUrl: URI;
  
  /**
   * The HTTP path for this team
   */
  resourcePath: URI;
  
  /**
   * The slug corresponding to the team.
   */
  slug: string;
  
  /**
   * The HTTP path for this team's teams
   */
  teamsResourcePath: URI;
  
  /**
   * The HTTP URL for this team's teams
   */
  teamsUrl: URI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this team
   */
  url: URI;
  
  /**
   * Team is adminable by the viewer.
   */
  viewerCanAdminister: boolean;
  
  /**
   * Check if the viewer is able to change their subscription status for the repository.
   */
  viewerCanSubscribe: boolean;
  
  /**
   * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
   */
  viewerSubscription?: SubscriptionState;
}

/**
 * The connection type for Team.
 */
export interface TeamConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<TeamEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Team | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface TeamEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Team;
}

/**
 * Ways in which team connections can be ordered.
 */
export interface TeamOrder {
  
  /**
   * The field in which to order nodes by.
   */
  field: TeamOrderField;
  
  /**
   * The direction in which to order nodes.
   */
  direction: OrderDirection;
}

/**
 * Properties by which team connections can be ordered.
 */
export enum TeamOrderField {
  
  /**
   * Allows ordering a list of teams by name.
   */
  NAME = 'NAME'
}

/**
 * The connection type for OrganizationInvitation.
 */
export interface OrganizationInvitationConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<OrganizationInvitationEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<OrganizationInvitation | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface OrganizationInvitationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: OrganizationInvitation;
}

/**
 * An Invitation for a user to an organization.
 */
export interface OrganizationInvitation extends Node {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The email address of the user invited to the organization.
   */
  email?: string;
  id: string;
  
  /**
   * The type of invitation that was sent (e.g. email, user).
   */
  invitationType: OrganizationInvitationType;
  
  /**
   * The user who was invited to the organization.
   */
  invitee?: User;
  
  /**
   * The user who created the invitation.
   */
  inviter: User;
  
  /**
   * The organization the invite is for
   */
  organization: Organization;
  
  /**
   * The user's pending role in the organization (e.g. member, owner).
   */
  role: OrganizationInvitationRole;
}

/**
 * The possible organization invitation types.
 */
export enum OrganizationInvitationType {
  
  /**
   * The invitation was to an existing user.
   */
  USER = 'USER',
  
  /**
   * The invitation was to an email address.
   */
  EMAIL = 'EMAIL'
}

/**
 * The possible organization invitation roles.
 */
export enum OrganizationInvitationRole {
  
  /**
   * The user is invited to be a direct member of the organization.
   */
  DIRECT_MEMBER = 'DIRECT_MEMBER',
  
  /**
   * The user is invited to be an admin of the organization.
   */
  ADMIN = 'ADMIN',
  
  /**
   * The user is invited to be a billing manager of the organization.
   */
  BILLING_MANAGER = 'BILLING_MANAGER',
  
  /**
   * The user's previous role will be reinstated.
   */
  REINSTATE = 'REINSTATE'
}

/**
 * Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
 */
export enum TeamMembershipType {
  
  /**
   * Includes only immediate members of the team.
   */
  IMMEDIATE = 'IMMEDIATE',
  
  /**
   * Includes only child team members for the team.
   */
  CHILD_TEAM = 'CHILD_TEAM',
  
  /**
   * Includes immediate and child team members for the team.
   */
  ALL = 'ALL'
}

/**
 * The possible team member roles; either 'maintainer' or 'member'.
 */
export enum TeamMemberRole {
  
  /**
   * A team maintainer has permission to add and remove team members.
   */
  MAINTAINER = 'MAINTAINER',
  
  /**
   * A team member has no administrative permissions on the team.
   */
  MEMBER = 'MEMBER'
}

/**
 * Ordering options for team member connections
 */
export interface TeamMemberOrder {
  
  /**
   * The field to order team members by.
   */
  field: TeamMemberOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which team member connections can be ordered.
 */
export enum TeamMemberOrderField {
  
  /**
   * Order team members by login
   */
  LOGIN = 'LOGIN',
  
  /**
   * Order team members by creation time
   */
  CREATED_AT = 'CREATED_AT'
}

/**
 * The connection type for User.
 */
export interface TeamMemberConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<TeamMemberEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<User | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user who is a member of a team.
 */
export interface TeamMemberEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The HTTP path to the organization's member access page.
   */
  memberAccessResourcePath: URI;
  
  /**
   * The HTTP URL to the organization's member access page.
   */
  memberAccessUrl: URI;
  node: User;
  
  /**
   * The role the member has on the team.
   */
  role: TeamMemberRole;
}

/**
 * The possible team privacy values.
 */
export enum TeamPrivacy {
  
  /**
   * A secret team can only be seen by its members.
   */
  SECRET = 'SECRET',
  
  /**
   * A visible team can be seen and @mentioned by every member of the organization.
   */
  VISIBLE = 'VISIBLE'
}

/**
 * Ordering options for team repository connections
 */
export interface TeamRepositoryOrder {
  
  /**
   * The field to order repositories by.
   */
  field: TeamRepositoryOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which team repository connections can be ordered.
 */
export enum TeamRepositoryOrderField {
  
  /**
   * Order repositories by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order repositories by update time
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Order repositories by push time
   */
  PUSHED_AT = 'PUSHED_AT',
  
  /**
   * Order repositories by name
   */
  NAME = 'NAME',
  
  /**
   * Order repositories by permission
   */
  PERMISSION = 'PERMISSION',
  
  /**
   * Order repositories by number of stargazers
   */
  STARGAZERS = 'STARGAZERS'
}

/**
 * The connection type for Repository.
 */
export interface TeamRepositoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<TeamRepositoryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Repository | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a team repository.
 */
export interface TeamRepositoryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: Repository;
  
  /**
   * The permission level the team has on the repository
   */
  permission: RepositoryPermission;
}

/**
 * The access level to a repository
 */
export enum RepositoryPermission {
  
  /**
   * Can read, clone, push, and add collaborators
   */
  ADMIN = 'ADMIN',
  
  /**
   * Can read, clone and push
   */
  WRITE = 'WRITE',
  
  /**
   * Can read and clone
   */
  READ = 'READ'
}

/**
 * The possible states of a pull request review.
 */
export enum PullRequestReviewState {
  
  /**
   * A review that has not yet been submitted.
   */
  PENDING = 'PENDING',
  
  /**
   * An informational review.
   */
  COMMENTED = 'COMMENTED',
  
  /**
   * A review allowing the pull request to merge.
   */
  APPROVED = 'APPROVED',
  
  /**
   * A review blocking the pull request from merging.
   */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',
  
  /**
   * A review that has been dismissed.
   */
  DISMISSED = 'DISMISSED'
}

/**
 * The connection type for PullRequestReview.
 */
export interface PullRequestReviewConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<PullRequestReviewEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<PullRequestReview | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface PullRequestReviewEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PullRequestReview;
}

/**
 * A review object for a given pull request.
 */
export interface PullRequestReview extends Node, Comment, Deletable, Updatable, UpdatableComment, Reactable, RepositoryNode {
  
  /**
   * The actor who authored the comment.
   */
  author?: Actor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: CommentAuthorAssociation;
  
  /**
   * Identifies the pull request review body.
   */
  body: string;
  
  /**
   * The body of this review rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * The body of this review rendered as plain text.
   */
  bodyText: string;
  
  /**
   * A list of review comments for the current pull request review.
   */
  comments: PullRequestReviewCommentConnection;
  
  /**
   * Identifies the commit associated with this pull request review.
   */
  commit?: Commit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: Actor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: DateTime;
  
  /**
   * A list of teams that this review was made on behalf of.
   */
  onBehalfOf: TeamConnection;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: DateTime;
  
  /**
   * Identifies the pull request associated with this pull request review.
   */
  pullRequest: PullRequest;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<ReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: ReactionConnection;
  
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  
  /**
   * The HTTP path permalink for this PullRequestReview.
   */
  resourcePath: URI;
  
  /**
   * Identifies the current state of the pull request review.
   */
  state: PullRequestReviewState;
  
  /**
   * Identifies when the Pull Request Review was submitted
   */
  submittedAt?: DateTime;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL permalink for this PullRequestReview.
   */
  url: URI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: UserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * The connection type for PullRequestReviewComment.
 */
export interface PullRequestReviewCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<PullRequestReviewCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<PullRequestReviewComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface PullRequestReviewCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PullRequestReviewComment;
}

/**
 * A review comment associated with a given repository pull request.
 */
export interface PullRequestReviewComment extends Node, Comment, Deletable, Updatable, UpdatableComment, Reactable, RepositoryNode {
  
  /**
   * The actor who authored the comment.
   */
  author?: Actor;
  
  /**
   * Author's association with the subject of the comment.
   */
  authorAssociation: CommentAuthorAssociation;
  
  /**
   * The comment body of this review comment.
   */
  body: string;
  
  /**
   * The comment body of this review comment rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * The comment body of this review comment rendered as plain text.
   */
  bodyText: string;
  
  /**
   * Identifies the commit associated with the comment.
   */
  commit: Commit;
  
  /**
   * Identifies when the comment was created.
   */
  createdAt: DateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The diff hunk to which the comment applies.
   */
  diffHunk: string;
  
  /**
   * Identifies when the comment was created in a draft state.
   */
  draftedAt: DateTime;
  
  /**
   * The actor who edited the comment.
   */
  editor?: Actor;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: DateTime;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Identifies the original commit associated with the comment.
   */
  originalCommit?: Commit;
  
  /**
   * The original line index in the diff to which the comment applies.
   */
  originalPosition: number;
  
  /**
   * Identifies when the comment body is outdated
   */
  outdated: boolean;
  
  /**
   * The path to which the comment applies.
   */
  path: string;
  
  /**
   * The line index in the diff to which the comment applies.
   */
  position?: number;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: DateTime;
  
  /**
   * The pull request associated with this review comment.
   */
  pullRequest: PullRequest;
  
  /**
   * The pull request review associated with this review comment.
   */
  pullRequestReview?: PullRequestReview;
  
  /**
   * A list of reactions grouped by content left on the subject.
   */
  reactionGroups?: Array<ReactionGroup>;
  
  /**
   * A list of Reactions left on the Issue.
   */
  reactions: ReactionConnection;
  
  /**
   * The comment this is a reply to.
   */
  replyTo?: PullRequestReviewComment;
  
  /**
   * The repository associated with this node.
   */
  repository: Repository;
  
  /**
   * The HTTP path permalink for this review comment.
   */
  resourcePath: URI;
  
  /**
   * Identifies the state of the comment.
   */
  state: PullRequestReviewCommentState;
  
  /**
   * Identifies when the comment was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL permalink for this review comment.
   */
  url: URI;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: UserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
  
  /**
   * Can user react to this subject
   */
  viewerCanReact: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * The possible states of a pull request review comment.
 */
export enum PullRequestReviewCommentState {
  
  /**
   * A comment that is part of a pending review
   */
  PENDING = 'PENDING',
  
  /**
   * A comment that is part of a submitted review
   */
  SUBMITTED = 'SUBMITTED'
}

/**
 * A suggestion to review a pull request based on a user's commit history and review comments.
 */
export interface SuggestedReviewer {
  
  /**
   * Is this suggestion based on past commits?
   */
  isAuthor: boolean;
  
  /**
   * Is this suggestion based on past review comments?
   */
  isCommenter: boolean;
  
  /**
   * Identifies the user suggested to review the pull request.
   */
  reviewer: User;
}

/**
 * The connection type for PullRequestTimelineItem.
 */
export interface PullRequestTimelineConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<PullRequestTimelineItemEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<PullRequestTimelineItem | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface PullRequestTimelineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PullRequestTimelineItem;
}

/**
 * An item in an pull request timeline
 */
export type PullRequestTimelineItem =
Commit |
CommitCommentThread |
PullRequestReview |
PullRequestReviewThread |
PullRequestReviewComment |
IssueComment |
ClosedEvent |
ReopenedEvent |
SubscribedEvent |
UnsubscribedEvent |
MergedEvent |
ReferencedEvent |
CrossReferencedEvent |
AssignedEvent |
UnassignedEvent |
LabeledEvent |
UnlabeledEvent |
MilestonedEvent |
DemilestonedEvent |
RenamedTitleEvent |
LockedEvent |
UnlockedEvent |
DeployedEvent |
DeploymentEnvironmentChangedEvent |
HeadRefDeletedEvent |
HeadRefRestoredEvent |
HeadRefForcePushedEvent |
BaseRefForcePushedEvent |
ReviewRequestedEvent |
ReviewRequestRemovedEvent |
ReviewDismissedEvent;

/** Use this to resolve union type PullRequestTimelineItem */
export type PossiblePullRequestTimelineItemTypeNames =
'Commit' |
'CommitCommentThread' |
'PullRequestReview' |
'PullRequestReviewThread' |
'PullRequestReviewComment' |
'IssueComment' |
'ClosedEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'UnsubscribedEvent' |
'MergedEvent' |
'ReferencedEvent' |
'CrossReferencedEvent' |
'AssignedEvent' |
'UnassignedEvent' |
'LabeledEvent' |
'UnlabeledEvent' |
'MilestonedEvent' |
'DemilestonedEvent' |
'RenamedTitleEvent' |
'LockedEvent' |
'UnlockedEvent' |
'DeployedEvent' |
'DeploymentEnvironmentChangedEvent' |
'HeadRefDeletedEvent' |
'HeadRefRestoredEvent' |
'HeadRefForcePushedEvent' |
'BaseRefForcePushedEvent' |
'ReviewRequestedEvent' |
'ReviewRequestRemovedEvent' |
'ReviewDismissedEvent';

export interface PullRequestTimelineItemNameMap {
  PullRequestTimelineItem: PullRequestTimelineItem;
  Commit: Commit;
  CommitCommentThread: CommitCommentThread;
  PullRequestReview: PullRequestReview;
  PullRequestReviewThread: PullRequestReviewThread;
  PullRequestReviewComment: PullRequestReviewComment;
  IssueComment: IssueComment;
  ClosedEvent: ClosedEvent;
  ReopenedEvent: ReopenedEvent;
  SubscribedEvent: SubscribedEvent;
  UnsubscribedEvent: UnsubscribedEvent;
  MergedEvent: MergedEvent;
  ReferencedEvent: ReferencedEvent;
  CrossReferencedEvent: CrossReferencedEvent;
  AssignedEvent: AssignedEvent;
  UnassignedEvent: UnassignedEvent;
  LabeledEvent: LabeledEvent;
  UnlabeledEvent: UnlabeledEvent;
  MilestonedEvent: MilestonedEvent;
  DemilestonedEvent: DemilestonedEvent;
  RenamedTitleEvent: RenamedTitleEvent;
  LockedEvent: LockedEvent;
  UnlockedEvent: UnlockedEvent;
  DeployedEvent: DeployedEvent;
  DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent: HeadRefDeletedEvent;
  HeadRefRestoredEvent: HeadRefRestoredEvent;
  HeadRefForcePushedEvent: HeadRefForcePushedEvent;
  BaseRefForcePushedEvent: BaseRefForcePushedEvent;
  ReviewRequestedEvent: ReviewRequestedEvent;
  ReviewRequestRemovedEvent: ReviewRequestRemovedEvent;
  ReviewDismissedEvent: ReviewDismissedEvent;
}

/**
 * A thread of comments on a commit.
 */
export interface CommitCommentThread extends Node, RepositoryNode {
  
  /**
   * The comments that exist in this thread.
   */
  comments: CommitCommentConnection;
  
  /**
   * The commit the comments were made on.
   */
  commit: Commit;
  id: string;
  
  /**
   * The file the comments were made on.
   */
  path?: string;
  
  /**
   * The position in the diff for the commit that the comment was made on.
   */
  position?: number;
  
  /**
   * The repository associated with this node.
   */
  repository: Repository;
}

/**
 * A threaded list of comments for a given pull request.
 */
export interface PullRequestReviewThread extends Node {
  
  /**
   * A list of pull request comments associated with the thread.
   */
  comments: PullRequestReviewCommentConnection;
  id: string;
  
  /**
   * Identifies the pull request associated with this thread.
   */
  pullRequest: PullRequest;
  
  /**
   * Identifies the repository associated with this thread.
   */
  repository: Repository;
}

/**
 * Represents a 'closed' event on any `Closable`.
 */
export interface ClosedEvent extends Node, UniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Object that was closed.
   */
  closable: Closable;
  
  /**
   * Object which triggered the creation of this event.
   */
  closer?: Closer;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * The HTTP path for this closed event.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this closed event.
   */
  url: URI;
}

/**
 * The object which triggered a `ClosedEvent`.
 */
export type Closer = Commit | PullRequest;

/** Use this to resolve union type Closer */
export type PossibleCloserTypeNames = 'Commit' | 'PullRequest';

export interface CloserNameMap {
  Closer: Closer;
  Commit: Commit;
  PullRequest: PullRequest;
}

/**
 * Represents a 'reopened' event on any `Closable`.
 */
export interface ReopenedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Object that was reopened.
   */
  closable: Closable;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
}

/**
 * Represents a 'subscribed' event on a given `Subscribable`.
 */
export interface SubscribedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Object referenced by event.
   */
  subscribable: Subscribable;
}

/**
 * Represents an 'unsubscribed' event on a given `Subscribable`.
 */
export interface UnsubscribedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Object referenced by event.
   */
  subscribable: Subscribable;
}

/**
 * Represents a 'merged' event on a given pull request.
 */
export interface MergedEvent extends Node, UniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the commit associated with the `merge` event.
   */
  commit?: Commit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the Ref associated with the `merge` event.
   */
  mergeRef?: Ref;
  
  /**
   * Identifies the name of the Ref associated with the `merge` event.
   */
  mergeRefName: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  
  /**
   * The HTTP path for this merged event.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this merged event.
   */
  url: URI;
}

/**
 * Represents a 'referenced' event on a given `ReferencedSubject`.
 */
export interface ReferencedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the commit associated with the 'referenced' event.
   */
  commit?: Commit;
  
  /**
   * Identifies the repository associated with the 'referenced' event.
   */
  commitRepository: Repository;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;
  
  /**
   * Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
   */
  isDirectReference: boolean;
  
  /**
   * Object referenced by event.
   */
  subject: ReferencedSubject;
}

/**
 * Any referencable object
 */
export type ReferencedSubject = Issue | PullRequest;

/** Use this to resolve union type ReferencedSubject */
export type PossibleReferencedSubjectTypeNames = 'Issue' | 'PullRequest';

export interface ReferencedSubjectNameMap {
  ReferencedSubject: ReferencedSubject;
  Issue: Issue;
  PullRequest: PullRequest;
}

/**
 * Represents a mention made by one issue or pull request to another.
 */
export interface CrossReferencedEvent extends Node, UniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Reference originated in a different repository.
   */
  isCrossRepository: boolean;
  
  /**
   * Identifies when the reference was made.
   */
  referencedAt: DateTime;
  
  /**
   * The HTTP path for this pull request.
   */
  resourcePath: URI;
  
  /**
   * Issue or pull request that made the reference.
   */
  source: ReferencedSubject;
  
  /**
   * Issue or pull request to which the reference was made.
   */
  target: ReferencedSubject;
  
  /**
   * The HTTP URL for this pull request.
   */
  url: URI;
  
  /**
   * Checks if the target will be closed when the source is merged.
   */
  willCloseTarget: boolean;
}

/**
 * Represents an 'assigned' event on any assignable object.
 */
export interface AssignedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the assignable associated with the event.
   */
  assignable: Assignable;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the user who was assigned.
   */
  user?: User;
}

/**
 * Represents an 'unassigned' event on any assignable object.
 */
export interface UnassignedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the assignable associated with the event.
   */
  assignable: Assignable;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the subject (user) who was unassigned.
   */
  user?: User;
}

/**
 * Represents a 'labeled' event on a given issue or pull request.
 */
export interface LabeledEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the label associated with the 'labeled' event.
   */
  label: Label;
  
  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: Labelable;
}

/**
 * Represents an 'unlabeled' event on a given issue or pull request.
 */
export interface UnlabeledEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the label associated with the 'unlabeled' event.
   */
  label: Label;
  
  /**
   * Identifies the `Labelable` associated with the event.
   */
  labelable: Labelable;
}

/**
 * Represents a 'milestoned' event on a given issue or pull request.
 */
export interface MilestonedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the milestone title associated with the 'milestoned' event.
   */
  milestoneTitle: string;
  
  /**
   * Object referenced by event.
   */
  subject: MilestoneItem;
}

/**
 * Types that can be inside a Milestone.
 */
export type MilestoneItem = Issue | PullRequest;

/** Use this to resolve union type MilestoneItem */
export type PossibleMilestoneItemTypeNames = 'Issue' | 'PullRequest';

export interface MilestoneItemNameMap {
  MilestoneItem: MilestoneItem;
  Issue: Issue;
  PullRequest: PullRequest;
}

/**
 * Represents a 'demilestoned' event on a given issue or pull request.
 */
export interface DemilestonedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the milestone title associated with the 'demilestoned' event.
   */
  milestoneTitle: string;
  
  /**
   * Object referenced by event.
   */
  subject: MilestoneItem;
}

/**
 * Represents a 'renamed' event on a given issue or pull request
 */
export interface RenamedTitleEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the current title of the issue or pull request.
   */
  currentTitle: string;
  id: string;
  
  /**
   * Identifies the previous title of the issue or pull request.
   */
  previousTitle: string;
  
  /**
   * Subject that was renamed.
   */
  subject: RenamedTitleSubject;
}

/**
 * An object which has a renamable title
 */
export type RenamedTitleSubject = Issue | PullRequest;

/** Use this to resolve union type RenamedTitleSubject */
export type PossibleRenamedTitleSubjectTypeNames = 'Issue' | 'PullRequest';

export interface RenamedTitleSubjectNameMap {
  RenamedTitleSubject: RenamedTitleSubject;
  Issue: Issue;
  PullRequest: PullRequest;
}

/**
 * Represents a 'locked' event on a given issue or pull request.
 */
export interface LockedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Reason that the conversation was locked (optional).
   */
  lockReason?: LockReason;
  
  /**
   * Object that was locked.
   */
  lockable: Lockable;
}

/**
 * Represents an 'unlocked' event on a given issue or pull request.
 */
export interface UnlockedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Object that was unlocked.
   */
  lockable: Lockable;
}

/**
 * Represents a 'deployed' event on a given pull request.
 */
export interface DeployedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The deployment associated with the 'deployed' event.
   */
  deployment: Deployment;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  
  /**
   * The ref associated with the 'deployed' event.
   */
  ref?: Ref;
}

/**
 * Represents a 'deployment_environment_changed' event on a given pull request.
 */
export interface DeploymentEnvironmentChangedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The deployment status that updated the deployment environment.
   */
  deploymentStatus: DeploymentStatus;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * Represents a 'head_ref_deleted' event on a given pull request.
 */
export interface HeadRefDeletedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the Ref associated with the `head_ref_deleted` event.
   */
  headRef?: Ref;
  
  /**
   * Identifies the name of the Ref associated with the `head_ref_deleted` event.
   */
  headRefName: string;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * Represents a 'head_ref_restored' event on a given pull request.
 */
export interface HeadRefRestoredEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
}

/**
 * Represents a 'head_ref_force_pushed' event on a given pull request.
 */
export interface HeadRefForcePushedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the after commit SHA for the 'head_ref_force_pushed' event.
   */
  afterCommit?: Commit;
  
  /**
   * Identifies the before commit SHA for the 'head_ref_force_pushed' event.
   */
  beforeCommit?: Commit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  
  /**
   * Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
   */
  ref?: Ref;
}

/**
 * Represents a 'base_ref_force_pushed' event on a given pull request.
 */
export interface BaseRefForcePushedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the after commit SHA for the 'base_ref_force_pushed' event.
   */
  afterCommit?: Commit;
  
  /**
   * Identifies the before commit SHA for the 'base_ref_force_pushed' event.
   */
  beforeCommit?: Commit;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  
  /**
   * Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
   */
  ref?: Ref;
}

/**
 * Represents an 'review_requested' event on a given pull request.
 */
export interface ReviewRequestedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  
  /**
   * Identifies the reviewer whose review was requested.
   */
  requestedReviewer?: RequestedReviewer;
}

/**
 * Represents an 'review_request_removed' event on a given pull request.
 */
export interface ReviewRequestRemovedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  
  /**
   * Identifies the reviewer whose review request was removed.
   */
  requestedReviewer?: RequestedReviewer;
}

/**
 * Represents a 'review_dismissed' event on a given issue or pull request.
 */
export interface ReviewDismissedEvent extends Node, UniformResourceLocatable {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * Identifies the message associated with the 'review_dismissed' event.
   */
  message: string;
  
  /**
   * The message associated with the event, rendered to HTML.
   */
  messageHtml: HTML;
  
  /**
   * Identifies the previous state of the review with the 'review_dismissed' event.
   */
  previousReviewState: PullRequestReviewState;
  
  /**
   * PullRequest referenced by event.
   */
  pullRequest: PullRequest;
  
  /**
   * Identifies the commit which caused the review to become stale.
   */
  pullRequestCommit?: PullRequestCommit;
  
  /**
   * The HTTP path for this review dismissed event.
   */
  resourcePath: URI;
  
  /**
   * Identifies the review associated with the 'review_dismissed' event.
   */
  review?: PullRequestReview;
  
  /**
   * The HTTP URL for this review dismissed event.
   */
  url: URI;
}

/**
 * The connection type for Ref.
 */
export interface RefConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<RefEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Ref | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface RefEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Ref;
}

/**
 * The connection type for PushAllowance.
 */
export interface PushAllowanceConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<PushAllowanceEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<PushAllowance | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface PushAllowanceEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PushAllowance;
}

/**
 * A team or user who has the ability to push to a protected branch.
 */
export interface PushAllowance extends Node {
  
  /**
   * The actor that can push.
   */
  actor?: PushAllowanceActor;
  
  /**
   * Identifies the branch protection rule associated with the allowed user or team.
   */
  branchProtectionRule?: BranchProtectionRule;
  id: string;
}

/**
 * Types that can be an actor.
 */
export type PushAllowanceActor = User | Team;

/** Use this to resolve union type PushAllowanceActor */
export type PossiblePushAllowanceActorTypeNames = 'User' | 'Team';

export interface PushAllowanceActorNameMap {
  PushAllowanceActor: PushAllowanceActor;
  User: User;
  Team: Team;
}

/**
 * The connection type for ReviewDismissalAllowance.
 */
export interface ReviewDismissalAllowanceConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ReviewDismissalAllowanceEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<ReviewDismissalAllowance | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ReviewDismissalAllowanceEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: ReviewDismissalAllowance;
}

/**
 * A team or user who has the ability to dismiss a review on a protected branch.
 */
export interface ReviewDismissalAllowance extends Node {
  
  /**
   * The actor that can dismiss.
   */
  actor?: ReviewDismissalAllowanceActor;
  
  /**
   * Identifies the branch protection rule associated with the allowed user or team.
   */
  branchProtectionRule?: BranchProtectionRule;
  id: string;
}

/**
 * Types that can be an actor.
 */
export type ReviewDismissalAllowanceActor = User | Team;

/** Use this to resolve union type ReviewDismissalAllowanceActor */
export type PossibleReviewDismissalAllowanceActorTypeNames = 'User' | 'Team';

export interface ReviewDismissalAllowanceActorNameMap {
  ReviewDismissalAllowanceActor: ReviewDismissalAllowanceActor;
  User: User;
  Team: Team;
}

/**
 * Collaborators affiliation level with a subject.
 */
export enum CollaboratorAffiliation {
  
  /**
   * All outside collaborators of an organization-owned subject.
   */
  OUTSIDE = 'OUTSIDE',
  
  /**
   * All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
   */
  DIRECT = 'DIRECT',
  
  /**
   * All collaborators the authenticated user can see.
   */
  ALL = 'ALL'
}

/**
 * The connection type for User.
 */
export interface RepositoryCollaboratorConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<RepositoryCollaboratorEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<User | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user who is a collaborator of a repository.
 */
export interface RepositoryCollaboratorEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: User;
  
  /**
   * The permission the user has on the repository.
   */
  permission: RepositoryPermission;
}

/**
 * The connection type for DeployKey.
 */
export interface DeployKeyConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<DeployKeyEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<DeployKey | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface DeployKeyEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: DeployKey;
}

/**
 * A repository deploy key.
 */
export interface DeployKey extends Node {
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * The deploy key.
   */
  key: string;
  
  /**
   * Whether or not the deploy key is read only.
   */
  readOnly: boolean;
  
  /**
   * The deploy key title.
   */
  title: string;
  
  /**
   * Whether or not the deploy key has been verified.
   */
  verified: boolean;
}

/**
 * Used for return value of Repository.issueOrPullRequest.
 */
export type IssueOrPullRequest = Issue | PullRequest;

/** Use this to resolve union type IssueOrPullRequest */
export type PossibleIssueOrPullRequestTypeNames = 'Issue' | 'PullRequest';

export interface IssueOrPullRequestNameMap {
  IssueOrPullRequest: IssueOrPullRequest;
  Issue: Issue;
  PullRequest: PullRequest;
}

/**
 * Ordering options for language connections.
 */
export interface LanguageOrder {
  
  /**
   * The field to order languages by.
   */
  field: LanguageOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which language connections can be ordered.
 */
export enum LanguageOrderField {
  
  /**
   * Order languages by the size of all files containing the language
   */
  SIZE = 'SIZE'
}

/**
 * A list of languages associated with the parent.
 */
export interface LanguageConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<LanguageEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Language | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
  
  /**
   * The total size in bytes of files written in that language.
   */
  totalSize: number;
}

/**
 * Represents the language of a repository.
 */
export interface LanguageEdge {
  cursor: string;
  node: Language;
  
  /**
   * The number of bytes of code written in the language.
   */
  size: number;
}

/**
 * Represents a given language found in repositories.
 */
export interface Language extends Node {
  
  /**
   * The color defined for the current language.
   */
  color?: string;
  id: string;
  
  /**
   * The name of the current language.
   */
  name: string;
}

/**
 * Ordering options for milestone connections.
 */
export interface MilestoneOrder {
  
  /**
   * The field to order milestones by.
   */
  field: MilestoneOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which milestone connections can be ordered.
 */
export enum MilestoneOrderField {
  
  /**
   * Order milestones by when they are due.
   */
  DUE_DATE = 'DUE_DATE',
  
  /**
   * Order milestones by when they were created.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order milestones by when they were last updated.
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Order milestones by their number.
   */
  NUMBER = 'NUMBER'
}

/**
 * The connection type for Milestone.
 */
export interface MilestoneConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<MilestoneEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Milestone | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface MilestoneEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Milestone;
}

/**
 * Ways in which lists of projects can be ordered upon return.
 */
export interface ProjectOrder {
  
  /**
   * The field in which to order projects by.
   */
  field: ProjectOrderField;
  
  /**
   * The direction in which to order projects by the specified field.
   */
  direction: OrderDirection;
}

/**
 * Properties by which project connections can be ordered.
 */
export enum ProjectOrderField {
  
  /**
   * Order projects by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order projects by update time
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Order projects by name
   */
  NAME = 'NAME'
}

/**
 * State of the project; either 'open' or 'closed'
 */
export enum ProjectState {
  
  /**
   * The project is open.
   */
  OPEN = 'OPEN',
  
  /**
   * The project is closed.
   */
  CLOSED = 'CLOSED'
}

/**
 * A list of projects associated with the owner.
 */
export interface ProjectConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ProjectEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Project | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ProjectEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Project;
}

/**
 * The connection type for ProtectedBranch.
 */
export interface ProtectedBranchConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ProtectedBranchEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<ProtectedBranch | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ProtectedBranchEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: ProtectedBranch;
}

/**
 * A repository protected branch.
 */
export interface ProtectedBranch extends Node {
  
  /**
   * The actor who created this protected branch.
   */
  creator?: Actor;
  
  /**
   * Will new commits pushed to this branch dismiss pull request review approvals.
   */
  hasDismissableStaleReviews: boolean;
  
  /**
   * Are reviews required to update this branch.
   */
  hasRequiredReviews: boolean;
  
  /**
   * Are status checks required to update this branch.
   */
  hasRequiredStatusChecks: boolean;
  
  /**
   * Is pushing to this branch restricted.
   */
  hasRestrictedPushes: boolean;
  
  /**
   * Is dismissal of pull request reviews restricted.
   */
  hasRestrictedReviewDismissals: boolean;
  
  /**
   * Are branches required to be up to date before merging.
   */
  hasStrictRequiredStatusChecks: boolean;
  id: string;
  
  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced: boolean;
  
  /**
   * The name of the protected branch rule.
   */
  name: string;
  
  /**
   * A list push allowances for this protected branch.
   */
  pushAllowances: PushAllowanceConnection;
  
  /**
   * The repository associated with this protected branch.
   */
  repository: Repository;
  
  /**
   * List of required status check contexts that must pass for commits to be accepted to this branch.
   */
  requiredStatusCheckContexts?: Array<string | null>;
  
  /**
   * A list review dismissal allowances for this protected branch.
   */
  reviewDismissalAllowances: ReviewDismissalAllowanceConnection;
}

/**
 * Ways in which lists of git refs can be ordered upon return.
 */
export interface RefOrder {
  
  /**
   * The field in which to order refs by.
   */
  field: RefOrderField;
  
  /**
   * The direction in which to order refs by the specified field.
   */
  direction: OrderDirection;
}

/**
 * Properties by which ref connections can be ordered.
 */
export enum RefOrderField {
  
  /**
   * Order refs by underlying commit date if the ref prefix is refs/tags/
   */
  TAG_COMMIT_DATE = 'TAG_COMMIT_DATE',
  
  /**
   * Order refs by their alphanumeric name
   */
  ALPHABETICAL = 'ALPHABETICAL'
}

/**
 * A release contains the content for a release.
 */
export interface Release extends Node, UniformResourceLocatable {
  
  /**
   * The author of the release
   */
  author?: User;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the description of the release.
   */
  description?: string;
  id: string;
  
  /**
   * Whether or not the release is a draft
   */
  isDraft: boolean;
  
  /**
   * Whether or not the release is a prerelease
   */
  isPrerelease: boolean;
  
  /**
   * Identifies the title of the release.
   */
  name?: string;
  
  /**
   * Identifies the date and time when the release was created.
   */
  publishedAt?: DateTime;
  
  /**
   * List of releases assets which are dependent on this release.
   */
  releaseAssets: ReleaseAssetConnection;
  
  /**
   * The HTTP path for this issue
   */
  resourcePath: URI;
  
  /**
   * The Git tag the release points to
   */
  tag?: Ref;
  
  /**
   * The name of the release's Git tag
   */
  tagName: string;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this issue
   */
  url: URI;
}

/**
 * The connection type for ReleaseAsset.
 */
export interface ReleaseAssetConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ReleaseAssetEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<ReleaseAsset | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ReleaseAssetEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: ReleaseAsset;
}

/**
 * A release asset contains the content for a release asset.
 */
export interface ReleaseAsset extends Node {
  
  /**
   * The asset's content-type
   */
  contentType: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The number of times this asset was downloaded
   */
  downloadCount: number;
  
  /**
   * Identifies the URL where you can download the release asset via the browser.
   */
  downloadUrl: URI;
  id: string;
  
  /**
   * Identifies the title of the release asset.
   */
  name: string;
  
  /**
   * Release that the asset is associated with
   */
  release?: Release;
  
  /**
   * The size (in bytes) of the asset
   */
  size: number;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The user that performed the upload
   */
  uploadedBy: User;
  
  /**
   * Identifies the URL of the release asset.
   */
  url: URI;
}

/**
 * Ways in which lists of releases can be ordered upon return.
 */
export interface ReleaseOrder {
  
  /**
   * The field in which to order releases by.
   */
  field: ReleaseOrderField;
  
  /**
   * The direction in which to order releases by the specified field.
   */
  direction: OrderDirection;
}

/**
 * Properties by which release connections can be ordered.
 */
export enum ReleaseOrderField {
  
  /**
   * Order releases by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order releases alphabetically by name
   */
  NAME = 'NAME'
}

/**
 * The connection type for Release.
 */
export interface ReleaseConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ReleaseEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Release | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ReleaseEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Release;
}

/**
 * The connection type for RepositoryTopic.
 */
export interface RepositoryTopicConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<RepositoryTopicEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<RepositoryTopic | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface RepositoryTopicEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: RepositoryTopic;
}

/**
 * A repository-topic connects a repository to a topic.
 */
export interface RepositoryTopic extends Node, UniformResourceLocatable {
  id: string;
  
  /**
   * The HTTP path for this repository-topic.
   */
  resourcePath: URI;
  
  /**
   * The topic.
   */
  topic: Topic;
  
  /**
   * The HTTP URL for this repository-topic.
   */
  url: URI;
}

/**
 * A topic aggregates entities that are related to a subject.
 */
export interface Topic extends Node, Starrable {
  id: string;
  
  /**
   * The topic's name.
   */
  name: string;
  
  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   */
  relatedTopics: Array<Topic>;
  
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: StargazerConnection;
  
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

/**
 * Git SSH string
 */
export type GitSSHRemote = any;

/**
 * A contributions collection aggregates contributions such as opened issues and commits created by a user.
 */
export interface ContributionsCollection {
  
  /**
   * A calendar of this user's contributions on GitHub.
   */
  contributionCalendar: ContributionCalendar;
  
  /**
   * Determine if this collection's time span ends in the current month.
   */
  doesEndInCurrentMonth: boolean;
  
  /**
   * The date of the first restricted contribution the user made in this time
   * period. Can only be non-null when the user has enabled private contribution counts.
   */
  earliestRestrictedContributionDate?: Date;
  
  /**
   * The ending date and time of this collection.
   */
  endedAt: DateTime;
  
  /**
   * The first issue the user opened on GitHub. This will be null if that issue was
   * opened outside the collection's time range and ignoreTimeRange is false. If
   * the issue is not visible but the user has opted to show private contributions,
   * a RestrictedContribution will be returned.
   */
  firstIssueContribution?: CreatedIssueOrRestrictedContribution;
  
  /**
   * The first pull request the user opened on GitHub. This will be null if that
   * pull request was opened outside the collection's time range and
   * ignoreTimeRange is not true. If the pull request is not visible but the user
   * has opted to show private contributions, a RestrictedContribution will be returned.
   */
  firstPullRequestContribution?: CreatedPullRequestOrRestrictedContribution;
  
  /**
   * Does the user have any more activity in the timeline that occurred prior to the collection's time range?
   */
  hasActivityInThePast: boolean;
  
  /**
   * Determine if there are any contributions in this collection.
   */
  hasAnyContributions: boolean;
  
  /**
   * Determine if the user made any contributions in this time frame whose details
   * are not visible because they were made in a private repository. Can only be
   * true if the user enabled private contribution counts.
   */
  hasAnyRestrictedContributions: boolean;
  
  /**
   * Whether or not the collector's time span is all within the same day.
   */
  isSingleDay: boolean;
  
  /**
   * A list of issues the user opened.
   */
  issueContributions: CreatedIssueContributionConnection;
  
  /**
   * When the user signed up for GitHub. This will be null if that sign up date
   * falls outside the collection's time range and ignoreTimeRange is false.
   */
  joinedGitHubContribution?: JoinedGitHubContribution;
  
  /**
   * The date of the most recent restricted contribution the user made in this time
   * period. Can only be non-null when the user has enabled private contribution counts.
   */
  latestRestrictedContributionDate?: Date;
  
  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   */
  mostRecentCollectionWithActivity?: ContributionsCollection;
  
  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   */
  mostRecentCollectionWithoutActivity?: ContributionsCollection;
  
  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   */
  popularIssueContribution?: CreatedIssueContribution;
  
  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   */
  popularPullRequestContribution?: CreatedPullRequestContribution;
  
  /**
   * A count of contributions made by the user that the viewer cannot access. Only
   * non-zero when the user has chosen to share their private contribution counts.
   */
  restrictedContributionsCount: number;
  
  /**
   * The beginning date and time of this collection.
   */
  startedAt: DateTime;
  
  /**
   * How many commits were made by the user in this time span.
   */
  totalCommitContributions: number;
  
  /**
   * How many issues the user opened.
   */
  totalIssueContributions: number;
  
  /**
   * How many pull requests the user opened.
   */
  totalPullRequestContributions: number;
  
  /**
   * How many pull request reviews the user left.
   */
  totalPullRequestReviewContributions: number;
  
  /**
   * How many different repositories the user committed to.
   */
  totalRepositoriesWithContributedCommits: number;
  
  /**
   * How many different repositories the user opened issues in.
   */
  totalRepositoriesWithContributedIssues: number;
  
  /**
   * How many different repositories the user left pull request reviews in.
   */
  totalRepositoriesWithContributedPullRequestReviews: number;
  
  /**
   * How many different repositories the user opened pull requests in.
   */
  totalRepositoriesWithContributedPullRequests: number;
  
  /**
   * How many repositories the user created.
   */
  totalRepositoryContributions: number;
  
  /**
   * The user who made the contributions in this collection.
   */
  user: User;
}

/**
 * A calendar of contributions made on GitHub by a user.
 */
export interface ContributionCalendar {
  
  /**
   * A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
   */
  colors: Array<string>;
  
  /**
   * Determine if the color set was chosen because it's currently Halloween.
   */
  isHalloween: boolean;
  
  /**
   * A list of the months of contributions in this calendar.
   */
  months: Array<ContributionCalendarMonth>;
  
  /**
   * The count of total contributions in the calendar.
   */
  totalContributions: number;
  
  /**
   * A list of the weeks of contributions in this calendar.
   */
  weeks: Array<ContributionCalendarWeek>;
}

/**
 * A month of contributions in a user's contribution graph.
 */
export interface ContributionCalendarMonth {
  
  /**
   * The date of the first day of this month.
   */
  firstDay: Date;
  
  /**
   * The name of the month.
   */
  name: string;
  
  /**
   * How many weeks started in this month.
   */
  totalWeeks: number;
  
  /**
   * The year the month occurred in.
   */
  year: number;
}

/**
 * An ISO-8601 encoded date string.
 */
export type Date = any;

/**
 * A week of contributions in a user's contribution graph.
 */
export interface ContributionCalendarWeek {
  
  /**
   * The days of contributions in this week.
   */
  contributionDays: Array<ContributionCalendarDay>;
  
  /**
   * The date of the earliest square in this week.
   */
  firstDay: Date;
}

/**
 * Represents a single day of contributions on GitHub by a user.
 */
export interface ContributionCalendarDay {
  
  /**
   * The hex color code that represents how many contributions were made on this day compared to others in the calendar.
   */
  color: string;
  
  /**
   * How many contributions were made by the user on this day.
   */
  contributionCount: number;
  
  /**
   * The day this square represents.
   */
  date: Date;
  
  /**
   * A number representing which day of the week this square represents, e.g., 1 is Monday.
   */
  weekday: number;
}

/**
 * Represents either a issue the viewer can access or a restricted contribution.
 */
export type CreatedIssueOrRestrictedContribution =
CreatedIssueContribution |
RestrictedContribution;

/** Use this to resolve union type CreatedIssueOrRestrictedContribution */
export type PossibleCreatedIssueOrRestrictedContributionTypeNames =
'CreatedIssueContribution' |
'RestrictedContribution';

export interface CreatedIssueOrRestrictedContributionNameMap {
  CreatedIssueOrRestrictedContribution: CreatedIssueOrRestrictedContribution;
  CreatedIssueContribution: CreatedIssueContribution;
  RestrictedContribution: RestrictedContribution;
}

/**
 * Represents the contribution a user made on GitHub by opening an issue.
 */
export interface CreatedIssueContribution extends Contribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * The issue that was opened.
   */
  issue: Issue;
  
  /**
   * When this contribution was made.
   */
  occurredAt: DateTime;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: URI;
  
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * Represents a contribution a user made on GitHub, such as opening an issue.
 */
export interface Contribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: DateTime;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: URI;
  
  /**
   * The user who made this contribution.
   */
  user: User;
}

/** Use this to resolve interface type Contribution */
export type PossibleContributionTypeNames =
'CreatedIssueContribution' |
'RestrictedContribution' |
'CreatedPullRequestContribution' |
'JoinedGitHubContribution';

export interface ContributionNameMap {
  Contribution: Contribution;
  CreatedIssueContribution: CreatedIssueContribution;
  RestrictedContribution: RestrictedContribution;
  CreatedPullRequestContribution: CreatedPullRequestContribution;
  JoinedGitHubContribution: JoinedGitHubContribution;
}

/**
 * Represents a private contribution a user made on GitHub.
 */
export interface RestrictedContribution extends Contribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: DateTime;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: URI;
  
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * Represents either a pull request the viewer can access or a restricted contribution.
 */
export type CreatedPullRequestOrRestrictedContribution =
CreatedPullRequestContribution |
RestrictedContribution;

/** Use this to resolve union type CreatedPullRequestOrRestrictedContribution */
export type PossibleCreatedPullRequestOrRestrictedContributionTypeNames =
'CreatedPullRequestContribution' |
'RestrictedContribution';

export interface CreatedPullRequestOrRestrictedContributionNameMap {
  CreatedPullRequestOrRestrictedContribution: CreatedPullRequestOrRestrictedContribution;
  CreatedPullRequestContribution: CreatedPullRequestContribution;
  RestrictedContribution: RestrictedContribution;
}

/**
 * Represents the contribution a user made on GitHub by opening a pull request.
 */
export interface CreatedPullRequestContribution extends Contribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: DateTime;
  
  /**
   * The pull request that was opened.
   */
  pullRequest: PullRequest;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: URI;
  
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * The connection type for CreatedIssueContribution.
 */
export interface CreatedIssueContributionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<CreatedIssueContributionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<CreatedIssueContribution | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface CreatedIssueContributionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: CreatedIssueContribution;
}

/**
 * Represents a user signing up for a GitHub account.
 */
export interface JoinedGitHubContribution extends Contribution {
  
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  isRestricted: boolean;
  
  /**
   * When this contribution was made.
   */
  occurredAt: DateTime;
  
  /**
   * The HTTP path for this contribution.
   */
  resourcePath: URI;
  
  /**
   * The HTTP URL for this contribution.
   */
  url: URI;
  
  /**
   * The user who made this contribution.
   */
  user: User;
}

/**
 * The connection type for User.
 */
export interface FollowerConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<UserEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<User | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * The connection type for User.
 */
export interface FollowingConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<UserEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<User | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * A Gist.
 */
export interface Gist extends Node, Starrable {
  
  /**
   * A list of comments associated with the gist
   */
  comments: GistCommentConnection;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The gist description.
   */
  description?: string;
  id: string;
  
  /**
   * Whether the gist is public or not.
   */
  isPublic: boolean;
  
  /**
   * The gist name.
   */
  name: string;
  
  /**
   * The gist owner.
   */
  owner?: RepositoryOwner;
  
  /**
   * Identifies when the gist was last pushed to.
   */
  pushedAt?: DateTime;
  
  /**
   * A list of users who have starred this starrable.
   */
  stargazers: StargazerConnection;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * Returns a boolean indicating whether the viewing user has starred this starrable.
   */
  viewerHasStarred: boolean;
}

/**
 * The connection type for GistComment.
 */
export interface GistCommentConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GistCommentEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<GistComment | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GistCommentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: GistComment;
}

/**
 * Represents a comment on an Gist.
 */
export interface GistComment extends Node, Comment, Deletable, Updatable, UpdatableComment {
  
  /**
   * The actor who authored the comment.
   */
  author?: Actor;
  
  /**
   * Author's association with the gist.
   */
  authorAssociation: CommentAuthorAssociation;
  
  /**
   * Identifies the comment body.
   */
  body: string;
  
  /**
   * The comment body rendered to HTML.
   */
  bodyHTML: HTML;
  
  /**
   * The body rendered to text.
   */
  bodyText: string;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Check if this comment was created via an email reply.
   */
  createdViaEmail: boolean;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * The actor who edited the comment.
   */
  editor?: Actor;
  
  /**
   * The associated gist.
   */
  gist: Gist;
  id: string;
  
  /**
   * Check if this comment was edited and includes an edit with the creation data
   */
  includesCreatedEdit: boolean;
  
  /**
   * Returns whether or not a comment has been minimized.
   */
  isMinimized: boolean;
  
  /**
   * The moment the editor made the last edit
   */
  lastEditedAt?: DateTime;
  
  /**
   * Returns why the comment was minimized.
   */
  minimizedReason?: string;
  
  /**
   * Identifies when the comment was published at.
   */
  publishedAt?: DateTime;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * A list of edits to this content.
   */
  userContentEdits?: UserContentEditConnection;
  
  /**
   * Check if the current viewer can delete this object.
   */
  viewerCanDelete: boolean;
  
  /**
   * Check if the current viewer can minimize this object.
   */
  viewerCanMinimize: boolean;
  
  /**
   * Check if the current viewer can update this object.
   */
  viewerCanUpdate: boolean;
  
  /**
   * Reasons why the current viewer can not update this comment.
   */
  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;
  
  /**
   * Did the viewer author this comment.
   */
  viewerDidAuthor: boolean;
}

/**
 * The privacy of a Gist
 */
export enum GistPrivacy {
  
  /**
   * Public
   */
  PUBLIC = 'PUBLIC',
  
  /**
   * Secret
   */
  SECRET = 'SECRET',
  
  /**
   * Gists that are public and secret
   */
  ALL = 'ALL'
}

/**
 * Ordering options for gist connections
 */
export interface GistOrder {
  
  /**
   * The field to order repositories by.
   */
  field: GistOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which gist connections can be ordered.
 */
export enum GistOrderField {
  
  /**
   * Order gists by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order gists by update time
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Order gists by push time
   */
  PUSHED_AT = 'PUSHED_AT'
}

/**
 * The connection type for Gist.
 */
export interface GistConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<GistEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Gist | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface GistEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Gist;
}

/**
 * The connection type for Organization.
 */
export interface OrganizationConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<OrganizationEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Organization | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface OrganizationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Organization;
}

/**
 * The connection type for PublicKey.
 */
export interface PublicKeyConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<PublicKeyEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<PublicKey | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface PublicKeyEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PublicKey;
}

/**
 * A user's public key.
 */
export interface PublicKey extends Node {
  id: string;
  
  /**
   * The public key string
   */
  key: string;
}

/**
 * The reason a repository is listed as 'contributed'.
 */
export enum RepositoryContributionType {
  
  /**
   * Created a commit
   */
  COMMIT = 'COMMIT',
  
  /**
   * Created an issue
   */
  ISSUE = 'ISSUE',
  
  /**
   * Created a pull request
   */
  PULL_REQUEST = 'PULL_REQUEST',
  
  /**
   * Created the repository
   */
  REPOSITORY = 'REPOSITORY',
  
  /**
   * Reviewed a pull request
   */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW'
}

/**
 * The connection type for Repository.
 */
export interface StarredRepositoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<StarredRepositoryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Repository | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a starred repository.
 */
export interface StarredRepositoryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  node: Repository;
  
  /**
   * Identifies when the item was starred.
   */
  starredAt: DateTime;
}

/**
 * The connection type for IssueTimelineItem.
 */
export interface IssueTimelineConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<IssueTimelineItemEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<IssueTimelineItem | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface IssueTimelineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: IssueTimelineItem;
}

/**
 * An item in an issue timeline
 */
export type IssueTimelineItem =
Commit |
IssueComment |
CrossReferencedEvent |
ClosedEvent |
ReopenedEvent |
SubscribedEvent |
UnsubscribedEvent |
ReferencedEvent |
AssignedEvent |
UnassignedEvent |
LabeledEvent |
UnlabeledEvent |
MilestonedEvent |
DemilestonedEvent |
RenamedTitleEvent |
LockedEvent |
UnlockedEvent |
TransferredEvent;

/** Use this to resolve union type IssueTimelineItem */
export type PossibleIssueTimelineItemTypeNames =
'Commit' |
'IssueComment' |
'CrossReferencedEvent' |
'ClosedEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'UnsubscribedEvent' |
'ReferencedEvent' |
'AssignedEvent' |
'UnassignedEvent' |
'LabeledEvent' |
'UnlabeledEvent' |
'MilestonedEvent' |
'DemilestonedEvent' |
'RenamedTitleEvent' |
'LockedEvent' |
'UnlockedEvent' |
'TransferredEvent';

export interface IssueTimelineItemNameMap {
  IssueTimelineItem: IssueTimelineItem;
  Commit: Commit;
  IssueComment: IssueComment;
  CrossReferencedEvent: CrossReferencedEvent;
  ClosedEvent: ClosedEvent;
  ReopenedEvent: ReopenedEvent;
  SubscribedEvent: SubscribedEvent;
  UnsubscribedEvent: UnsubscribedEvent;
  ReferencedEvent: ReferencedEvent;
  AssignedEvent: AssignedEvent;
  UnassignedEvent: UnassignedEvent;
  LabeledEvent: LabeledEvent;
  UnlabeledEvent: UnlabeledEvent;
  MilestonedEvent: MilestonedEvent;
  DemilestonedEvent: DemilestonedEvent;
  RenamedTitleEvent: RenamedTitleEvent;
  LockedEvent: LockedEvent;
  UnlockedEvent: UnlockedEvent;
  TransferredEvent: TransferredEvent;
}

/**
 * Represents a 'transferred' event on a given issue or pull request.
 */
export interface TransferredEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * The repository this came from
   */
  fromRepository?: Repository;
  id: string;
  
  /**
   * Identifies the issue associated with the event.
   */
  issue: Issue;
}

/**
 * Various content states of a ProjectCard
 */
export enum ProjectCardState {
  
  /**
   * The card has content only.
   */
  CONTENT_ONLY = 'CONTENT_ONLY',
  
  /**
   * The card has a note only.
   */
  NOTE_ONLY = 'NOTE_ONLY',
  
  /**
   * The card is redacted.
   */
  REDACTED = 'REDACTED'
}

/**
 * The semantic purpose of the column - todo, in progress, or done.
 */
export enum ProjectColumnPurpose {
  
  /**
   * The column contains cards still to be worked on
   */
  TODO = 'TODO',
  
  /**
   * The column contains cards which are currently being worked on
   */
  IN_PROGRESS = 'IN_PROGRESS',
  
  /**
   * The column contains cards which are complete
   */
  DONE = 'DONE'
}

/**
 * The connection type for User.
 */
export interface OrganizationMemberConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<OrganizationMemberEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<User | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * Represents a user within an organization.
 */
export interface OrganizationMemberEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: User;
  
  /**
   * The role this user has in the organization.
   */
  role?: OrganizationMemberRole;
}

/**
 * The possible roles within an organization for its members.
 */
export enum OrganizationMemberRole {
  
  /**
   * The user is a member of the organization.
   */
  MEMBER = 'MEMBER',
  
  /**
   * The user is an administrator of the organization.
   */
  ADMIN = 'ADMIN'
}

/**
 * An Identity Provider configured to provision SAML and SCIM identities for Organizations
 */
export interface OrganizationIdentityProvider extends Node {
  
  /**
   * The digest algorithm used to sign SAML requests for the Identity Provider.
   */
  digestMethod?: URI;
  
  /**
   * External Identities provisioned by this Identity Provider
   */
  externalIdentities: ExternalIdentityConnection;
  id: string;
  
  /**
   * The x509 certificate used by the Identity Provder to sign assertions and responses.
   */
  idpCertificate?: X509Certificate;
  
  /**
   * The Issuer Entity ID for the SAML Identity Provider
   */
  issuer?: string;
  
  /**
   * Organization this Identity Provider belongs to
   */
  organization?: Organization;
  
  /**
   * The signature algorithm used to sign SAML requests for the Identity Provider.
   */
  signatureMethod?: URI;
  
  /**
   * The URL endpoint for the Identity Provider's SAML SSO.
   */
  ssoUrl?: URI;
}

/**
 * The connection type for ExternalIdentity.
 */
export interface ExternalIdentityConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<ExternalIdentityEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<ExternalIdentity | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface ExternalIdentityEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: ExternalIdentity;
}

/**
 * An external identity provisioned by SAML SSO or SCIM.
 */
export interface ExternalIdentity extends Node {
  
  /**
   * The GUID for this identity
   */
  guid: string;
  id: string;
  
  /**
   * Organization invitation for this SCIM-provisioned external identity
   */
  organizationInvitation?: OrganizationInvitation;
  
  /**
   * SAML Identity attributes
   */
  samlIdentity?: ExternalIdentitySamlAttributes;
  
  /**
   * SCIM Identity attributes
   */
  scimIdentity?: ExternalIdentityScimAttributes;
  
  /**
   * User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
   */
  user?: User;
}

/**
 * SAML attributes for the External Identity
 */
export interface ExternalIdentitySamlAttributes {
  
  /**
   * The NameID of the SAML identity
   */
  nameId?: string;
}

/**
 * SCIM attributes for the External Identity
 */
export interface ExternalIdentityScimAttributes {
  
  /**
   * The userName of the SCIM identity
   */
  username?: string;
}

/**
 * A valid x509 certificate string
 */
export type X509Certificate = any;

/**
 * The role of a user on a team.
 */
export enum TeamRole {
  
  /**
   * User has admin rights on the team.
   */
  ADMIN = 'ADMIN',
  
  /**
   * User is a member of the team.
   */
  MEMBER = 'MEMBER'
}

/**
 * Represents the client's rate limit.
 */
export interface RateLimit {
  
  /**
   * The point cost for the current query counting against the rate limit.
   */
  cost: number;
  
  /**
   * The maximum number of points the client is permitted to consume in a 60 minute window.
   */
  limit: number;
  
  /**
   * The maximum number of nodes this query may return
   */
  nodeCount: number;
  
  /**
   * The number of points remaining in the current rate limit window.
   */
  remaining: number;
  
  /**
   * The time at which the current rate limit window resets in UTC epoch seconds.
   */
  resetAt: DateTime;
}

/**
 * Represents the individual results of a search.
 */
export enum SearchType {
  
  /**
   * Returns results matching issues in repositories.
   */
  ISSUE = 'ISSUE',
  
  /**
   * Returns results matching repositories.
   */
  REPOSITORY = 'REPOSITORY',
  
  /**
   * Returns results matching users and organizations on GitHub.
   */
  USER = 'USER'
}

/**
 * A list of results that matched against a search query.
 */
export interface SearchResultItemConnection {
  
  /**
   * The number of pieces of code that matched the search query.
   */
  codeCount: number;
  
  /**
   * A list of edges.
   */
  edges?: Array<SearchResultItemEdge | null>;
  
  /**
   * The number of issues that matched the search query.
   */
  issueCount: number;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<SearchResultItem | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * The number of repositories that matched the search query.
   */
  repositoryCount: number;
  
  /**
   * The number of users that matched the search query.
   */
  userCount: number;
  
  /**
   * The number of wiki pages that matched the search query.
   */
  wikiCount: number;
}

/**
 * An edge in a connection.
 */
export interface SearchResultItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: SearchResultItem;
  
  /**
   * Text matches on the result found.
   */
  textMatches?: Array<TextMatch | null>;
}

/**
 * The results of a search.
 */
export type SearchResultItem =
Issue |
PullRequest |
Repository |
User |
Organization |
MarketplaceListing;

/** Use this to resolve union type SearchResultItem */
export type PossibleSearchResultItemTypeNames =
'Issue' |
'PullRequest' |
'Repository' |
'User' |
'Organization' |
'MarketplaceListing';

export interface SearchResultItemNameMap {
  SearchResultItem: SearchResultItem;
  Issue: Issue;
  PullRequest: PullRequest;
  Repository: Repository;
  User: User;
  Organization: Organization;
  MarketplaceListing: MarketplaceListing;
}

/**
 * A text match within a search result.
 */
export interface TextMatch {
  
  /**
   * The specific text fragment within the property matched on.
   */
  fragment: string;
  
  /**
   * Highlights within the matched fragment.
   */
  highlights: Array<TextMatchHighlight>;
  
  /**
   * The property matched on.
   */
  property: string;
}

/**
 * Represents a single highlight in a search result match.
 */
export interface TextMatchHighlight {
  
  /**
   * The indice in the fragment where the matched text begins.
   */
  beginIndice: number;
  
  /**
   * The indice in the fragment where the matched text ends.
   */
  endIndice: number;
  
  /**
   * The text matched.
   */
  text: string;
}

/**
 * Ordering options for security advisory connections
 */
export interface SecurityAdvisoryOrder {
  
  /**
   * The field to order security advisories by.
   */
  field: SecurityAdvisoryOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which security advisory connections can be ordered.
 */
export enum SecurityAdvisoryOrderField {
  
  /**
   * Order advisories by publication time
   */
  PUBLISHED_AT = 'PUBLISHED_AT',
  
  /**
   * Order advisories by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * An advisory identifier to filter results on.
 */
export interface SecurityAdvisoryIdentifierFilter {
  
  /**
   * The identifier type.
   */
  type: SecurityAdvisoryIdentifierType;
  
  /**
   * The identifier string. Supports exact or partial matching.
   */
  value: string;
}

/**
 * Identifier formats available for advisories.
 */
export enum SecurityAdvisoryIdentifierType {
  
  /**
   * Common Vulnerabilities and Exposures Identifier.
   */
  CVE = 'CVE',
  
  /**
   * GitHub Security Advisory ID.
   */
  GHSA = 'GHSA'
}

/**
 * The connection type for SecurityAdvisory.
 */
export interface SecurityAdvisoryConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<SecurityAdvisoryEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<SecurityAdvisory | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface SecurityAdvisoryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: SecurityAdvisory;
}

/**
 * A GitHub Security Advisory
 */
export interface SecurityAdvisory extends Node {
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  
  /**
   * This is a long plaintext description of the advisory
   */
  description: string;
  
  /**
   * The GitHub Security Advisory ID
   */
  ghsaId: string;
  id: string;
  
  /**
   * A list of identifiers for this advisory
   */
  identifiers: Array<SecurityAdvisoryIdentifier>;
  
  /**
   * When the advisory was published
   */
  publishedAt: DateTime;
  
  /**
   * A list of references for this advisory
   */
  references: Array<SecurityAdvisoryReference>;
  
  /**
   * The severity of the advisory
   */
  severity: SecurityAdvisorySeverity;
  
  /**
   * A short plaintext summary of the advisory
   */
  summary: string;
  
  /**
   * When the advisory was last updated
   */
  updatedAt: DateTime;
  
  /**
   * Vulnerabilities associated with this Advisory
   */
  vulnerabilities: SecurityVulnerabilityConnection;
  
  /**
   * When the advisory was withdrawn, if it has been withdrawn
   */
  withdrawnAt?: DateTime;
}

/**
 * A GitHub Security Advisory Identifier
 */
export interface SecurityAdvisoryIdentifier {
  
  /**
   * The identifier type, e.g. GHSA, CVE
   */
  type: string;
  
  /**
   * The identifier
   */
  value: string;
}

/**
 * A GitHub Security Advisory Reference
 */
export interface SecurityAdvisoryReference {
  
  /**
   * A publicly accessible reference
   */
  url: URI;
}

/**
 * Severity of the vulnerability.
 */
export enum SecurityAdvisorySeverity {
  
  /**
   * Low.
   */
  LOW = 'LOW',
  
  /**
   * Moderate.
   */
  MODERATE = 'MODERATE',
  
  /**
   * High.
   */
  HIGH = 'HIGH',
  
  /**
   * Critical.
   */
  CRITICAL = 'CRITICAL'
}

/**
 * Ordering options for security vulnerability connections
 */
export interface SecurityVulnerabilityOrder {
  
  /**
   * The field to order security vulnerabilities by.
   */
  field: SecurityVulnerabilityOrderField;
  
  /**
   * The ordering direction.
   */
  direction: OrderDirection;
}

/**
 * Properties by which security vulnerability connections can be ordered.
 */
export enum SecurityVulnerabilityOrderField {
  
  /**
   * Order vulnerability by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The possible ecosystems of a security vulnerability's package.
 */
export enum SecurityAdvisoryEcosystem {
  
  /**
   * Ruby gems hosted at RubyGems.org
   */
  RUBYGEMS = 'RUBYGEMS',
  
  /**
   * JavaScript packages hosted at npmjs.com
   */
  NPM = 'NPM',
  
  /**
   * Python packages hosted at PyPI.org
   */
  PIP = 'PIP',
  
  /**
   * Java artifacts hosted at the Maven central repository
   */
  MAVEN = 'MAVEN',
  
  /**
   * .NET packages hosted at the NuGet Gallery
   */
  NUGET = 'NUGET'
}

/**
 * The connection type for SecurityVulnerability.
 */
export interface SecurityVulnerabilityConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<SecurityVulnerabilityEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<SecurityVulnerability | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface SecurityVulnerabilityEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: SecurityVulnerability;
}

/**
 * An individual vulnerability within an Advisory
 */
export interface SecurityVulnerability {
  
  /**
   * The Advisory associated with this Vulnerability
   */
  advisory: SecurityAdvisory;
  
  /**
   * The first version containing a fix for the vulnerability
   */
  firstPatchedVersion?: SecurityAdvisoryPackageVersion;
  
  /**
   * A description of the vulnerable package
   */
  package: SecurityAdvisoryPackage;
  
  /**
   * The severity of the vulnerability within this package
   */
  severity: SecurityAdvisorySeverity;
  
  /**
   * When the vulnerability was last updated
   */
  updatedAt: DateTime;
  
  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   */
  vulnerableVersionRange: string;
}

/**
 * An individual package version
 */
export interface SecurityAdvisoryPackageVersion {
  
  /**
   * The package name or version
   */
  identifier: string;
}

/**
 * An individual package
 */
export interface SecurityAdvisoryPackage {
  
  /**
   * The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
   */
  ecosystem: SecurityAdvisoryEcosystem;
  
  /**
   * The package name
   */
  name: string;
}

/**
 * The root query for implementing GraphQL mutations.
 */
export interface Mutation {
  
  /**
   * Applies a suggested topic to the repository.
   */
  acceptTopicSuggestion?: AcceptTopicSuggestionPayload;
  
  /**
   * Adds a comment to an Issue or Pull Request.
   */
  addComment?: AddCommentPayload;
  
  /**
   * Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
   */
  addProjectCard?: AddProjectCardPayload;
  
  /**
   * Adds a column to a Project.
   */
  addProjectColumn?: AddProjectColumnPayload;
  
  /**
   * Adds a review to a Pull Request.
   */
  addPullRequestReview?: AddPullRequestReviewPayload;
  
  /**
   * Adds a comment to a review.
   */
  addPullRequestReviewComment?: AddPullRequestReviewCommentPayload;
  
  /**
   * Adds a reaction to a subject.
   */
  addReaction?: AddReactionPayload;
  
  /**
   * Adds a star to a Starrable.
   */
  addStar?: AddStarPayload;
  
  /**
   * Create a new branch protection rule
   */
  createBranchProtectionRule?: CreateBranchProtectionRulePayload;
  
  /**
   * Creates a new project.
   */
  createProject?: CreateProjectPayload;
  
  /**
   * Rejects a suggested topic for the repository.
   */
  declineTopicSuggestion?: DeclineTopicSuggestionPayload;
  
  /**
   * Delete a branch protection rule
   */
  deleteBranchProtectionRule?: DeleteBranchProtectionRulePayload;
  
  /**
   * Deletes a project.
   */
  deleteProject?: DeleteProjectPayload;
  
  /**
   * Deletes a project card.
   */
  deleteProjectCard?: DeleteProjectCardPayload;
  
  /**
   * Deletes a project column.
   */
  deleteProjectColumn?: DeleteProjectColumnPayload;
  
  /**
   * Deletes a pull request review.
   */
  deletePullRequestReview?: DeletePullRequestReviewPayload;
  
  /**
   * Dismisses an approved or rejected pull request review.
   */
  dismissPullRequestReview?: DismissPullRequestReviewPayload;
  
  /**
   * Lock a lockable object
   */
  lockLockable?: LockLockablePayload;
  
  /**
   * Moves a project card to another place.
   */
  moveProjectCard?: MoveProjectCardPayload;
  
  /**
   * Moves a project column to another place.
   */
  moveProjectColumn?: MoveProjectColumnPayload;
  
  /**
   * Removes outside collaborator from all repositories in an organization.
   */
  removeOutsideCollaborator?: RemoveOutsideCollaboratorPayload;
  
  /**
   * Removes a reaction from a subject.
   */
  removeReaction?: RemoveReactionPayload;
  
  /**
   * Removes a star from a Starrable.
   */
  removeStar?: RemoveStarPayload;
  
  /**
   * Set review requests on a pull request.
   */
  requestReviews?: RequestReviewsPayload;
  
  /**
   * Submits a pending pull request review.
   */
  submitPullRequestReview?: SubmitPullRequestReviewPayload;
  
  /**
   * Unlock a lockable object
   */
  unlockLockable?: UnlockLockablePayload;
  
  /**
   * Create a new branch protection rule
   */
  updateBranchProtectionRule?: UpdateBranchProtectionRulePayload;
  
  /**
   * Updates an existing project.
   */
  updateProject?: UpdateProjectPayload;
  
  /**
   * Updates an existing project card.
   */
  updateProjectCard?: UpdateProjectCardPayload;
  
  /**
   * Updates an existing project column.
   */
  updateProjectColumn?: UpdateProjectColumnPayload;
  
  /**
   * Updates the body of a pull request review.
   */
  updatePullRequestReview?: UpdatePullRequestReviewPayload;
  
  /**
   * Updates a pull request review comment.
   */
  updatePullRequestReviewComment?: UpdatePullRequestReviewCommentPayload;
  
  /**
   * Updates the state for subscribable subjects.
   */
  updateSubscription?: UpdateSubscriptionPayload;
  
  /**
   * Replaces the repository's topics with the given topics.
   */
  updateTopics?: UpdateTopicsPayload;
}

/**
 * Autogenerated input type of AcceptTopicSuggestion
 */
export interface AcceptTopicSuggestionInput {
  
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
  
  /**
   * The name of the suggested topic.
   */
  name: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of AcceptTopicSuggestion
 */
export interface AcceptTopicSuggestionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The accepted topic.
   */
  topic?: Topic;
}

/**
 * Autogenerated input type of AddComment
 */
export interface AddCommentInput {
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
  
  /**
   * The contents of the comment.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of AddComment
 */
export interface AddCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The edge from the subject's comment connection.
   */
  commentEdge?: IssueCommentEdge;
  
  /**
   * The subject
   */
  subject?: Node;
  
  /**
   * The edge from the subject's timeline connection.
   */
  timelineEdge?: IssueTimelineItemEdge;
}

/**
 * Autogenerated input type of AddProjectCard
 */
export interface AddProjectCardInput {
  
  /**
   * The Node ID of the ProjectColumn.
   */
  projectColumnId: string;
  
  /**
   * The content of the card. Must be a member of the ProjectCardItem union
   */
  contentId?: string;
  
  /**
   * The note on the card.
   */
  note?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of AddProjectCard
 */
export interface AddProjectCardPayload {
  
  /**
   * The edge from the ProjectColumn's card connection.
   */
  cardEdge?: ProjectCardEdge;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The ProjectColumn
   */
  projectColumn?: ProjectColumn;
}

/**
 * Autogenerated input type of AddProjectColumn
 */
export interface AddProjectColumnInput {
  
  /**
   * The Node ID of the project.
   */
  projectId: string;
  
  /**
   * The name of the column.
   */
  name: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of AddProjectColumn
 */
export interface AddProjectColumnPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The edge from the project's column connection.
   */
  columnEdge?: ProjectColumnEdge;
  
  /**
   * The project
   */
  project?: Project;
}

/**
 * Autogenerated input type of AddPullRequestReview
 */
export interface AddPullRequestReviewInput {
  
  /**
   * The Node ID of the pull request to modify.
   */
  pullRequestId: string;
  
  /**
   * The commit OID the review pertains to.
   */
  commitOID?: GitObjectID;
  
  /**
   * The contents of the review body comment.
   */
  body?: string;
  
  /**
   * The event to perform on the pull request review.
   */
  event?: PullRequestReviewEvent;
  
  /**
   * The review line comments.
   */
  comments?: Array<DraftPullRequestReviewComment | null>;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * The possible events to perform on a pull request review.
 */
export enum PullRequestReviewEvent {
  
  /**
   * Submit general feedback without explicit approval.
   */
  COMMENT = 'COMMENT',
  
  /**
   * Submit feedback and approve merging these changes.
   */
  APPROVE = 'APPROVE',
  
  /**
   * Submit feedback that must be addressed before merging.
   */
  REQUEST_CHANGES = 'REQUEST_CHANGES',
  
  /**
   * Dismiss review so it now longer effects merging.
   */
  DISMISS = 'DISMISS'
}

/**
 * Specifies a review comment to be left with a Pull Request Review.
 */
export interface DraftPullRequestReviewComment {
  
  /**
   * Path to the file being commented on.
   */
  path: string;
  
  /**
   * Position in the file to leave a comment on.
   */
  position: number;
  
  /**
   * Body of the comment to leave.
   */
  body: string;
}

/**
 * Autogenerated return type of AddPullRequestReview
 */
export interface AddPullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The newly created pull request review.
   */
  pullRequestReview?: PullRequestReview;
  
  /**
   * The edge from the pull request's review connection.
   */
  reviewEdge?: PullRequestReviewEdge;
}

/**
 * Autogenerated input type of AddPullRequestReviewComment
 */
export interface AddPullRequestReviewCommentInput {
  
  /**
   * The Node ID of the review to modify.
   */
  pullRequestReviewId: string;
  
  /**
   * The SHA of the commit to comment on.
   */
  commitOID?: GitObjectID;
  
  /**
   * The text of the comment.
   */
  body: string;
  
  /**
   * The relative path of the file to comment on.
   */
  path?: string;
  
  /**
   * The line index in the diff to comment on.
   */
  position?: number;
  
  /**
   * The comment id to reply to.
   */
  inReplyTo?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of AddPullRequestReviewComment
 */
export interface AddPullRequestReviewCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The newly created comment.
   */
  comment?: PullRequestReviewComment;
  
  /**
   * The edge from the review's comment connection.
   */
  commentEdge?: PullRequestReviewCommentEdge;
}

/**
 * Autogenerated input type of AddReaction
 */
export interface AddReactionInput {
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
  
  /**
   * The name of the emoji to react with.
   */
  content: ReactionContent;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of AddReaction
 */
export interface AddReactionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The reaction object.
   */
  reaction?: Reaction;
  
  /**
   * The reactable subject.
   */
  subject?: Reactable;
}

/**
 * Autogenerated input type of AddStar
 */
export interface AddStarInput {
  
  /**
   * The Starrable ID to star.
   */
  starrableId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of AddStar
 */
export interface AddStarPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The starrable.
   */
  starrable?: Starrable;
}

/**
 * Autogenerated input type of CreateBranchProtectionRule
 */
export interface CreateBranchProtectionRuleInput {
  
  /**
   * The global relay id of the repository in which a new branch protection rule should be created in.
   */
  repositoryId: string;
  
  /**
   * The glob-like pattern used to determine matching branches.
   */
  pattern: string;
  
  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews?: boolean;
  
  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number;
  
  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures?: boolean;
  
  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced?: boolean;
  
  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks?: boolean;
  
  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks?: boolean;
  
  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews?: boolean;
  
  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews?: boolean;
  
  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals?: boolean;
  
  /**
   * A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
   */
  reviewDismissalActorIds?: Array<string>;
  
  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes?: boolean;
  
  /**
   * A list of User or Team IDs allowed to push to matching branches.
   */
  pushActorIds?: Array<string>;
  
  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string>;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of CreateBranchProtectionRule
 */
export interface CreateBranchProtectionRulePayload {
  
  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule?: BranchProtectionRule;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of CreateProject
 */
export interface CreateProjectInput {
  
  /**
   * The owner ID to create the project under.
   */
  ownerId: string;
  
  /**
   * The name of project.
   */
  name: string;
  
  /**
   * The description of project.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of CreateProject
 */
export interface CreateProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new project.
   */
  project?: Project;
}

/**
 * Autogenerated input type of DeclineTopicSuggestion
 */
export interface DeclineTopicSuggestionInput {
  
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
  
  /**
   * The name of the suggested topic.
   */
  name: string;
  
  /**
   * The reason why the suggested topic is declined.
   */
  reason: TopicSuggestionDeclineReason;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Reason that the suggested topic is declined.
 */
export enum TopicSuggestionDeclineReason {
  
  /**
   * The suggested topic is not relevant to the repository.
   */
  NOT_RELEVANT = 'NOT_RELEVANT',
  
  /**
   * The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
   */
  TOO_SPECIFIC = 'TOO_SPECIFIC',
  
  /**
   * The viewer does not like the suggested topic.
   */
  PERSONAL_PREFERENCE = 'PERSONAL_PREFERENCE',
  
  /**
   * The suggested topic is too general for the repository.
   */
  TOO_GENERAL = 'TOO_GENERAL'
}

/**
 * Autogenerated return type of DeclineTopicSuggestion
 */
export interface DeclineTopicSuggestionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The declined topic.
   */
  topic?: Topic;
}

/**
 * Autogenerated input type of DeleteBranchProtectionRule
 */
export interface DeleteBranchProtectionRuleInput {
  
  /**
   * The global relay id of the branch protection rule to be deleted.
   */
  branchProtectionRuleId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of DeleteBranchProtectionRule
 */
export interface DeleteBranchProtectionRulePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of DeleteProject
 */
export interface DeleteProjectInput {
  
  /**
   * The Project ID to update.
   */
  projectId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of DeleteProject
 */
export interface DeleteProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The repository or organization the project was removed from.
   */
  owner?: ProjectOwner;
}

/**
 * Autogenerated input type of DeleteProjectCard
 */
export interface DeleteProjectCardInput {
  
  /**
   * The id of the card to delete.
   */
  cardId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of DeleteProjectCard
 */
export interface DeleteProjectCardPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The column the deleted card was in.
   */
  column?: ProjectColumn;
  
  /**
   * The deleted card ID.
   */
  deletedCardId?: string;
}

/**
 * Autogenerated input type of DeleteProjectColumn
 */
export interface DeleteProjectColumnInput {
  
  /**
   * The id of the column to delete.
   */
  columnId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of DeleteProjectColumn
 */
export interface DeleteProjectColumnPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The deleted column ID.
   */
  deletedColumnId?: string;
  
  /**
   * The project the deleted column was in.
   */
  project?: Project;
}

/**
 * Autogenerated input type of DeletePullRequestReview
 */
export interface DeletePullRequestReviewInput {
  
  /**
   * The Node ID of the pull request review to delete.
   */
  pullRequestReviewId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of DeletePullRequestReview
 */
export interface DeletePullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The deleted pull request review.
   */
  pullRequestReview?: PullRequestReview;
}

/**
 * Autogenerated input type of DismissPullRequestReview
 */
export interface DismissPullRequestReviewInput {
  
  /**
   * The Node ID of the pull request review to modify.
   */
  pullRequestReviewId: string;
  
  /**
   * The contents of the pull request review dismissal message.
   */
  message: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of DismissPullRequestReview
 */
export interface DismissPullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The dismissed pull request review.
   */
  pullRequestReview?: PullRequestReview;
}

/**
 * Autogenerated input type of LockLockable
 */
export interface LockLockableInput {
  
  /**
   * ID of the issue or pull request to be locked.
   */
  lockableId: string;
  
  /**
   * A reason for why the issue or pull request will be locked.
   */
  lockReason?: LockReason;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of LockLockable
 */
export interface LockLockablePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The item that was locked.
   */
  lockedRecord?: Lockable;
}

/**
 * Autogenerated input type of MoveProjectCard
 */
export interface MoveProjectCardInput {
  
  /**
   * The id of the card to move.
   */
  cardId: string;
  
  /**
   * The id of the column to move it into.
   */
  columnId: string;
  
  /**
   * Place the new card after the card with this id. Pass null to place it at the top.
   */
  afterCardId?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of MoveProjectCard
 */
export interface MoveProjectCardPayload {
  
  /**
   * The new edge of the moved card.
   */
  cardEdge?: ProjectCardEdge;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of MoveProjectColumn
 */
export interface MoveProjectColumnInput {
  
  /**
   * The id of the column to move.
   */
  columnId: string;
  
  /**
   * Place the new column after the column with this id. Pass null to place it at the front.
   */
  afterColumnId?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of MoveProjectColumn
 */
export interface MoveProjectColumnPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The new edge of the moved column.
   */
  columnEdge?: ProjectColumnEdge;
}

/**
 * Autogenerated input type of RemoveOutsideCollaborator
 */
export interface RemoveOutsideCollaboratorInput {
  
  /**
   * The ID of the outside collaborator to remove.
   */
  userId: string;
  
  /**
   * The ID of the organization to remove the outside collaborator from.
   */
  organizationId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of RemoveOutsideCollaborator
 */
export interface RemoveOutsideCollaboratorPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The user that was removed as an outside collaborator.
   */
  removedUser?: User;
}

/**
 * Autogenerated input type of RemoveReaction
 */
export interface RemoveReactionInput {
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
  
  /**
   * The name of the emoji reaction to remove.
   */
  content: ReactionContent;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of RemoveReaction
 */
export interface RemoveReactionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The reaction object.
   */
  reaction?: Reaction;
  
  /**
   * The reactable subject.
   */
  subject?: Reactable;
}

/**
 * Autogenerated input type of RemoveStar
 */
export interface RemoveStarInput {
  
  /**
   * The Starrable ID to unstar.
   */
  starrableId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of RemoveStar
 */
export interface RemoveStarPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The starrable.
   */
  starrable?: Starrable;
}

/**
 * Autogenerated input type of RequestReviews
 */
export interface RequestReviewsInput {
  
  /**
   * The Node ID of the pull request to modify.
   */
  pullRequestId: string;
  
  /**
   * The Node IDs of the user to request.
   */
  userIds?: Array<string>;
  
  /**
   * The Node IDs of the team to request.
   */
  teamIds?: Array<string>;
  
  /**
   * Add users to the set rather than replace.
   */
  union?: boolean;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of RequestReviews
 */
export interface RequestReviewsPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The pull request that is getting requests.
   */
  pullRequest?: PullRequest;
  
  /**
   * The edge from the pull request to the requested reviewers.
   */
  requestedReviewersEdge?: UserEdge;
}

/**
 * Autogenerated input type of SubmitPullRequestReview
 */
export interface SubmitPullRequestReviewInput {
  
  /**
   * The Pull Request Review ID to submit.
   */
  pullRequestReviewId: string;
  
  /**
   * The event to send to the Pull Request Review.
   */
  event: PullRequestReviewEvent;
  
  /**
   * The text field to set on the Pull Request Review.
   */
  body?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of SubmitPullRequestReview
 */
export interface SubmitPullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The submitted pull request review.
   */
  pullRequestReview?: PullRequestReview;
}

/**
 * Autogenerated input type of UnlockLockable
 */
export interface UnlockLockableInput {
  
  /**
   * ID of the issue or pull request to be unlocked.
   */
  lockableId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UnlockLockable
 */
export interface UnlockLockablePayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The item that was unlocked.
   */
  unlockedRecord?: Lockable;
}

/**
 * Autogenerated input type of UpdateBranchProtectionRule
 */
export interface UpdateBranchProtectionRuleInput {
  
  /**
   * The global relay id of the branch protection rule to be updated.
   */
  branchProtectionRuleId: string;
  
  /**
   * The glob-like pattern used to determine matching branches.
   */
  pattern?: string;
  
  /**
   * Are approving reviews required to update matching branches.
   */
  requiresApprovingReviews?: boolean;
  
  /**
   * Number of approving reviews required to update matching branches.
   */
  requiredApprovingReviewCount?: number;
  
  /**
   * Are commits required to be signed.
   */
  requiresCommitSignatures?: boolean;
  
  /**
   * Can admins overwrite branch protection.
   */
  isAdminEnforced?: boolean;
  
  /**
   * Are status checks required to update matching branches.
   */
  requiresStatusChecks?: boolean;
  
  /**
   * Are branches required to be up to date before merging.
   */
  requiresStrictStatusChecks?: boolean;
  
  /**
   * Are reviews from code owners required to update matching branches.
   */
  requiresCodeOwnerReviews?: boolean;
  
  /**
   * Will new commits pushed to matching branches dismiss pull request review approvals.
   */
  dismissesStaleReviews?: boolean;
  
  /**
   * Is dismissal of pull request reviews restricted.
   */
  restrictsReviewDismissals?: boolean;
  
  /**
   * A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
   */
  reviewDismissalActorIds?: Array<string>;
  
  /**
   * Is pushing to matching branches restricted.
   */
  restrictsPushes?: boolean;
  
  /**
   * A list of User or Team IDs allowed to push to matching branches.
   */
  pushActorIds?: Array<string>;
  
  /**
   * List of required status check contexts that must pass for commits to be accepted to matching branches.
   */
  requiredStatusCheckContexts?: Array<string>;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UpdateBranchProtectionRule
 */
export interface UpdateBranchProtectionRulePayload {
  
  /**
   * The newly created BranchProtectionRule.
   */
  branchProtectionRule?: BranchProtectionRule;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateProject
 */
export interface UpdateProjectInput {
  
  /**
   * The Project ID to update.
   */
  projectId: string;
  
  /**
   * The name of project.
   */
  name?: string;
  
  /**
   * The description of project.
   */
  body?: string;
  
  /**
   * Whether the project is open or closed.
   */
  state?: ProjectState;
  
  /**
   * Whether the project is public or not.
   */
  public?: boolean;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UpdateProject
 */
export interface UpdateProjectPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated project.
   */
  project?: Project;
}

/**
 * Autogenerated input type of UpdateProjectCard
 */
export interface UpdateProjectCardInput {
  
  /**
   * The ProjectCard ID to update.
   */
  projectCardId: string;
  
  /**
   * Whether or not the ProjectCard should be archived
   */
  isArchived?: boolean;
  
  /**
   * The note of ProjectCard.
   */
  note?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UpdateProjectCard
 */
export interface UpdateProjectCardPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated ProjectCard.
   */
  projectCard?: ProjectCard;
}

/**
 * Autogenerated input type of UpdateProjectColumn
 */
export interface UpdateProjectColumnInput {
  
  /**
   * The ProjectColumn ID to update.
   */
  projectColumnId: string;
  
  /**
   * The name of project column.
   */
  name: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UpdateProjectColumn
 */
export interface UpdateProjectColumnPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated project column.
   */
  projectColumn?: ProjectColumn;
}

/**
 * Autogenerated input type of UpdatePullRequestReview
 */
export interface UpdatePullRequestReviewInput {
  
  /**
   * The Node ID of the pull request review to modify.
   */
  pullRequestReviewId: string;
  
  /**
   * The contents of the pull request review body.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UpdatePullRequestReview
 */
export interface UpdatePullRequestReviewPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated pull request review.
   */
  pullRequestReview?: PullRequestReview;
}

/**
 * Autogenerated input type of UpdatePullRequestReviewComment
 */
export interface UpdatePullRequestReviewCommentInput {
  
  /**
   * The Node ID of the comment to modify.
   */
  pullRequestReviewCommentId: string;
  
  /**
   * The text of the comment.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UpdatePullRequestReviewComment
 */
export interface UpdatePullRequestReviewCommentPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The updated comment.
   */
  pullRequestReviewComment?: PullRequestReviewComment;
}

/**
 * Autogenerated input type of UpdateSubscription
 */
export interface UpdateSubscriptionInput {
  
  /**
   * The Node ID of the subscribable object to modify.
   */
  subscribableId: string;
  
  /**
   * The new state of the subscription.
   */
  state: SubscriptionState;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UpdateSubscription
 */
export interface UpdateSubscriptionPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * The input subscribable entity.
   */
  subscribable?: Subscribable;
}

/**
 * Autogenerated input type of UpdateTopics
 */
export interface UpdateTopicsInput {
  
  /**
   * The Node ID of the repository.
   */
  repositoryId: string;
  
  /**
   * An array of topic names.
   */
  topicNames: Array<string>;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated return type of UpdateTopics
 */
export interface UpdateTopicsPayload {
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
  
  /**
   * Names of the provided topics that are not valid.
   */
  invalidTopicNames?: Array<string>;
  
  /**
   * The updated repository.
   */
  repository?: Repository;
}

/**
 * Autogenerated input type of AcceptBusinessMemberInvitation
 */
export interface AcceptBusinessMemberInvitationInput {
  
  /**
   * The id of the invitation being accepted
   */
  invitationId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Represents a 'added_to_project' event on a given issue or pull request.
 */
export interface AddedToProjectEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * An edge in a connection.
 */
export interface AppEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: App;
}

/**
 * Represents a 'base_ref_changed' event on a given issue or pull request.
 */
export interface BaseRefChangedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a Git blob.
 */
export interface Blob extends Node, GitObject {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * Byte size of Blob object
   */
  byteSize: number;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: URI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: URI;
  id: string;
  
  /**
   * Indicates whether the Blob is binary or text
   */
  isBinary: boolean;
  
  /**
   * Indicates whether the contents is truncated
   */
  isTruncated: boolean;
  
  /**
   * The Git object ID
   */
  oid: GitObjectID;
  
  /**
   * The Repository the Git object belongs to
   */
  repository: Repository;
  
  /**
   * UTF8 text data or null if the Blob is binary
   */
  text?: string;
}

/**
 * A special type of user which takes actions on behalf of GitHub Apps.
 */
export interface Bot extends Node, Actor, UniformResourceLocatable {
  
  /**
   * A URL pointing to the GitHub App's public avatar.
   */
  avatarUrl: URI;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
  
  /**
   * The username of the actor.
   */
  login: string;
  
  /**
   * The HTTP path for this bot
   */
  resourcePath: URI;
  
  /**
   * Identifies the date and time when the object was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The HTTP URL for this bot
   */
  url: URI;
}

/**
 * Autogenerated input type of CancelBusinessAdminInvitation
 */
export interface CancelBusinessAdminInvitationInput {
  
  /**
   * The Node ID of the pending business admin invitation.
   */
  invitationId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of CancelBusinessBillingManagerInvitation
 */
export interface CancelBusinessBillingManagerInvitationInput {
  
  /**
   * The Node ID of the pending business billing manager invitation.
   */
  invitationId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Types that can be inside Collection Items.
 */
export type CollectionItemContent = Repository | Organization | User;

/** Use this to resolve union type CollectionItemContent */
export type PossibleCollectionItemContentTypeNames =
'Repository' |
'Organization' |
'User';

export interface CollectionItemContentNameMap {
  CollectionItemContent: CollectionItemContent;
  Repository: Repository;
  Organization: Organization;
  User: User;
}

/**
 * Represents a 'comment_deleted' event on a given issue or pull request.
 */
export interface CommentDeletedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * A content attachment
 */
export interface ContentAttachment {
  
  /**
   * The body text of the content attachment. This parameter supports markdown.
   */
  body: string;
  
  /**
   * The content reference that the content attachment is attached to.
   */
  contentReference: ContentReference;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId: number;
  id: string;
  
  /**
   * The title of the content attachment.
   */
  title: string;
}

/**
 * A content reference
 */
export interface ContentReference {
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId: number;
  id: string;
  
  /**
   * The reference of the content reference.
   */
  reference: string;
}

/**
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.
 */
export interface ConvertedNoteToIssueEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Autogenerated input type of CreateContentAttachment
 */
export interface CreateContentAttachmentInput {
  
  /**
   * The node ID of the content_reference.
   */
  contentReferenceId: string;
  
  /**
   * The title of the content attachment.
   */
  title: string;
  
  /**
   * The body of the content attachment, which may contain markdown.
   */
  body: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * The connection type for CreatedPullRequestContribution.
 */
export interface CreatedPullRequestContributionConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<CreatedPullRequestContributionEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<CreatedPullRequestContribution | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface CreatedPullRequestContributionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: CreatedPullRequestContribution;
}

/**
 * The possible default permissions for repositories.
 */
export enum DefaultRepositoryPermissionField {
  
  /**
   * No access
   */
  NONE = 'NONE',
  
  /**
   * Can read repos by default
   */
  READ = 'READ',
  
  /**
   * Can read and write repos by default
   */
  WRITE = 'WRITE',
  
  /**
   * Can read, write, and administrate repos by default
   */
  ADMIN = 'ADMIN'
}

/**
 * Autogenerated input type of DeleteIssue
 */
export interface DeleteIssueInput {
  
  /**
   * The ID of the issue to delete.
   */
  issueId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Represents a GPG signature on a Commit or Tag.
 */
export interface GpgSignature extends GitSignature {
  
  /**
   * Email used to sign this object.
   */
  email: string;
  
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;
  
  /**
   * Hex-encoded ID of the key that signed this object.
   */
  keyId?: string;
  
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;
  
  /**
   * ASCII-armored signature header from object.
   */
  signature: string;
  
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: User;
  
  /**
   * The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: GitSignatureState;
  
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Autogenerated input type of InviteBusinessAdmin
 */
export interface InviteBusinessAdminInput {
  
  /**
   * The ID of the business to which you want to invite an administrator.
   */
  businessId: string;
  
  /**
   * The login of a user to invite as an administrator.
   */
  invitee?: string;
  
  /**
   * The email of the person to invite as an administrator.
   */
  email?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of InviteBusinessBillingManager
 */
export interface InviteBusinessBillingManagerInput {
  
  /**
   * The ID of the business to which you want to invite a billing manager.
   */
  businessId: string;
  
  /**
   * The login of a user to invite as a billing manager.
   */
  invitee?: string;
  
  /**
   * The email of the person to invite as a billing manager.
   */
  email?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * The possible PubSub channels for an issue.
 */
export enum IssuePubSubTopic {
  
  /**
   * The channel ID for observing issue updates.
   */
  UPDATED = 'UPDATED',
  
  /**
   * The channel ID for marking an issue as read.
   */
  MARKASREAD = 'MARKASREAD',
  
  /**
   * The channel ID for updating items on the issue timeline.
   */
  TIMELINE = 'TIMELINE',
  
  /**
   * The channel ID for observing issue state updates.
   */
  STATE = 'STATE'
}

/**
 * An item in an issue timeline
 */
export type IssueTimelineItems =
IssueComment |
CrossReferencedEvent |
AddedToProjectEvent |
AssignedEvent |
ClosedEvent |
CommentDeletedEvent |
ConvertedNoteToIssueEvent |
DemilestonedEvent |
LabeledEvent |
LockedEvent |
MentionedEvent |
MilestonedEvent |
MovedColumnsInProjectEvent |
PinnedEvent |
ReferencedEvent |
RemovedFromProjectEvent |
RenamedTitleEvent |
ReopenedEvent |
SubscribedEvent |
TransferredEvent |
UnassignedEvent |
UnlabeledEvent |
UnlockedEvent |
UnpinnedEvent |
UnsubscribedEvent;

/** Use this to resolve union type IssueTimelineItems */
export type PossibleIssueTimelineItemsTypeNames =
'IssueComment' |
'CrossReferencedEvent' |
'AddedToProjectEvent' |
'AssignedEvent' |
'ClosedEvent' |
'CommentDeletedEvent' |
'ConvertedNoteToIssueEvent' |
'DemilestonedEvent' |
'LabeledEvent' |
'LockedEvent' |
'MentionedEvent' |
'MilestonedEvent' |
'MovedColumnsInProjectEvent' |
'PinnedEvent' |
'ReferencedEvent' |
'RemovedFromProjectEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnpinnedEvent' |
'UnsubscribedEvent';

export interface IssueTimelineItemsNameMap {
  IssueTimelineItems: IssueTimelineItems;
  IssueComment: IssueComment;
  CrossReferencedEvent: CrossReferencedEvent;
  AddedToProjectEvent: AddedToProjectEvent;
  AssignedEvent: AssignedEvent;
  ClosedEvent: ClosedEvent;
  CommentDeletedEvent: CommentDeletedEvent;
  ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent;
  DemilestonedEvent: DemilestonedEvent;
  LabeledEvent: LabeledEvent;
  LockedEvent: LockedEvent;
  MentionedEvent: MentionedEvent;
  MilestonedEvent: MilestonedEvent;
  MovedColumnsInProjectEvent: MovedColumnsInProjectEvent;
  PinnedEvent: PinnedEvent;
  ReferencedEvent: ReferencedEvent;
  RemovedFromProjectEvent: RemovedFromProjectEvent;
  RenamedTitleEvent: RenamedTitleEvent;
  ReopenedEvent: ReopenedEvent;
  SubscribedEvent: SubscribedEvent;
  TransferredEvent: TransferredEvent;
  UnassignedEvent: UnassignedEvent;
  UnlabeledEvent: UnlabeledEvent;
  UnlockedEvent: UnlockedEvent;
  UnpinnedEvent: UnpinnedEvent;
  UnsubscribedEvent: UnsubscribedEvent;
}

/**
 * Represents a 'mentioned' event on a given issue or pull request.
 */
export interface MentionedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.
 */
export interface MovedColumnsInProjectEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents a 'pinned' event on a given issue or pull request.
 */
export interface PinnedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the issue associated with the event.
   */
  issue: Issue;
}

/**
 * Represents a 'removed_from_project' event on a given issue or pull request.
 */
export interface RemovedFromProjectEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  
  /**
   * Identifies the primary key from the database.
   */
  databaseId?: number;
  id: string;
}

/**
 * Represents an 'unpinned' event on a given issue or pull request.
 */
export interface UnpinnedEvent extends Node {
  
  /**
   * Identifies the actor who performed the event.
   */
  actor?: Actor;
  
  /**
   * Identifies the date and time when the object was created.
   */
  createdAt: DateTime;
  id: string;
  
  /**
   * Identifies the issue associated with the event.
   */
  issue: Issue;
}

/**
 * An edge in a connection.
 */
export interface IssueTimelineItemsEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: IssueTimelineItems;
}

/**
 * The possible item types found in a timeline.
 */
export enum IssueTimelineItemsItemType {
  
  /**
   * Represents a comment on an Issue.
   */
  ISSUE_COMMENT = 'ISSUE_COMMENT',
  
  /**
   * Represents a mention made by one issue or pull request to another.
   */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',
  
  /**
   * Represents a 'added_to_project' event on a given issue or pull request.
   */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',
  
  /**
   * Represents an 'assigned' event on any assignable object.
   */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',
  
  /**
   * Represents a 'closed' event on any `Closable`.
   */
  CLOSED_EVENT = 'CLOSED_EVENT',
  
  /**
   * Represents a 'comment_deleted' event on a given issue or pull request.
   */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',
  
  /**
   * Represents a 'converted_note_to_issue' event on a given issue or pull request.
   */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  
  /**
   * Represents a 'demilestoned' event on a given issue or pull request.
   */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',
  
  /**
   * Represents a 'labeled' event on a given issue or pull request.
   */
  LABELED_EVENT = 'LABELED_EVENT',
  
  /**
   * Represents a 'locked' event on a given issue or pull request.
   */
  LOCKED_EVENT = 'LOCKED_EVENT',
  
  /**
   * Represents a 'mentioned' event on a given issue or pull request.
   */
  MENTIONED_EVENT = 'MENTIONED_EVENT',
  
  /**
   * Represents a 'milestoned' event on a given issue or pull request.
   */
  MILESTONED_EVENT = 'MILESTONED_EVENT',
  
  /**
   * Represents a 'moved_columns_in_project' event on a given issue or pull request.
   */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  
  /**
   * Represents a 'pinned' event on a given issue or pull request.
   */
  PINNED_EVENT = 'PINNED_EVENT',
  
  /**
   * Represents a 'referenced' event on a given `ReferencedSubject`.
   */
  REFERENCED_EVENT = 'REFERENCED_EVENT',
  
  /**
   * Represents a 'removed_from_project' event on a given issue or pull request.
   */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',
  
  /**
   * Represents a 'renamed' event on a given issue or pull request
   */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',
  
  /**
   * Represents a 'reopened' event on any `Closable`.
   */
  REOPENED_EVENT = 'REOPENED_EVENT',
  
  /**
   * Represents a 'subscribed' event on a given `Subscribable`.
   */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',
  
  /**
   * Represents a 'transferred' event on a given issue or pull request.
   */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',
  
  /**
   * Represents an 'unassigned' event on any assignable object.
   */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',
  
  /**
   * Represents an 'unlabeled' event on a given issue or pull request.
   */
  UNLABELED_EVENT = 'UNLABELED_EVENT',
  
  /**
   * Represents an 'unlocked' event on a given issue or pull request.
   */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',
  
  /**
   * Represents an 'unpinned' event on a given issue or pull request.
   */
  UNPINNED_EVENT = 'UNPINNED_EVENT',
  
  /**
   * Represents an 'unsubscribed' event on a given `Subscribable`.
   */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT'
}

/**
 * Autogenerated input type of MinimizeComment
 */
export interface MinimizeCommentInput {
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
  
  /**
   * The classification of comment
   */
  classifier: ReportedContentClassifiers;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * The reasons a piece of content can be reported or minimized.
 */
export enum ReportedContentClassifiers {
  
  /**
   * A spammy piece of content
   */
  SPAM = 'SPAM',
  
  /**
   * An abusive or harassing piece of content
   */
  ABUSE = 'ABUSE',
  
  /**
   * An irrelevant piece of content
   */
  OFF_TOPIC = 'OFF_TOPIC',
  
  /**
   * An outdated piece of content
   */
  OUTDATED = 'OUTDATED',
  
  /**
   * The content has been resolved
   */
  RESOLVED = 'RESOLVED'
}

/**
 * Autogenerated input type of PinIssue
 */
export interface PinIssueInput {
  
  /**
   * The ID of the issue to be pinned
   */
  issueId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Ways in which lists of issues can be ordered upon return.
 */
export interface PullRequestOrder {
  
  /**
   * The field in which to order pull requests by.
   */
  field: PullRequestOrderField;
  
  /**
   * The direction in which to order pull requests by the specified field.
   */
  direction: OrderDirection;
}

/**
 * Properties by which pull_requests connections can be ordered.
 */
export enum PullRequestOrderField {
  
  /**
   * Order pull_requests by creation time
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Order pull_requests by update time
   */
  UPDATED_AT = 'UPDATED_AT'
}

/**
 * The possible PubSub channels for a pull request.
 */
export enum PullRequestPubSubTopic {
  
  /**
   * The channel ID for observing pull request updates.
   */
  UPDATED = 'UPDATED',
  
  /**
   * The channel ID for marking an pull request as read.
   */
  MARKASREAD = 'MARKASREAD',
  
  /**
   * The channel ID for observing head ref updates.
   */
  HEAD_REF = 'HEAD_REF',
  
  /**
   * The channel ID for updating items on the pull request timeline.
   */
  TIMELINE = 'TIMELINE',
  
  /**
   * The channel ID for observing pull request state updates.
   */
  STATE = 'STATE'
}

/**
 * An edge in a connection.
 */
export interface PullRequestReviewThreadEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PullRequestReviewThread;
}

/**
 * An item in a pull request timeline
 */
export type PullRequestTimelineItems =
PullRequestCommit |
PullRequestReview |
PullRequestReviewThread |
BaseRefChangedEvent |
BaseRefForcePushedEvent |
DeployedEvent |
DeploymentEnvironmentChangedEvent |
HeadRefDeletedEvent |
HeadRefForcePushedEvent |
HeadRefRestoredEvent |
MergedEvent |
ReviewDismissedEvent |
ReviewRequestedEvent |
ReviewRequestRemovedEvent |
IssueComment |
CrossReferencedEvent |
AddedToProjectEvent |
AssignedEvent |
ClosedEvent |
CommentDeletedEvent |
ConvertedNoteToIssueEvent |
DemilestonedEvent |
LabeledEvent |
LockedEvent |
MentionedEvent |
MilestonedEvent |
MovedColumnsInProjectEvent |
PinnedEvent |
ReferencedEvent |
RemovedFromProjectEvent |
RenamedTitleEvent |
ReopenedEvent |
SubscribedEvent |
TransferredEvent |
UnassignedEvent |
UnlabeledEvent |
UnlockedEvent |
UnpinnedEvent |
UnsubscribedEvent;

/** Use this to resolve union type PullRequestTimelineItems */
export type PossiblePullRequestTimelineItemsTypeNames =
'PullRequestCommit' |
'PullRequestReview' |
'PullRequestReviewThread' |
'BaseRefChangedEvent' |
'BaseRefForcePushedEvent' |
'DeployedEvent' |
'DeploymentEnvironmentChangedEvent' |
'HeadRefDeletedEvent' |
'HeadRefForcePushedEvent' |
'HeadRefRestoredEvent' |
'MergedEvent' |
'ReviewDismissedEvent' |
'ReviewRequestedEvent' |
'ReviewRequestRemovedEvent' |
'IssueComment' |
'CrossReferencedEvent' |
'AddedToProjectEvent' |
'AssignedEvent' |
'ClosedEvent' |
'CommentDeletedEvent' |
'ConvertedNoteToIssueEvent' |
'DemilestonedEvent' |
'LabeledEvent' |
'LockedEvent' |
'MentionedEvent' |
'MilestonedEvent' |
'MovedColumnsInProjectEvent' |
'PinnedEvent' |
'ReferencedEvent' |
'RemovedFromProjectEvent' |
'RenamedTitleEvent' |
'ReopenedEvent' |
'SubscribedEvent' |
'TransferredEvent' |
'UnassignedEvent' |
'UnlabeledEvent' |
'UnlockedEvent' |
'UnpinnedEvent' |
'UnsubscribedEvent';

export interface PullRequestTimelineItemsNameMap {
  PullRequestTimelineItems: PullRequestTimelineItems;
  PullRequestCommit: PullRequestCommit;
  PullRequestReview: PullRequestReview;
  PullRequestReviewThread: PullRequestReviewThread;
  BaseRefChangedEvent: BaseRefChangedEvent;
  BaseRefForcePushedEvent: BaseRefForcePushedEvent;
  DeployedEvent: DeployedEvent;
  DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent;
  HeadRefDeletedEvent: HeadRefDeletedEvent;
  HeadRefForcePushedEvent: HeadRefForcePushedEvent;
  HeadRefRestoredEvent: HeadRefRestoredEvent;
  MergedEvent: MergedEvent;
  ReviewDismissedEvent: ReviewDismissedEvent;
  ReviewRequestedEvent: ReviewRequestedEvent;
  ReviewRequestRemovedEvent: ReviewRequestRemovedEvent;
  IssueComment: IssueComment;
  CrossReferencedEvent: CrossReferencedEvent;
  AddedToProjectEvent: AddedToProjectEvent;
  AssignedEvent: AssignedEvent;
  ClosedEvent: ClosedEvent;
  CommentDeletedEvent: CommentDeletedEvent;
  ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent;
  DemilestonedEvent: DemilestonedEvent;
  LabeledEvent: LabeledEvent;
  LockedEvent: LockedEvent;
  MentionedEvent: MentionedEvent;
  MilestonedEvent: MilestonedEvent;
  MovedColumnsInProjectEvent: MovedColumnsInProjectEvent;
  PinnedEvent: PinnedEvent;
  ReferencedEvent: ReferencedEvent;
  RemovedFromProjectEvent: RemovedFromProjectEvent;
  RenamedTitleEvent: RenamedTitleEvent;
  ReopenedEvent: ReopenedEvent;
  SubscribedEvent: SubscribedEvent;
  TransferredEvent: TransferredEvent;
  UnassignedEvent: UnassignedEvent;
  UnlabeledEvent: UnlabeledEvent;
  UnlockedEvent: UnlockedEvent;
  UnpinnedEvent: UnpinnedEvent;
  UnsubscribedEvent: UnsubscribedEvent;
}

/**
 * An edge in a connection.
 */
export interface PullRequestTimelineItemsEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: PullRequestTimelineItems;
}

/**
 * The possible item types found in a timeline.
 */
export enum PullRequestTimelineItemsItemType {
  
  /**
   * Represents a Git commit part of a pull request.
   */
  PULL_REQUEST_COMMIT = 'PULL_REQUEST_COMMIT',
  
  /**
   * Represents a commit comment thread part of a pull request.
   */
  PULL_REQUEST_COMMIT_COMMENT_THREAD = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',
  
  /**
   * A review object for a given pull request.
   */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',
  
  /**
   * A threaded list of comments for a given pull request.
   */
  PULL_REQUEST_REVIEW_THREAD = 'PULL_REQUEST_REVIEW_THREAD',
  
  /**
   * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
   */
  PULL_REQUEST_REVISION_MARKER = 'PULL_REQUEST_REVISION_MARKER',
  
  /**
   * Represents a 'base_ref_changed' event on a given issue or pull request.
   */
  BASE_REF_CHANGED_EVENT = 'BASE_REF_CHANGED_EVENT',
  
  /**
   * Represents a 'base_ref_force_pushed' event on a given pull request.
   */
  BASE_REF_FORCE_PUSHED_EVENT = 'BASE_REF_FORCE_PUSHED_EVENT',
  
  /**
   * Represents a 'deployed' event on a given pull request.
   */
  DEPLOYED_EVENT = 'DEPLOYED_EVENT',
  
  /**
   * Represents a 'deployment_environment_changed' event on a given pull request.
   */
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',
  
  /**
   * Represents a 'head_ref_deleted' event on a given pull request.
   */
  HEAD_REF_DELETED_EVENT = 'HEAD_REF_DELETED_EVENT',
  
  /**
   * Represents a 'head_ref_force_pushed' event on a given pull request.
   */
  HEAD_REF_FORCE_PUSHED_EVENT = 'HEAD_REF_FORCE_PUSHED_EVENT',
  
  /**
   * Represents a 'head_ref_restored' event on a given pull request.
   */
  HEAD_REF_RESTORED_EVENT = 'HEAD_REF_RESTORED_EVENT',
  
  /**
   * Represents a 'merged' event on a given pull request.
   */
  MERGED_EVENT = 'MERGED_EVENT',
  
  /**
   * Represents a 'review_dismissed' event on a given issue or pull request.
   */
  REVIEW_DISMISSED_EVENT = 'REVIEW_DISMISSED_EVENT',
  
  /**
   * Represents an 'review_requested' event on a given pull request.
   */
  REVIEW_REQUESTED_EVENT = 'REVIEW_REQUESTED_EVENT',
  
  /**
   * Represents an 'review_request_removed' event on a given pull request.
   */
  REVIEW_REQUEST_REMOVED_EVENT = 'REVIEW_REQUEST_REMOVED_EVENT',
  
  /**
   * Represents a comment on an Issue.
   */
  ISSUE_COMMENT = 'ISSUE_COMMENT',
  
  /**
   * Represents a mention made by one issue or pull request to another.
   */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',
  
  /**
   * Represents a 'added_to_project' event on a given issue or pull request.
   */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',
  
  /**
   * Represents an 'assigned' event on any assignable object.
   */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',
  
  /**
   * Represents a 'closed' event on any `Closable`.
   */
  CLOSED_EVENT = 'CLOSED_EVENT',
  
  /**
   * Represents a 'comment_deleted' event on a given issue or pull request.
   */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',
  
  /**
   * Represents a 'converted_note_to_issue' event on a given issue or pull request.
   */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  
  /**
   * Represents a 'demilestoned' event on a given issue or pull request.
   */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',
  
  /**
   * Represents a 'labeled' event on a given issue or pull request.
   */
  LABELED_EVENT = 'LABELED_EVENT',
  
  /**
   * Represents a 'locked' event on a given issue or pull request.
   */
  LOCKED_EVENT = 'LOCKED_EVENT',
  
  /**
   * Represents a 'mentioned' event on a given issue or pull request.
   */
  MENTIONED_EVENT = 'MENTIONED_EVENT',
  
  /**
   * Represents a 'milestoned' event on a given issue or pull request.
   */
  MILESTONED_EVENT = 'MILESTONED_EVENT',
  
  /**
   * Represents a 'moved_columns_in_project' event on a given issue or pull request.
   */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  
  /**
   * Represents a 'pinned' event on a given issue or pull request.
   */
  PINNED_EVENT = 'PINNED_EVENT',
  
  /**
   * Represents a 'referenced' event on a given `ReferencedSubject`.
   */
  REFERENCED_EVENT = 'REFERENCED_EVENT',
  
  /**
   * Represents a 'removed_from_project' event on a given issue or pull request.
   */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',
  
  /**
   * Represents a 'renamed' event on a given issue or pull request
   */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',
  
  /**
   * Represents a 'reopened' event on any `Closable`.
   */
  REOPENED_EVENT = 'REOPENED_EVENT',
  
  /**
   * Represents a 'subscribed' event on a given `Subscribable`.
   */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',
  
  /**
   * Represents a 'transferred' event on a given issue or pull request.
   */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',
  
  /**
   * Represents an 'unassigned' event on any assignable object.
   */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',
  
  /**
   * Represents an 'unlabeled' event on a given issue or pull request.
   */
  UNLABELED_EVENT = 'UNLABELED_EVENT',
  
  /**
   * Represents an 'unlocked' event on a given issue or pull request.
   */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',
  
  /**
   * Represents an 'unpinned' event on a given issue or pull request.
   */
  UNPINNED_EVENT = 'UNPINNED_EVENT',
  
  /**
   * Represents an 'unsubscribed' event on a given `Subscribable`.
   */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT'
}

/**
 * Autogenerated input type of RemoveBusinessAdmin
 */
export interface RemoveBusinessAdminInput {
  
  /**
   * The Business ID to update.
   */
  businessId: string;
  
  /**
   * The login of the user to add as an admin.
   */
  login: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of RemoveBusinessBillingManager
 */
export interface RemoveBusinessBillingManagerInput {
  
  /**
   * The Business ID to update.
   */
  businessId: string;
  
  /**
   * The login of the user to add as a billing manager.
   */
  login: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * The affiliation type between collaborator and repository.
 */
export enum RepositoryCollaboratorAffiliation {
  
  /**
   * All collaborators of the repository.
   */
  ALL = 'ALL',
  
  /**
   * All outside collaborators of an organization-owned repository.
   */
  OUTSIDE = 'OUTSIDE'
}

/**
 * An invitation for a user to be added to a repository.
 */
export interface RepositoryInvitation extends Node {
  id: string;
  
  /**
   * The user who received the invitation.
   */
  invitee: User;
  
  /**
   * The user who created the invitation.
   */
  inviter: User;
  
  /**
   * The permission granted on this repository by this invitation.
   */
  permission: RepositoryPermission;
  
  /**
   * The Repository the user is invited to.
   */
  repository?: RepositoryInfo;
}

/**
 * An edge in a connection.
 */
export interface RepositoryInvitationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: RepositoryInvitation;
}

/**
 * Autogenerated input type of ResolveReviewThread
 */
export interface ResolveReviewThreadInput {
  
  /**
   * The ID of the thread to resolve
   */
  threadId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Represents an S/MIME signature on a Commit or Tag.
 */
export interface SmimeSignature extends GitSignature {
  
  /**
   * Email used to sign this object.
   */
  email: string;
  
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;
  
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;
  
  /**
   * ASCII-armored signature header from object.
   */
  signature: string;
  
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: User;
  
  /**
   * The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: GitSignatureState;
  
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Represents a Git tag.
 */
export interface Tag extends Node, GitObject {
  
  /**
   * An abbreviated version of the Git object ID
   */
  abbreviatedOid: string;
  
  /**
   * The HTTP path for this Git object
   */
  commitResourcePath: URI;
  
  /**
   * The HTTP URL for this Git object
   */
  commitUrl: URI;
  id: string;
  
  /**
   * The Git tag message.
   */
  message?: string;
  
  /**
   * The Git tag name.
   */
  name: string;
  
  /**
   * The Git object ID
   */
  oid: GitObjectID;
  
  /**
   * The Repository the Git object belongs to
   */
  repository: Repository;
  
  /**
   * Details about the tag author.
   */
  tagger?: GitActor;
  
  /**
   * The Git object the tag points to.
   */
  target: GitObject;
}

/**
 * The connection type for Topic.
 */
export interface TopicConnection {
  
  /**
   * A list of edges.
   */
  edges?: Array<TopicEdge | null>;
  
  /**
   * A list of nodes.
   */
  nodes?: Array<Topic | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
  
  /**
   * Identifies the total count of items in the connection.
   */
  totalCount: number;
}

/**
 * An edge in a connection.
 */
export interface TopicEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of the edge.
   */
  node?: Topic;
}

/**
 * Represents an unknown signature on a Commit or Tag.
 */
export interface UnknownSignature extends GitSignature {
  
  /**
   * Email used to sign this object.
   */
  email: string;
  
  /**
   * True if the signature is valid and verified by GitHub.
   */
  isValid: boolean;
  
  /**
   * Payload for GPG signing object. Raw ODB object without the signature header.
   */
  payload: string;
  
  /**
   * ASCII-armored signature header from object.
   */
  signature: string;
  
  /**
   * GitHub user corresponding to the email signing this commit.
   */
  signer?: User;
  
  /**
   * The state of this signature. `VALID` if signature is valid and verified by
   * GitHub, otherwise represents reason why signature is considered invalid.
   */
  state: GitSignatureState;
  
  /**
   * True if the signature was made with GitHub's signing key.
   */
  wasSignedByGitHub: boolean;
}

/**
 * Autogenerated input type of UnminimizeComment
 */
export interface UnminimizeCommentInput {
  
  /**
   * The Node ID of the subject to modify.
   */
  subjectId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UnpinIssue
 */
export interface UnpinIssueInput {
  
  /**
   * The ID of the issue to be unpinned
   */
  issueId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UnresolveReviewThread
 */
export interface UnresolveReviewThreadInput {
  
  /**
   * The ID of the thread to unresolve
   */
  threadId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessAllowPrivateRepositoryForkingSetting
 */
export interface UpdateBusinessAllowPrivateRepositoryForkingSettingInput {
  
  /**
   * The ID of the business on which to set the allow private repository forking setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessDefaultRepositoryPermissionSetting
 */
export interface UpdateBusinessDefaultRepositoryPermissionSettingInput {
  
  /**
   * The ID of the business on which to set the default repository permission setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessMembersCanChangeRepositoryVisibilitySetting
 */
export interface UpdateBusinessMembersCanChangeRepositoryVisibilitySettingInput {
  
  /**
   * The ID of the business on which to set the members can change repository visibility setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessMembersCanCreateRepositoriesSetting
 */
export interface UpdateBusinessMembersCanCreateRepositoriesSettingInput {
  
  /**
   * The ID of the business on which to set the members can create repositories setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessMembersCanDeleteIssuesSetting
 */
export interface UpdateBusinessMembersCanDeleteIssuesSettingInput {
  
  /**
   * The ID of the business on which to set the members can delete issues setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessMembersCanDeleteRepositoriesSetting
 */
export interface UpdateBusinessMembersCanDeleteRepositoriesSettingInput {
  
  /**
   * The ID of the business on which to set the members can delete repositories setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessMembersCanInviteCollaboratorsSetting
 */
export interface UpdateBusinessMembersCanInviteCollaboratorsSettingInput {
  
  /**
   * The ID of the business on which to set the members can invite collaborators setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessMembersCanUpdateProtectedBranchesSetting
 */
export interface UpdateBusinessMembersCanUpdateProtectedBranchesSettingInput {
  
  /**
   * The ID of the business on which to set the members can update protected branches setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessOrganizationProjectsSetting
 */
export interface UpdateBusinessOrganizationProjectsSettingInput {
  
  /**
   * The ID of the business on which to set the organization projects setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessProfile
 */
export interface UpdateBusinessProfileInput {
  
  /**
   * The Business ID to update.
   */
  businessId: string;
  
  /**
   * The name of business.
   */
  name?: string;
  
  /**
   * The description of the business.
   */
  description?: string;
  
  /**
   * The URL of the business's website
   */
  websiteUrl?: string;
  
  /**
   * The location of the business
   */
  location?: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessRepositoryProjectsSetting
 */
export interface UpdateBusinessRepositoryProjectsSettingInput {
  
  /**
   * The ID of the business on which to set the repository projects setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessTeamDiscussionsSetting
 */
export interface UpdateBusinessTeamDiscussionsSettingInput {
  
  /**
   * The ID of the business on which to set the team discussions setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/**
 * Autogenerated input type of UpdateBusinessTwoFactorAuthenticationRequiredSetting
 */
export interface UpdateBusinessTwoFactorAuthenticationRequiredSettingInput {
  
  /**
   * The ID of the business on which to set the two factor authentication required setting.
   */
  businessId: string;
  
  /**
   * A unique identifier for the client performing the mutation.
   */
  clientMutationId?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  CodeOfConduct?: CodeOfConductTypeResolver;
  Node?: {
    __resolveType: NodeTypeResolver
  };
  
  URI?: GraphQLScalarType;
  License?: LicenseTypeResolver;
  LicenseRule?: LicenseRuleTypeResolver;
  MarketplaceCategory?: MarketplaceCategoryTypeResolver;
  MarketplaceListing?: MarketplaceListingTypeResolver;
  App?: AppTypeResolver;
  DateTime?: GraphQLScalarType;
  HTML?: GraphQLScalarType;
  MarketplaceListingConnection?: MarketplaceListingConnectionTypeResolver;
  MarketplaceListingEdge?: MarketplaceListingEdgeTypeResolver;
  PageInfo?: PageInfoTypeResolver;
  GitHubMetadata?: GitHubMetadataTypeResolver;
  GitObjectID?: GraphQLScalarType;
  Organization?: OrganizationTypeResolver;
  Actor?: {
    __resolveType: ActorTypeResolver
  };
  
  RegistryPackageOwner?: {
    __resolveType: RegistryPackageOwnerTypeResolver
  };
  
  RegistryPackageSearch?: {
    __resolveType: RegistryPackageSearchTypeResolver
  };
  
  ProjectOwner?: {
    __resolveType: ProjectOwnerTypeResolver
  };
  
  Project?: ProjectTypeResolver;
  Closable?: {
    __resolveType: ClosableTypeResolver
  };
  
  Updatable?: {
    __resolveType: UpdatableTypeResolver
  };
  
  ProjectColumnConnection?: ProjectColumnConnectionTypeResolver;
  ProjectColumnEdge?: ProjectColumnEdgeTypeResolver;
  ProjectColumn?: ProjectColumnTypeResolver;
  ProjectCardConnection?: ProjectCardConnectionTypeResolver;
  ProjectCardEdge?: ProjectCardEdgeTypeResolver;
  ProjectCard?: ProjectCardTypeResolver;
  ProjectCardItem?: {
    __resolveType: ProjectCardItemTypeResolver
  };
  
  Issue?: IssueTypeResolver;
  Assignable?: {
    __resolveType: AssignableTypeResolver
  };
  
  UserConnection?: UserConnectionTypeResolver;
  UserEdge?: UserEdgeTypeResolver;
  User?: UserTypeResolver;
  RepositoryOwner?: {
    __resolveType: RepositoryOwnerTypeResolver
  };
  
  RepositoryConnection?: RepositoryConnectionTypeResolver;
  RepositoryEdge?: RepositoryEdgeTypeResolver;
  Repository?: RepositoryTypeResolver;
  Subscribable?: {
    __resolveType: SubscribableTypeResolver
  };
  
  Starrable?: {
    __resolveType: StarrableTypeResolver
  };
  
  StargazerConnection?: StargazerConnectionTypeResolver;
  StargazerEdge?: StargazerEdgeTypeResolver;
  UniformResourceLocatable?: {
    __resolveType: UniformResourceLocatableTypeResolver
  };
  
  RepositoryInfo?: {
    __resolveType: RepositoryInfoTypeResolver
  };
  
  BranchProtectionRuleConnection?: BranchProtectionRuleConnectionTypeResolver;
  BranchProtectionRuleEdge?: BranchProtectionRuleEdgeTypeResolver;
  BranchProtectionRule?: BranchProtectionRuleTypeResolver;
  BranchProtectionRuleConflictConnection?: BranchProtectionRuleConflictConnectionTypeResolver;
  BranchProtectionRuleConflictEdge?: BranchProtectionRuleConflictEdgeTypeResolver;
  BranchProtectionRuleConflict?: BranchProtectionRuleConflictTypeResolver;
  Ref?: RefTypeResolver;
  PullRequestConnection?: PullRequestConnectionTypeResolver;
  PullRequestEdge?: PullRequestEdgeTypeResolver;
  PullRequest?: PullRequestTypeResolver;
  Comment?: {
    __resolveType: CommentTypeResolver
  };
  
  UserContentEditConnection?: UserContentEditConnectionTypeResolver;
  UserContentEditEdge?: UserContentEditEdgeTypeResolver;
  UserContentEdit?: UserContentEditTypeResolver;
  UpdatableComment?: {
    __resolveType: UpdatableCommentTypeResolver
  };
  
  Labelable?: {
    __resolveType: LabelableTypeResolver
  };
  
  LabelConnection?: LabelConnectionTypeResolver;
  LabelEdge?: LabelEdgeTypeResolver;
  Label?: LabelTypeResolver;
  IssueConnection?: IssueConnectionTypeResolver;
  IssueEdge?: IssueEdgeTypeResolver;
  Lockable?: {
    __resolveType: LockableTypeResolver
  };
  
  Reactable?: {
    __resolveType: ReactableTypeResolver
  };
  
  ReactionGroup?: ReactionGroupTypeResolver;
  ReactingUserConnection?: ReactingUserConnectionTypeResolver;
  ReactingUserEdge?: ReactingUserEdgeTypeResolver;
  ReactionConnection?: ReactionConnectionTypeResolver;
  ReactionEdge?: ReactionEdgeTypeResolver;
  Reaction?: ReactionTypeResolver;
  RepositoryNode?: {
    __resolveType: RepositoryNodeTypeResolver
  };
  
  IssueCommentConnection?: IssueCommentConnectionTypeResolver;
  IssueCommentEdge?: IssueCommentEdgeTypeResolver;
  IssueComment?: IssueCommentTypeResolver;
  Deletable?: {
    __resolveType: DeletableTypeResolver
  };
  
  PullRequestCommitConnection?: PullRequestCommitConnectionTypeResolver;
  PullRequestCommitEdge?: PullRequestCommitEdgeTypeResolver;
  PullRequestCommit?: PullRequestCommitTypeResolver;
  Commit?: CommitTypeResolver;
  GitObject?: {
    __resolveType: GitObjectTypeResolver
  };
  
  GitActor?: GitActorTypeResolver;
  GitTimestamp?: GraphQLScalarType;
  Blame?: BlameTypeResolver;
  BlameRange?: BlameRangeTypeResolver;
  CommitCommentConnection?: CommitCommentConnectionTypeResolver;
  CommitCommentEdge?: CommitCommentEdgeTypeResolver;
  CommitComment?: CommitCommentTypeResolver;
  DeploymentConnection?: DeploymentConnectionTypeResolver;
  DeploymentEdge?: DeploymentEdgeTypeResolver;
  Deployment?: DeploymentTypeResolver;
  DeploymentStatus?: DeploymentStatusTypeResolver;
  DeploymentStatusConnection?: DeploymentStatusConnectionTypeResolver;
  DeploymentStatusEdge?: DeploymentStatusEdgeTypeResolver;
  CommitHistoryConnection?: CommitHistoryConnectionTypeResolver;
  CommitEdge?: CommitEdgeTypeResolver;
  CommitConnection?: CommitConnectionTypeResolver;
  GitSignature?: {
    __resolveType: GitSignatureTypeResolver
  };
  
  Status?: StatusTypeResolver;
  StatusContext?: StatusContextTypeResolver;
  Tree?: TreeTypeResolver;
  TreeEntry?: TreeEntryTypeResolver;
  Milestone?: MilestoneTypeResolver;
  ReviewRequestConnection?: ReviewRequestConnectionTypeResolver;
  ReviewRequestEdge?: ReviewRequestEdgeTypeResolver;
  ReviewRequest?: ReviewRequestTypeResolver;
  RequestedReviewer?: {
    __resolveType: RequestedReviewerTypeResolver
  };
  
  Team?: TeamTypeResolver;
  TeamConnection?: TeamConnectionTypeResolver;
  TeamEdge?: TeamEdgeTypeResolver;
  OrganizationInvitationConnection?: OrganizationInvitationConnectionTypeResolver;
  OrganizationInvitationEdge?: OrganizationInvitationEdgeTypeResolver;
  OrganizationInvitation?: OrganizationInvitationTypeResolver;
  TeamMemberConnection?: TeamMemberConnectionTypeResolver;
  TeamMemberEdge?: TeamMemberEdgeTypeResolver;
  TeamRepositoryConnection?: TeamRepositoryConnectionTypeResolver;
  TeamRepositoryEdge?: TeamRepositoryEdgeTypeResolver;
  PullRequestReviewConnection?: PullRequestReviewConnectionTypeResolver;
  PullRequestReviewEdge?: PullRequestReviewEdgeTypeResolver;
  PullRequestReview?: PullRequestReviewTypeResolver;
  PullRequestReviewCommentConnection?: PullRequestReviewCommentConnectionTypeResolver;
  PullRequestReviewCommentEdge?: PullRequestReviewCommentEdgeTypeResolver;
  PullRequestReviewComment?: PullRequestReviewCommentTypeResolver;
  SuggestedReviewer?: SuggestedReviewerTypeResolver;
  PullRequestTimelineConnection?: PullRequestTimelineConnectionTypeResolver;
  PullRequestTimelineItemEdge?: PullRequestTimelineItemEdgeTypeResolver;
  PullRequestTimelineItem?: {
    __resolveType: PullRequestTimelineItemTypeResolver
  };
  
  CommitCommentThread?: CommitCommentThreadTypeResolver;
  PullRequestReviewThread?: PullRequestReviewThreadTypeResolver;
  ClosedEvent?: ClosedEventTypeResolver;
  Closer?: {
    __resolveType: CloserTypeResolver
  };
  
  ReopenedEvent?: ReopenedEventTypeResolver;
  SubscribedEvent?: SubscribedEventTypeResolver;
  UnsubscribedEvent?: UnsubscribedEventTypeResolver;
  MergedEvent?: MergedEventTypeResolver;
  ReferencedEvent?: ReferencedEventTypeResolver;
  ReferencedSubject?: {
    __resolveType: ReferencedSubjectTypeResolver
  };
  
  CrossReferencedEvent?: CrossReferencedEventTypeResolver;
  AssignedEvent?: AssignedEventTypeResolver;
  UnassignedEvent?: UnassignedEventTypeResolver;
  LabeledEvent?: LabeledEventTypeResolver;
  UnlabeledEvent?: UnlabeledEventTypeResolver;
  MilestonedEvent?: MilestonedEventTypeResolver;
  MilestoneItem?: {
    __resolveType: MilestoneItemTypeResolver
  };
  
  DemilestonedEvent?: DemilestonedEventTypeResolver;
  RenamedTitleEvent?: RenamedTitleEventTypeResolver;
  RenamedTitleSubject?: {
    __resolveType: RenamedTitleSubjectTypeResolver
  };
  
  LockedEvent?: LockedEventTypeResolver;
  UnlockedEvent?: UnlockedEventTypeResolver;
  DeployedEvent?: DeployedEventTypeResolver;
  DeploymentEnvironmentChangedEvent?: DeploymentEnvironmentChangedEventTypeResolver;
  HeadRefDeletedEvent?: HeadRefDeletedEventTypeResolver;
  HeadRefRestoredEvent?: HeadRefRestoredEventTypeResolver;
  HeadRefForcePushedEvent?: HeadRefForcePushedEventTypeResolver;
  BaseRefForcePushedEvent?: BaseRefForcePushedEventTypeResolver;
  ReviewRequestedEvent?: ReviewRequestedEventTypeResolver;
  ReviewRequestRemovedEvent?: ReviewRequestRemovedEventTypeResolver;
  ReviewDismissedEvent?: ReviewDismissedEventTypeResolver;
  RefConnection?: RefConnectionTypeResolver;
  RefEdge?: RefEdgeTypeResolver;
  PushAllowanceConnection?: PushAllowanceConnectionTypeResolver;
  PushAllowanceEdge?: PushAllowanceEdgeTypeResolver;
  PushAllowance?: PushAllowanceTypeResolver;
  PushAllowanceActor?: {
    __resolveType: PushAllowanceActorTypeResolver
  };
  
  ReviewDismissalAllowanceConnection?: ReviewDismissalAllowanceConnectionTypeResolver;
  ReviewDismissalAllowanceEdge?: ReviewDismissalAllowanceEdgeTypeResolver;
  ReviewDismissalAllowance?: ReviewDismissalAllowanceTypeResolver;
  ReviewDismissalAllowanceActor?: {
    __resolveType: ReviewDismissalAllowanceActorTypeResolver
  };
  
  RepositoryCollaboratorConnection?: RepositoryCollaboratorConnectionTypeResolver;
  RepositoryCollaboratorEdge?: RepositoryCollaboratorEdgeTypeResolver;
  DeployKeyConnection?: DeployKeyConnectionTypeResolver;
  DeployKeyEdge?: DeployKeyEdgeTypeResolver;
  DeployKey?: DeployKeyTypeResolver;
  IssueOrPullRequest?: {
    __resolveType: IssueOrPullRequestTypeResolver
  };
  
  LanguageConnection?: LanguageConnectionTypeResolver;
  LanguageEdge?: LanguageEdgeTypeResolver;
  Language?: LanguageTypeResolver;
  MilestoneConnection?: MilestoneConnectionTypeResolver;
  MilestoneEdge?: MilestoneEdgeTypeResolver;
  ProjectConnection?: ProjectConnectionTypeResolver;
  ProjectEdge?: ProjectEdgeTypeResolver;
  ProtectedBranchConnection?: ProtectedBranchConnectionTypeResolver;
  ProtectedBranchEdge?: ProtectedBranchEdgeTypeResolver;
  ProtectedBranch?: ProtectedBranchTypeResolver;
  Release?: ReleaseTypeResolver;
  ReleaseAssetConnection?: ReleaseAssetConnectionTypeResolver;
  ReleaseAssetEdge?: ReleaseAssetEdgeTypeResolver;
  ReleaseAsset?: ReleaseAssetTypeResolver;
  ReleaseConnection?: ReleaseConnectionTypeResolver;
  ReleaseEdge?: ReleaseEdgeTypeResolver;
  RepositoryTopicConnection?: RepositoryTopicConnectionTypeResolver;
  RepositoryTopicEdge?: RepositoryTopicEdgeTypeResolver;
  RepositoryTopic?: RepositoryTopicTypeResolver;
  Topic?: TopicTypeResolver;
  GitSSHRemote?: GraphQLScalarType;
  ContributionsCollection?: ContributionsCollectionTypeResolver;
  ContributionCalendar?: ContributionCalendarTypeResolver;
  ContributionCalendarMonth?: ContributionCalendarMonthTypeResolver;
  Date?: GraphQLScalarType;
  ContributionCalendarWeek?: ContributionCalendarWeekTypeResolver;
  ContributionCalendarDay?: ContributionCalendarDayTypeResolver;
  CreatedIssueOrRestrictedContribution?: {
    __resolveType: CreatedIssueOrRestrictedContributionTypeResolver
  };
  
  CreatedIssueContribution?: CreatedIssueContributionTypeResolver;
  Contribution?: {
    __resolveType: ContributionTypeResolver
  };
  
  RestrictedContribution?: RestrictedContributionTypeResolver;
  CreatedPullRequestOrRestrictedContribution?: {
    __resolveType: CreatedPullRequestOrRestrictedContributionTypeResolver
  };
  
  CreatedPullRequestContribution?: CreatedPullRequestContributionTypeResolver;
  CreatedIssueContributionConnection?: CreatedIssueContributionConnectionTypeResolver;
  CreatedIssueContributionEdge?: CreatedIssueContributionEdgeTypeResolver;
  JoinedGitHubContribution?: JoinedGitHubContributionTypeResolver;
  FollowerConnection?: FollowerConnectionTypeResolver;
  FollowingConnection?: FollowingConnectionTypeResolver;
  Gist?: GistTypeResolver;
  GistCommentConnection?: GistCommentConnectionTypeResolver;
  GistCommentEdge?: GistCommentEdgeTypeResolver;
  GistComment?: GistCommentTypeResolver;
  GistConnection?: GistConnectionTypeResolver;
  GistEdge?: GistEdgeTypeResolver;
  OrganizationConnection?: OrganizationConnectionTypeResolver;
  OrganizationEdge?: OrganizationEdgeTypeResolver;
  PublicKeyConnection?: PublicKeyConnectionTypeResolver;
  PublicKeyEdge?: PublicKeyEdgeTypeResolver;
  PublicKey?: PublicKeyTypeResolver;
  StarredRepositoryConnection?: StarredRepositoryConnectionTypeResolver;
  StarredRepositoryEdge?: StarredRepositoryEdgeTypeResolver;
  IssueTimelineConnection?: IssueTimelineConnectionTypeResolver;
  IssueTimelineItemEdge?: IssueTimelineItemEdgeTypeResolver;
  IssueTimelineItem?: {
    __resolveType: IssueTimelineItemTypeResolver
  };
  
  TransferredEvent?: TransferredEventTypeResolver;
  OrganizationMemberConnection?: OrganizationMemberConnectionTypeResolver;
  OrganizationMemberEdge?: OrganizationMemberEdgeTypeResolver;
  OrganizationIdentityProvider?: OrganizationIdentityProviderTypeResolver;
  ExternalIdentityConnection?: ExternalIdentityConnectionTypeResolver;
  ExternalIdentityEdge?: ExternalIdentityEdgeTypeResolver;
  ExternalIdentity?: ExternalIdentityTypeResolver;
  ExternalIdentitySamlAttributes?: ExternalIdentitySamlAttributesTypeResolver;
  ExternalIdentityScimAttributes?: ExternalIdentityScimAttributesTypeResolver;
  X509Certificate?: GraphQLScalarType;
  RateLimit?: RateLimitTypeResolver;
  SearchResultItemConnection?: SearchResultItemConnectionTypeResolver;
  SearchResultItemEdge?: SearchResultItemEdgeTypeResolver;
  SearchResultItem?: {
    __resolveType: SearchResultItemTypeResolver
  };
  
  TextMatch?: TextMatchTypeResolver;
  TextMatchHighlight?: TextMatchHighlightTypeResolver;
  SecurityAdvisoryConnection?: SecurityAdvisoryConnectionTypeResolver;
  SecurityAdvisoryEdge?: SecurityAdvisoryEdgeTypeResolver;
  SecurityAdvisory?: SecurityAdvisoryTypeResolver;
  SecurityAdvisoryIdentifier?: SecurityAdvisoryIdentifierTypeResolver;
  SecurityAdvisoryReference?: SecurityAdvisoryReferenceTypeResolver;
  SecurityVulnerabilityConnection?: SecurityVulnerabilityConnectionTypeResolver;
  SecurityVulnerabilityEdge?: SecurityVulnerabilityEdgeTypeResolver;
  SecurityVulnerability?: SecurityVulnerabilityTypeResolver;
  SecurityAdvisoryPackageVersion?: SecurityAdvisoryPackageVersionTypeResolver;
  SecurityAdvisoryPackage?: SecurityAdvisoryPackageTypeResolver;
  Mutation?: MutationTypeResolver;
  AcceptTopicSuggestionPayload?: AcceptTopicSuggestionPayloadTypeResolver;
  AddCommentPayload?: AddCommentPayloadTypeResolver;
  AddProjectCardPayload?: AddProjectCardPayloadTypeResolver;
  AddProjectColumnPayload?: AddProjectColumnPayloadTypeResolver;
  AddPullRequestReviewPayload?: AddPullRequestReviewPayloadTypeResolver;
  AddPullRequestReviewCommentPayload?: AddPullRequestReviewCommentPayloadTypeResolver;
  AddReactionPayload?: AddReactionPayloadTypeResolver;
  AddStarPayload?: AddStarPayloadTypeResolver;
  CreateBranchProtectionRulePayload?: CreateBranchProtectionRulePayloadTypeResolver;
  CreateProjectPayload?: CreateProjectPayloadTypeResolver;
  DeclineTopicSuggestionPayload?: DeclineTopicSuggestionPayloadTypeResolver;
  DeleteBranchProtectionRulePayload?: DeleteBranchProtectionRulePayloadTypeResolver;
  DeleteProjectPayload?: DeleteProjectPayloadTypeResolver;
  DeleteProjectCardPayload?: DeleteProjectCardPayloadTypeResolver;
  DeleteProjectColumnPayload?: DeleteProjectColumnPayloadTypeResolver;
  DeletePullRequestReviewPayload?: DeletePullRequestReviewPayloadTypeResolver;
  DismissPullRequestReviewPayload?: DismissPullRequestReviewPayloadTypeResolver;
  LockLockablePayload?: LockLockablePayloadTypeResolver;
  MoveProjectCardPayload?: MoveProjectCardPayloadTypeResolver;
  MoveProjectColumnPayload?: MoveProjectColumnPayloadTypeResolver;
  RemoveOutsideCollaboratorPayload?: RemoveOutsideCollaboratorPayloadTypeResolver;
  RemoveReactionPayload?: RemoveReactionPayloadTypeResolver;
  RemoveStarPayload?: RemoveStarPayloadTypeResolver;
  RequestReviewsPayload?: RequestReviewsPayloadTypeResolver;
  SubmitPullRequestReviewPayload?: SubmitPullRequestReviewPayloadTypeResolver;
  UnlockLockablePayload?: UnlockLockablePayloadTypeResolver;
  UpdateBranchProtectionRulePayload?: UpdateBranchProtectionRulePayloadTypeResolver;
  UpdateProjectPayload?: UpdateProjectPayloadTypeResolver;
  UpdateProjectCardPayload?: UpdateProjectCardPayloadTypeResolver;
  UpdateProjectColumnPayload?: UpdateProjectColumnPayloadTypeResolver;
  UpdatePullRequestReviewPayload?: UpdatePullRequestReviewPayloadTypeResolver;
  UpdatePullRequestReviewCommentPayload?: UpdatePullRequestReviewCommentPayloadTypeResolver;
  UpdateSubscriptionPayload?: UpdateSubscriptionPayloadTypeResolver;
  UpdateTopicsPayload?: UpdateTopicsPayloadTypeResolver;
  AddedToProjectEvent?: AddedToProjectEventTypeResolver;
  AppEdge?: AppEdgeTypeResolver;
  BaseRefChangedEvent?: BaseRefChangedEventTypeResolver;
  Blob?: BlobTypeResolver;
  Bot?: BotTypeResolver;
  CollectionItemContent?: {
    __resolveType: CollectionItemContentTypeResolver
  };
  
  CommentDeletedEvent?: CommentDeletedEventTypeResolver;
  ContentAttachment?: ContentAttachmentTypeResolver;
  ContentReference?: ContentReferenceTypeResolver;
  ConvertedNoteToIssueEvent?: ConvertedNoteToIssueEventTypeResolver;
  CreatedPullRequestContributionConnection?: CreatedPullRequestContributionConnectionTypeResolver;
  CreatedPullRequestContributionEdge?: CreatedPullRequestContributionEdgeTypeResolver;
  GpgSignature?: GpgSignatureTypeResolver;
  IssueTimelineItems?: {
    __resolveType: IssueTimelineItemsTypeResolver
  };
  
  MentionedEvent?: MentionedEventTypeResolver;
  MovedColumnsInProjectEvent?: MovedColumnsInProjectEventTypeResolver;
  PinnedEvent?: PinnedEventTypeResolver;
  RemovedFromProjectEvent?: RemovedFromProjectEventTypeResolver;
  UnpinnedEvent?: UnpinnedEventTypeResolver;
  IssueTimelineItemsEdge?: IssueTimelineItemsEdgeTypeResolver;
  PullRequestReviewThreadEdge?: PullRequestReviewThreadEdgeTypeResolver;
  PullRequestTimelineItems?: {
    __resolveType: PullRequestTimelineItemsTypeResolver
  };
  
  PullRequestTimelineItemsEdge?: PullRequestTimelineItemsEdgeTypeResolver;
  RepositoryInvitation?: RepositoryInvitationTypeResolver;
  RepositoryInvitationEdge?: RepositoryInvitationEdgeTypeResolver;
  SmimeSignature?: SmimeSignatureTypeResolver;
  Tag?: TagTypeResolver;
  TopicConnection?: TopicConnectionTypeResolver;
  TopicEdge?: TopicEdgeTypeResolver;
  UnknownSignature?: UnknownSignatureTypeResolver;
}
export interface QueryTypeResolver<TParent = any> {
  codeOfConduct?: QueryToCodeOfConductResolver<TParent>;
  codesOfConduct?: QueryToCodesOfConductResolver<TParent>;
  license?: QueryToLicenseResolver<TParent>;
  licenses?: QueryToLicensesResolver<TParent>;
  marketplaceCategories?: QueryToMarketplaceCategoriesResolver<TParent>;
  marketplaceCategory?: QueryToMarketplaceCategoryResolver<TParent>;
  marketplaceListing?: QueryToMarketplaceListingResolver<TParent>;
  marketplaceListings?: QueryToMarketplaceListingsResolver<TParent>;
  meta?: QueryToMetaResolver<TParent>;
  node?: QueryToNodeResolver<TParent>;
  nodes?: QueryToNodesResolver<TParent>;
  organization?: QueryToOrganizationResolver<TParent>;
  rateLimit?: QueryToRateLimitResolver<TParent>;
  relay?: QueryToRelayResolver<TParent>;
  repository?: QueryToRepositoryResolver<TParent>;
  repositoryOwner?: QueryToRepositoryOwnerResolver<TParent>;
  resource?: QueryToResourceResolver<TParent>;
  search?: QueryToSearchResolver<TParent>;
  securityAdvisories?: QueryToSecurityAdvisoriesResolver<TParent>;
  securityAdvisory?: QueryToSecurityAdvisoryResolver<TParent>;
  securityVulnerabilities?: QueryToSecurityVulnerabilitiesResolver<TParent>;
  topic?: QueryToTopicResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  viewer?: QueryToViewerResolver<TParent>;
}

export interface QueryToCodeOfConductArgs {
  key: string;
}
export interface QueryToCodeOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCodeOfConductArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCodesOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLicenseArgs {
  key: string;
}
export interface QueryToLicenseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToLicenseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLicensesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceCategoriesArgs {
  includeCategories?: Array<string>;
  excludeEmpty?: boolean;
  excludeSubcategories?: boolean;
}
export interface QueryToMarketplaceCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceCategoryArgs {
  slug: string;
  useTopicAliases?: boolean;
}
export interface QueryToMarketplaceCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceListingArgs {
  slug: string;
}
export interface QueryToMarketplaceListingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceListingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMarketplaceListingsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  categorySlug?: string;
  useTopicAliases?: boolean;
  viewerCanAdmin?: boolean;
  adminId?: string;
  organizationId?: string;
  allStates?: boolean;
  slugs?: Array<string | null>;
  primaryCategoryOnly?: boolean;
  withFreeTrialsOnly?: boolean;
}
export interface QueryToMarketplaceListingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToMarketplaceListingsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodeArgs {
  id: string;
}
export interface QueryToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToNodesArgs {
  ids: Array<string>;
}
export interface QueryToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrganizationArgs {
  login: string;
}
export interface QueryToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrganizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRateLimitArgs {
  dryRun?: boolean;
}
export interface QueryToRateLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRateLimitArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRelayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRepositoryArgs {
  owner: string;
  name: string;
}
export interface QueryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRepositoryOwnerArgs {
  login: string;
}
export interface QueryToRepositoryOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRepositoryOwnerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToResourceArgs {
  url: URI;
}
export interface QueryToResourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToResourceArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSearchArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query: string;
  type: SearchType;
}
export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSecurityAdvisoriesArgs {
  orderBy?: SecurityAdvisoryOrder;
  identifier?: SecurityAdvisoryIdentifierFilter;
  publishedSince?: DateTime;
  updatedSince?: DateTime;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface QueryToSecurityAdvisoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSecurityAdvisoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSecurityAdvisoryArgs {
  ghsaId: string;
}
export interface QueryToSecurityAdvisoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSecurityAdvisoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSecurityVulnerabilitiesArgs {
  orderBy?: SecurityVulnerabilityOrder;
  ecosystem?: SecurityAdvisoryEcosystem;
  package?: string;
  severities?: Array<SecurityAdvisorySeverity>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface QueryToSecurityVulnerabilitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSecurityVulnerabilitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTopicArgs {
  name: string;
}
export interface QueryToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTopicArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserArgs {
  login: string;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductTypeResolver<TParent = any> {
  body?: CodeOfConductToBodyResolver<TParent>;
  id?: CodeOfConductToIdResolver<TParent>;
  key?: CodeOfConductToKeyResolver<TParent>;
  name?: CodeOfConductToNameResolver<TParent>;
  resourcePath?: CodeOfConductToResourcePathResolver<TParent>;
  url?: CodeOfConductToUrlResolver<TParent>;
}

export interface CodeOfConductToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CodeOfConductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CodeOfConduct' | 'License' | 'MarketplaceCategory' | 'MarketplaceListing' | 'App' | 'Organization' | 'Project' | 'ProjectColumn' | 'ProjectCard' | 'Issue' | 'User' | 'Repository' | 'BranchProtectionRule' | 'Ref' | 'PullRequest' | 'UserContentEdit' | 'Label' | 'Reaction' | 'IssueComment' | 'PullRequestCommit' | 'Commit' | 'CommitComment' | 'Deployment' | 'DeploymentStatus' | 'Status' | 'StatusContext' | 'Tree' | 'Milestone' | 'ReviewRequest' | 'Team' | 'OrganizationInvitation' | 'PullRequestReview' | 'PullRequestReviewComment' | 'CommitCommentThread' | 'PullRequestReviewThread' | 'ClosedEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'UnsubscribedEvent' | 'MergedEvent' | 'ReferencedEvent' | 'CrossReferencedEvent' | 'AssignedEvent' | 'UnassignedEvent' | 'LabeledEvent' | 'UnlabeledEvent' | 'MilestonedEvent' | 'DemilestonedEvent' | 'RenamedTitleEvent' | 'LockedEvent' | 'UnlockedEvent' | 'DeployedEvent' | 'DeploymentEnvironmentChangedEvent' | 'HeadRefDeletedEvent' | 'HeadRefRestoredEvent' | 'HeadRefForcePushedEvent' | 'BaseRefForcePushedEvent' | 'ReviewRequestedEvent' | 'ReviewRequestRemovedEvent' | 'ReviewDismissedEvent' | 'PushAllowance' | 'ReviewDismissalAllowance' | 'DeployKey' | 'Language' | 'ProtectedBranch' | 'Release' | 'ReleaseAsset' | 'RepositoryTopic' | 'Topic' | 'Gist' | 'GistComment' | 'PublicKey' | 'TransferredEvent' | 'OrganizationIdentityProvider' | 'ExternalIdentity' | 'SecurityAdvisory' | 'AddedToProjectEvent' | 'BaseRefChangedEvent' | 'Blob' | 'Bot' | 'CommentDeletedEvent' | 'ConvertedNoteToIssueEvent' | 'MentionedEvent' | 'MovedColumnsInProjectEvent' | 'PinnedEvent' | 'RemovedFromProjectEvent' | 'UnpinnedEvent' | 'RepositoryInvitation' | 'Tag';
}
export interface LicenseTypeResolver<TParent = any> {
  body?: LicenseToBodyResolver<TParent>;
  conditions?: LicenseToConditionsResolver<TParent>;
  description?: LicenseToDescriptionResolver<TParent>;
  featured?: LicenseToFeaturedResolver<TParent>;
  hidden?: LicenseToHiddenResolver<TParent>;
  id?: LicenseToIdResolver<TParent>;
  implementation?: LicenseToImplementationResolver<TParent>;
  key?: LicenseToKeyResolver<TParent>;
  limitations?: LicenseToLimitationsResolver<TParent>;
  name?: LicenseToNameResolver<TParent>;
  nickname?: LicenseToNicknameResolver<TParent>;
  permissions?: LicenseToPermissionsResolver<TParent>;
  pseudoLicense?: LicenseToPseudoLicenseResolver<TParent>;
  spdxId?: LicenseToSpdxIdResolver<TParent>;
  url?: LicenseToUrlResolver<TParent>;
}

export interface LicenseToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToConditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToFeaturedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToHiddenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToImplementationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToLimitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToNicknameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToPseudoLicenseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToSpdxIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseRuleTypeResolver<TParent = any> {
  description?: LicenseRuleToDescriptionResolver<TParent>;
  key?: LicenseRuleToKeyResolver<TParent>;
  label?: LicenseRuleToLabelResolver<TParent>;
}

export interface LicenseRuleToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseRuleToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LicenseRuleToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryTypeResolver<TParent = any> {
  description?: MarketplaceCategoryToDescriptionResolver<TParent>;
  howItWorks?: MarketplaceCategoryToHowItWorksResolver<TParent>;
  id?: MarketplaceCategoryToIdResolver<TParent>;
  name?: MarketplaceCategoryToNameResolver<TParent>;
  primaryListingCount?: MarketplaceCategoryToPrimaryListingCountResolver<TParent>;
  resourcePath?: MarketplaceCategoryToResourcePathResolver<TParent>;
  secondaryListingCount?: MarketplaceCategoryToSecondaryListingCountResolver<TParent>;
  slug?: MarketplaceCategoryToSlugResolver<TParent>;
  url?: MarketplaceCategoryToUrlResolver<TParent>;
}

export interface MarketplaceCategoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToHowItWorksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToPrimaryListingCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToSecondaryListingCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceCategoryToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingTypeResolver<TParent = any> {
  app?: MarketplaceListingToAppResolver<TParent>;
  companyUrl?: MarketplaceListingToCompanyUrlResolver<TParent>;
  configurationResourcePath?: MarketplaceListingToConfigurationResourcePathResolver<TParent>;
  configurationUrl?: MarketplaceListingToConfigurationUrlResolver<TParent>;
  documentationUrl?: MarketplaceListingToDocumentationUrlResolver<TParent>;
  extendedDescription?: MarketplaceListingToExtendedDescriptionResolver<TParent>;
  extendedDescriptionHTML?: MarketplaceListingToExtendedDescriptionHTMLResolver<TParent>;
  fullDescription?: MarketplaceListingToFullDescriptionResolver<TParent>;
  fullDescriptionHTML?: MarketplaceListingToFullDescriptionHTMLResolver<TParent>;
  hasApprovalBeenRequested?: MarketplaceListingToHasApprovalBeenRequestedResolver<TParent>;
  hasPublishedFreeTrialPlans?: MarketplaceListingToHasPublishedFreeTrialPlansResolver<TParent>;
  hasTermsOfService?: MarketplaceListingToHasTermsOfServiceResolver<TParent>;
  howItWorks?: MarketplaceListingToHowItWorksResolver<TParent>;
  howItWorksHTML?: MarketplaceListingToHowItWorksHTMLResolver<TParent>;
  id?: MarketplaceListingToIdResolver<TParent>;
  installationUrl?: MarketplaceListingToInstallationUrlResolver<TParent>;
  installedForViewer?: MarketplaceListingToInstalledForViewerResolver<TParent>;
  isApproved?: MarketplaceListingToIsApprovedResolver<TParent>;
  isDelisted?: MarketplaceListingToIsDelistedResolver<TParent>;
  isDraft?: MarketplaceListingToIsDraftResolver<TParent>;
  isPaid?: MarketplaceListingToIsPaidResolver<TParent>;
  isRejected?: MarketplaceListingToIsRejectedResolver<TParent>;
  logoBackgroundColor?: MarketplaceListingToLogoBackgroundColorResolver<TParent>;
  logoUrl?: MarketplaceListingToLogoUrlResolver<TParent>;
  name?: MarketplaceListingToNameResolver<TParent>;
  normalizedShortDescription?: MarketplaceListingToNormalizedShortDescriptionResolver<TParent>;
  pricingUrl?: MarketplaceListingToPricingUrlResolver<TParent>;
  primaryCategory?: MarketplaceListingToPrimaryCategoryResolver<TParent>;
  privacyPolicyUrl?: MarketplaceListingToPrivacyPolicyUrlResolver<TParent>;
  resourcePath?: MarketplaceListingToResourcePathResolver<TParent>;
  screenshotUrls?: MarketplaceListingToScreenshotUrlsResolver<TParent>;
  secondaryCategory?: MarketplaceListingToSecondaryCategoryResolver<TParent>;
  shortDescription?: MarketplaceListingToShortDescriptionResolver<TParent>;
  slug?: MarketplaceListingToSlugResolver<TParent>;
  statusUrl?: MarketplaceListingToStatusUrlResolver<TParent>;
  supportEmail?: MarketplaceListingToSupportEmailResolver<TParent>;
  supportUrl?: MarketplaceListingToSupportUrlResolver<TParent>;
  termsOfServiceUrl?: MarketplaceListingToTermsOfServiceUrlResolver<TParent>;
  url?: MarketplaceListingToUrlResolver<TParent>;
  viewerCanAddPlans?: MarketplaceListingToViewerCanAddPlansResolver<TParent>;
  viewerCanApprove?: MarketplaceListingToViewerCanApproveResolver<TParent>;
  viewerCanDelist?: MarketplaceListingToViewerCanDelistResolver<TParent>;
  viewerCanEdit?: MarketplaceListingToViewerCanEditResolver<TParent>;
  viewerCanEditCategories?: MarketplaceListingToViewerCanEditCategoriesResolver<TParent>;
  viewerCanEditPlans?: MarketplaceListingToViewerCanEditPlansResolver<TParent>;
  viewerCanRedraft?: MarketplaceListingToViewerCanRedraftResolver<TParent>;
  viewerCanReject?: MarketplaceListingToViewerCanRejectResolver<TParent>;
  viewerCanRequestApproval?: MarketplaceListingToViewerCanRequestApprovalResolver<TParent>;
  viewerHasPurchased?: MarketplaceListingToViewerHasPurchasedResolver<TParent>;
  viewerHasPurchasedForAllOrganizations?: MarketplaceListingToViewerHasPurchasedForAllOrganizationsResolver<TParent>;
  viewerIsListingAdmin?: MarketplaceListingToViewerIsListingAdminResolver<TParent>;
}

export interface MarketplaceListingToAppResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToCompanyUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToConfigurationResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToConfigurationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToDocumentationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToExtendedDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToExtendedDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToFullDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToFullDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHasApprovalBeenRequestedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHasPublishedFreeTrialPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHasTermsOfServiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHowItWorksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToHowItWorksHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToInstallationUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToInstalledForViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsApprovedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsDelistedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsPaidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToIsRejectedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToLogoBackgroundColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToLogoUrlArgs {
  size?: number;
}
export interface MarketplaceListingToLogoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MarketplaceListingToLogoUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToNormalizedShortDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPricingUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPrimaryCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToPrivacyPolicyUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToScreenshotUrlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSecondaryCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToShortDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToStatusUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSupportEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToSupportUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToTermsOfServiceUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanAddPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanApproveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanDelistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanEditPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRedraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRejectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerCanRequestApprovalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerHasPurchasedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerHasPurchasedForAllOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingToViewerIsListingAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppTypeResolver<TParent = any> {
  createdAt?: AppToCreatedAtResolver<TParent>;
  databaseId?: AppToDatabaseIdResolver<TParent>;
  description?: AppToDescriptionResolver<TParent>;
  id?: AppToIdResolver<TParent>;
  logoBackgroundColor?: AppToLogoBackgroundColorResolver<TParent>;
  logoUrl?: AppToLogoUrlResolver<TParent>;
  name?: AppToNameResolver<TParent>;
  slug?: AppToSlugResolver<TParent>;
  updatedAt?: AppToUpdatedAtResolver<TParent>;
  url?: AppToUrlResolver<TParent>;
}

export interface AppToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToLogoBackgroundColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToLogoUrlArgs {
  size?: number;
}
export interface AppToLogoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: AppToLogoUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionTypeResolver<TParent = any> {
  edges?: MarketplaceListingConnectionToEdgesResolver<TParent>;
  nodes?: MarketplaceListingConnectionToNodesResolver<TParent>;
  pageInfo?: MarketplaceListingConnectionToPageInfoResolver<TParent>;
  totalCount?: MarketplaceListingConnectionToTotalCountResolver<TParent>;
}

export interface MarketplaceListingConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingEdgeTypeResolver<TParent = any> {
  cursor?: MarketplaceListingEdgeToCursorResolver<TParent>;
  node?: MarketplaceListingEdgeToNodeResolver<TParent>;
}

export interface MarketplaceListingEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MarketplaceListingEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoTypeResolver<TParent = any> {
  endCursor?: PageInfoToEndCursorResolver<TParent>;
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  startCursor?: PageInfoToStartCursorResolver<TParent>;
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataTypeResolver<TParent = any> {
  gitHubServicesSha?: GitHubMetadataToGitHubServicesShaResolver<TParent>;
  gitIpAddresses?: GitHubMetadataToGitIpAddressesResolver<TParent>;
  hookIpAddresses?: GitHubMetadataToHookIpAddressesResolver<TParent>;
  importerIpAddresses?: GitHubMetadataToImporterIpAddressesResolver<TParent>;
  isPasswordAuthenticationVerifiable?: GitHubMetadataToIsPasswordAuthenticationVerifiableResolver<TParent>;
  pagesIpAddresses?: GitHubMetadataToPagesIpAddressesResolver<TParent>;
}

export interface GitHubMetadataToGitHubServicesShaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToGitIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToHookIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToImporterIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToIsPasswordAuthenticationVerifiableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitHubMetadataToPagesIpAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationTypeResolver<TParent = any> {
  avatarUrl?: OrganizationToAvatarUrlResolver<TParent>;
  databaseId?: OrganizationToDatabaseIdResolver<TParent>;
  description?: OrganizationToDescriptionResolver<TParent>;
  email?: OrganizationToEmailResolver<TParent>;
  id?: OrganizationToIdResolver<TParent>;
  isVerified?: OrganizationToIsVerifiedResolver<TParent>;
  location?: OrganizationToLocationResolver<TParent>;
  login?: OrganizationToLoginResolver<TParent>;
  members?: OrganizationToMembersResolver<TParent>;
  membersWithRole?: OrganizationToMembersWithRoleResolver<TParent>;
  name?: OrganizationToNameResolver<TParent>;
  newTeamResourcePath?: OrganizationToNewTeamResourcePathResolver<TParent>;
  newTeamUrl?: OrganizationToNewTeamUrlResolver<TParent>;
  organizationBillingEmail?: OrganizationToOrganizationBillingEmailResolver<TParent>;
  pendingMembers?: OrganizationToPendingMembersResolver<TParent>;
  pinnedRepositories?: OrganizationToPinnedRepositoriesResolver<TParent>;
  project?: OrganizationToProjectResolver<TParent>;
  projects?: OrganizationToProjectsResolver<TParent>;
  projectsResourcePath?: OrganizationToProjectsResourcePathResolver<TParent>;
  projectsUrl?: OrganizationToProjectsUrlResolver<TParent>;
  repositories?: OrganizationToRepositoriesResolver<TParent>;
  repository?: OrganizationToRepositoryResolver<TParent>;
  requiresTwoFactorAuthentication?: OrganizationToRequiresTwoFactorAuthenticationResolver<TParent>;
  resourcePath?: OrganizationToResourcePathResolver<TParent>;
  samlIdentityProvider?: OrganizationToSamlIdentityProviderResolver<TParent>;
  team?: OrganizationToTeamResolver<TParent>;
  teams?: OrganizationToTeamsResolver<TParent>;
  teamsResourcePath?: OrganizationToTeamsResourcePathResolver<TParent>;
  teamsUrl?: OrganizationToTeamsUrlResolver<TParent>;
  url?: OrganizationToUrlResolver<TParent>;
  viewerCanAdminister?: OrganizationToViewerCanAdministerResolver<TParent>;
  viewerCanCreateProjects?: OrganizationToViewerCanCreateProjectsResolver<TParent>;
  viewerCanCreateRepositories?: OrganizationToViewerCanCreateRepositoriesResolver<TParent>;
  viewerCanCreateTeams?: OrganizationToViewerCanCreateTeamsResolver<TParent>;
  viewerIsAMember?: OrganizationToViewerIsAMemberResolver<TParent>;
  websiteUrl?: OrganizationToWebsiteUrlResolver<TParent>;
}

export interface OrganizationToAvatarUrlArgs {
  size?: number;
}
export interface OrganizationToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToIsVerifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToMembersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToMembersWithRoleArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToMembersWithRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToMembersWithRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNewTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToNewTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToOrganizationBillingEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToPendingMembersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToPendingMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToPendingMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToPinnedRepositoriesArgs {
  privacy?: RepositoryPrivacy;
  orderBy?: RepositoryOrder;
  affiliations?: Array<RepositoryAffiliation | null>;
  ownerAffiliations?: Array<RepositoryAffiliation | null>;
  isLocked?: boolean;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToPinnedRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToPinnedRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectArgs {
  number: number;
}
export interface OrganizationToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsArgs {
  orderBy?: ProjectOrder;
  search?: string;
  states?: Array<ProjectState>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToProjectsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRepositoriesArgs {
  privacy?: RepositoryPrivacy;
  orderBy?: RepositoryOrder;
  affiliations?: Array<RepositoryAffiliation | null>;
  ownerAffiliations?: Array<RepositoryAffiliation | null>;
  isLocked?: boolean;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  isFork?: boolean;
}
export interface OrganizationToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRepositoryArgs {
  name: string;
}
export interface OrganizationToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToRequiresTwoFactorAuthenticationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToSamlIdentityProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamArgs {
  slug: string;
}
export interface OrganizationToTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToTeamArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsArgs {
  privacy?: TeamPrivacy;
  role?: TeamRole;
  query?: string;
  userLogins?: Array<string>;
  orderBy?: TeamOrder;
  ldapMapped?: boolean;
  rootTeamsOnly?: boolean;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationToTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationToTeamsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToTeamsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerCanCreateTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToViewerIsAMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User' | 'Bot';
}
export interface RegistryPackageOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User' | 'Repository';
}
export interface RegistryPackageSearchTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User';
}
export interface ProjectOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'Repository';
}
export interface ProjectTypeResolver<TParent = any> {
  body?: ProjectToBodyResolver<TParent>;
  bodyHTML?: ProjectToBodyHTMLResolver<TParent>;
  closed?: ProjectToClosedResolver<TParent>;
  closedAt?: ProjectToClosedAtResolver<TParent>;
  columns?: ProjectToColumnsResolver<TParent>;
  createdAt?: ProjectToCreatedAtResolver<TParent>;
  creator?: ProjectToCreatorResolver<TParent>;
  databaseId?: ProjectToDatabaseIdResolver<TParent>;
  id?: ProjectToIdResolver<TParent>;
  name?: ProjectToNameResolver<TParent>;
  number?: ProjectToNumberResolver<TParent>;
  owner?: ProjectToOwnerResolver<TParent>;
  pendingCards?: ProjectToPendingCardsResolver<TParent>;
  resourcePath?: ProjectToResourcePathResolver<TParent>;
  state?: ProjectToStateResolver<TParent>;
  updatedAt?: ProjectToUpdatedAtResolver<TParent>;
  url?: ProjectToUrlResolver<TParent>;
  viewerCanUpdate?: ProjectToViewerCanUpdateResolver<TParent>;
}

export interface ProjectToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToColumnsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectToColumnsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectToColumnsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToPendingCardsArgs {
  archivedStates?: Array<ProjectCardArchivedState | null>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectToPendingCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectToPendingCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Project' | 'Issue' | 'PullRequest' | 'Milestone';
}
export interface UpdatableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Project' | 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'GistComment';
}
export interface ProjectColumnConnectionTypeResolver<TParent = any> {
  edges?: ProjectColumnConnectionToEdgesResolver<TParent>;
  nodes?: ProjectColumnConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectColumnConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectColumnConnectionToTotalCountResolver<TParent>;
}

export interface ProjectColumnConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnEdgeTypeResolver<TParent = any> {
  cursor?: ProjectColumnEdgeToCursorResolver<TParent>;
  node?: ProjectColumnEdgeToNodeResolver<TParent>;
}

export interface ProjectColumnEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnTypeResolver<TParent = any> {
  cards?: ProjectColumnToCardsResolver<TParent>;
  createdAt?: ProjectColumnToCreatedAtResolver<TParent>;
  databaseId?: ProjectColumnToDatabaseIdResolver<TParent>;
  id?: ProjectColumnToIdResolver<TParent>;
  name?: ProjectColumnToNameResolver<TParent>;
  project?: ProjectColumnToProjectResolver<TParent>;
  purpose?: ProjectColumnToPurposeResolver<TParent>;
  resourcePath?: ProjectColumnToResourcePathResolver<TParent>;
  updatedAt?: ProjectColumnToUpdatedAtResolver<TParent>;
  url?: ProjectColumnToUrlResolver<TParent>;
}

export interface ProjectColumnToCardsArgs {
  archivedStates?: Array<ProjectCardArchivedState | null>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProjectColumnToCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProjectColumnToCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToPurposeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectColumnToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionTypeResolver<TParent = any> {
  edges?: ProjectCardConnectionToEdgesResolver<TParent>;
  nodes?: ProjectCardConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectCardConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectCardConnectionToTotalCountResolver<TParent>;
}

export interface ProjectCardConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardEdgeTypeResolver<TParent = any> {
  cursor?: ProjectCardEdgeToCursorResolver<TParent>;
  node?: ProjectCardEdgeToNodeResolver<TParent>;
}

export interface ProjectCardEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardTypeResolver<TParent = any> {
  column?: ProjectCardToColumnResolver<TParent>;
  content?: ProjectCardToContentResolver<TParent>;
  createdAt?: ProjectCardToCreatedAtResolver<TParent>;
  creator?: ProjectCardToCreatorResolver<TParent>;
  databaseId?: ProjectCardToDatabaseIdResolver<TParent>;
  id?: ProjectCardToIdResolver<TParent>;
  isArchived?: ProjectCardToIsArchivedResolver<TParent>;
  note?: ProjectCardToNoteResolver<TParent>;
  project?: ProjectCardToProjectResolver<TParent>;
  resourcePath?: ProjectCardToResourcePathResolver<TParent>;
  state?: ProjectCardToStateResolver<TParent>;
  updatedAt?: ProjectCardToUpdatedAtResolver<TParent>;
  url?: ProjectCardToUrlResolver<TParent>;
}

export interface ProjectCardToColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToIsArchivedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToNoteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectCardItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface IssueTypeResolver<TParent = any> {
  activeLockReason?: IssueToActiveLockReasonResolver<TParent>;
  assignees?: IssueToAssigneesResolver<TParent>;
  author?: IssueToAuthorResolver<TParent>;
  authorAssociation?: IssueToAuthorAssociationResolver<TParent>;
  body?: IssueToBodyResolver<TParent>;
  bodyHTML?: IssueToBodyHTMLResolver<TParent>;
  bodyText?: IssueToBodyTextResolver<TParent>;
  closed?: IssueToClosedResolver<TParent>;
  closedAt?: IssueToClosedAtResolver<TParent>;
  comments?: IssueToCommentsResolver<TParent>;
  createdAt?: IssueToCreatedAtResolver<TParent>;
  createdViaEmail?: IssueToCreatedViaEmailResolver<TParent>;
  databaseId?: IssueToDatabaseIdResolver<TParent>;
  editor?: IssueToEditorResolver<TParent>;
  id?: IssueToIdResolver<TParent>;
  includesCreatedEdit?: IssueToIncludesCreatedEditResolver<TParent>;
  labels?: IssueToLabelsResolver<TParent>;
  lastEditedAt?: IssueToLastEditedAtResolver<TParent>;
  locked?: IssueToLockedResolver<TParent>;
  milestone?: IssueToMilestoneResolver<TParent>;
  number?: IssueToNumberResolver<TParent>;
  participants?: IssueToParticipantsResolver<TParent>;
  projectCards?: IssueToProjectCardsResolver<TParent>;
  publishedAt?: IssueToPublishedAtResolver<TParent>;
  reactionGroups?: IssueToReactionGroupsResolver<TParent>;
  reactions?: IssueToReactionsResolver<TParent>;
  repository?: IssueToRepositoryResolver<TParent>;
  resourcePath?: IssueToResourcePathResolver<TParent>;
  state?: IssueToStateResolver<TParent>;
  timeline?: IssueToTimelineResolver<TParent>;
  title?: IssueToTitleResolver<TParent>;
  updatedAt?: IssueToUpdatedAtResolver<TParent>;
  url?: IssueToUrlResolver<TParent>;
  userContentEdits?: IssueToUserContentEditsResolver<TParent>;
  viewerCanReact?: IssueToViewerCanReactResolver<TParent>;
  viewerCanSubscribe?: IssueToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdate?: IssueToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: IssueToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: IssueToViewerDidAuthorResolver<TParent>;
  viewerSubscription?: IssueToViewerSubscriptionResolver<TParent>;
}

export interface IssueToActiveLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAssigneesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToAssigneesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToAssigneesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToParticipantsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToProjectCardsArgs {
  archivedStates?: Array<ProjectCardArchivedState | null>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToProjectCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToProjectCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToReactionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  content?: ReactionContent;
  orderBy?: ReactionOrder;
}
export interface IssueToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToTimelineArgs {
  since?: DateTime;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToTimelineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToTimelineArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface UserConnectionTypeResolver<TParent = any> {
  edges?: UserConnectionToEdgesResolver<TParent>;
  nodes?: UserConnectionToNodesResolver<TParent>;
  pageInfo?: UserConnectionToPageInfoResolver<TParent>;
  totalCount?: UserConnectionToTotalCountResolver<TParent>;
}

export interface UserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserEdgeTypeResolver<TParent = any> {
  cursor?: UserEdgeToCursorResolver<TParent>;
  node?: UserEdgeToNodeResolver<TParent>;
}

export interface UserEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserTypeResolver<TParent = any> {
  avatarUrl?: UserToAvatarUrlResolver<TParent>;
  bio?: UserToBioResolver<TParent>;
  bioHTML?: UserToBioHTMLResolver<TParent>;
  commitComments?: UserToCommitCommentsResolver<TParent>;
  company?: UserToCompanyResolver<TParent>;
  companyHTML?: UserToCompanyHTMLResolver<TParent>;
  contributionsCollection?: UserToContributionsCollectionResolver<TParent>;
  createdAt?: UserToCreatedAtResolver<TParent>;
  databaseId?: UserToDatabaseIdResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  followers?: UserToFollowersResolver<TParent>;
  following?: UserToFollowingResolver<TParent>;
  gist?: UserToGistResolver<TParent>;
  gistComments?: UserToGistCommentsResolver<TParent>;
  gists?: UserToGistsResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  isBountyHunter?: UserToIsBountyHunterResolver<TParent>;
  isCampusExpert?: UserToIsCampusExpertResolver<TParent>;
  isDeveloperProgramMember?: UserToIsDeveloperProgramMemberResolver<TParent>;
  isEmployee?: UserToIsEmployeeResolver<TParent>;
  isHireable?: UserToIsHireableResolver<TParent>;
  isSiteAdmin?: UserToIsSiteAdminResolver<TParent>;
  isViewer?: UserToIsViewerResolver<TParent>;
  issueComments?: UserToIssueCommentsResolver<TParent>;
  issues?: UserToIssuesResolver<TParent>;
  location?: UserToLocationResolver<TParent>;
  login?: UserToLoginResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  organization?: UserToOrganizationResolver<TParent>;
  organizations?: UserToOrganizationsResolver<TParent>;
  pinnedRepositories?: UserToPinnedRepositoriesResolver<TParent>;
  publicKeys?: UserToPublicKeysResolver<TParent>;
  pullRequests?: UserToPullRequestsResolver<TParent>;
  repositories?: UserToRepositoriesResolver<TParent>;
  repositoriesContributedTo?: UserToRepositoriesContributedToResolver<TParent>;
  repository?: UserToRepositoryResolver<TParent>;
  resourcePath?: UserToResourcePathResolver<TParent>;
  starredRepositories?: UserToStarredRepositoriesResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
  url?: UserToUrlResolver<TParent>;
  viewerCanFollow?: UserToViewerCanFollowResolver<TParent>;
  viewerIsFollowing?: UserToViewerIsFollowingResolver<TParent>;
  watching?: UserToWatchingResolver<TParent>;
  websiteUrl?: UserToWebsiteUrlResolver<TParent>;
}

export interface UserToAvatarUrlArgs {
  size?: number;
}
export interface UserToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBioHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCommitCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToCommitCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToCommitCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCompanyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToContributionsCollectionArgs {
  organizationID?: string;
  from?: DateTime;
  to?: DateTime;
}
export interface UserToContributionsCollectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToContributionsCollectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFollowersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToFollowersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToFollowersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFollowingArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToFollowingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToFollowingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistArgs {
  name: string;
}
export interface UserToGistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToGistCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGistsArgs {
  privacy?: GistPrivacy;
  orderBy?: GistOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToGistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToGistsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsBountyHunterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsCampusExpertResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsDeveloperProgramMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsEmployeeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsHireableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsSiteAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIssueCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToIssueCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToIssueCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIssuesArgs {
  orderBy?: IssueOrder;
  labels?: Array<string>;
  states?: Array<IssueState>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOrganizationArgs {
  login: string;
}
export interface UserToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToOrganizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOrganizationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToOrganizationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToOrganizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPinnedRepositoriesArgs {
  privacy?: RepositoryPrivacy;
  orderBy?: RepositoryOrder;
  affiliations?: Array<RepositoryAffiliation | null>;
  ownerAffiliations?: Array<RepositoryAffiliation | null>;
  isLocked?: boolean;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToPinnedRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPinnedRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPublicKeysArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToPublicKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPublicKeysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPullRequestsArgs {
  states?: Array<PullRequestState>;
  labels?: Array<string>;
  headRefName?: string;
  baseRefName?: string;
  orderBy?: IssueOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoriesArgs {
  privacy?: RepositoryPrivacy;
  orderBy?: RepositoryOrder;
  affiliations?: Array<RepositoryAffiliation | null>;
  ownerAffiliations?: Array<RepositoryAffiliation | null>;
  isLocked?: boolean;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  isFork?: boolean;
}
export interface UserToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoriesContributedToArgs {
  privacy?: RepositoryPrivacy;
  orderBy?: RepositoryOrder;
  isLocked?: boolean;
  includeUserRepositories?: boolean;
  contributionTypes?: Array<RepositoryContributionType | null>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToRepositoriesContributedToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoriesContributedToArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRepositoryArgs {
  name: string;
}
export interface UserToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRepositoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToStarredRepositoriesArgs {
  ownedByViewer?: boolean;
  orderBy?: StarOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToStarredRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToStarredRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToViewerCanFollowResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToViewerIsFollowingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToWatchingArgs {
  privacy?: RepositoryPrivacy;
  orderBy?: RepositoryOrder;
  affiliations?: Array<RepositoryAffiliation | null>;
  ownerAffiliations?: Array<RepositoryAffiliation | null>;
  isLocked?: boolean;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface UserToWatchingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToWatchingArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryOwnerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'User';
}
export interface RepositoryConnectionTypeResolver<TParent = any> {
  edges?: RepositoryConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryConnectionToTotalCountResolver<TParent>;
  totalDiskUsage?: RepositoryConnectionToTotalDiskUsageResolver<TParent>;
}

export interface RepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryConnectionToTotalDiskUsageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryEdgeToCursorResolver<TParent>;
  node?: RepositoryEdgeToNodeResolver<TParent>;
}

export interface RepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTypeResolver<TParent = any> {
  assignableUsers?: RepositoryToAssignableUsersResolver<TParent>;
  branchProtectionRules?: RepositoryToBranchProtectionRulesResolver<TParent>;
  codeOfConduct?: RepositoryToCodeOfConductResolver<TParent>;
  collaborators?: RepositoryToCollaboratorsResolver<TParent>;
  commitComments?: RepositoryToCommitCommentsResolver<TParent>;
  createdAt?: RepositoryToCreatedAtResolver<TParent>;
  databaseId?: RepositoryToDatabaseIdResolver<TParent>;
  defaultBranchRef?: RepositoryToDefaultBranchRefResolver<TParent>;
  deployKeys?: RepositoryToDeployKeysResolver<TParent>;
  deployments?: RepositoryToDeploymentsResolver<TParent>;
  description?: RepositoryToDescriptionResolver<TParent>;
  descriptionHTML?: RepositoryToDescriptionHTMLResolver<TParent>;
  diskUsage?: RepositoryToDiskUsageResolver<TParent>;
  forkCount?: RepositoryToForkCountResolver<TParent>;
  forks?: RepositoryToForksResolver<TParent>;
  hasIssuesEnabled?: RepositoryToHasIssuesEnabledResolver<TParent>;
  hasWikiEnabled?: RepositoryToHasWikiEnabledResolver<TParent>;
  homepageUrl?: RepositoryToHomepageUrlResolver<TParent>;
  id?: RepositoryToIdResolver<TParent>;
  isArchived?: RepositoryToIsArchivedResolver<TParent>;
  isFork?: RepositoryToIsForkResolver<TParent>;
  isLocked?: RepositoryToIsLockedResolver<TParent>;
  isMirror?: RepositoryToIsMirrorResolver<TParent>;
  isPrivate?: RepositoryToIsPrivateResolver<TParent>;
  issue?: RepositoryToIssueResolver<TParent>;
  issueOrPullRequest?: RepositoryToIssueOrPullRequestResolver<TParent>;
  issues?: RepositoryToIssuesResolver<TParent>;
  label?: RepositoryToLabelResolver<TParent>;
  labels?: RepositoryToLabelsResolver<TParent>;
  languages?: RepositoryToLanguagesResolver<TParent>;
  licenseInfo?: RepositoryToLicenseInfoResolver<TParent>;
  lockReason?: RepositoryToLockReasonResolver<TParent>;
  mentionableUsers?: RepositoryToMentionableUsersResolver<TParent>;
  mergeCommitAllowed?: RepositoryToMergeCommitAllowedResolver<TParent>;
  milestone?: RepositoryToMilestoneResolver<TParent>;
  milestones?: RepositoryToMilestonesResolver<TParent>;
  mirrorUrl?: RepositoryToMirrorUrlResolver<TParent>;
  name?: RepositoryToNameResolver<TParent>;
  nameWithOwner?: RepositoryToNameWithOwnerResolver<TParent>;
  object?: RepositoryToObjectResolver<TParent>;
  owner?: RepositoryToOwnerResolver<TParent>;
  parent?: RepositoryToParentResolver<TParent>;
  primaryLanguage?: RepositoryToPrimaryLanguageResolver<TParent>;
  project?: RepositoryToProjectResolver<TParent>;
  projects?: RepositoryToProjectsResolver<TParent>;
  projectsResourcePath?: RepositoryToProjectsResourcePathResolver<TParent>;
  projectsUrl?: RepositoryToProjectsUrlResolver<TParent>;
  protectedBranches?: RepositoryToProtectedBranchesResolver<TParent>;
  pullRequest?: RepositoryToPullRequestResolver<TParent>;
  pullRequests?: RepositoryToPullRequestsResolver<TParent>;
  pushedAt?: RepositoryToPushedAtResolver<TParent>;
  rebaseMergeAllowed?: RepositoryToRebaseMergeAllowedResolver<TParent>;
  ref?: RepositoryToRefResolver<TParent>;
  refs?: RepositoryToRefsResolver<TParent>;
  release?: RepositoryToReleaseResolver<TParent>;
  releases?: RepositoryToReleasesResolver<TParent>;
  repositoryTopics?: RepositoryToRepositoryTopicsResolver<TParent>;
  resourcePath?: RepositoryToResourcePathResolver<TParent>;
  shortDescriptionHTML?: RepositoryToShortDescriptionHTMLResolver<TParent>;
  squashMergeAllowed?: RepositoryToSquashMergeAllowedResolver<TParent>;
  sshUrl?: RepositoryToSshUrlResolver<TParent>;
  stargazers?: RepositoryToStargazersResolver<TParent>;
  updatedAt?: RepositoryToUpdatedAtResolver<TParent>;
  url?: RepositoryToUrlResolver<TParent>;
  viewerCanAdminister?: RepositoryToViewerCanAdministerResolver<TParent>;
  viewerCanCreateProjects?: RepositoryToViewerCanCreateProjectsResolver<TParent>;
  viewerCanSubscribe?: RepositoryToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdateTopics?: RepositoryToViewerCanUpdateTopicsResolver<TParent>;
  viewerHasStarred?: RepositoryToViewerHasStarredResolver<TParent>;
  viewerPermission?: RepositoryToViewerPermissionResolver<TParent>;
  viewerSubscription?: RepositoryToViewerSubscriptionResolver<TParent>;
  watchers?: RepositoryToWatchersResolver<TParent>;
}

export interface RepositoryToAssignableUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToAssignableUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToAssignableUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToBranchProtectionRulesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToBranchProtectionRulesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToBranchProtectionRulesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCodeOfConductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCollaboratorsArgs {
  affiliation?: CollaboratorAffiliation;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToCollaboratorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToCollaboratorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCommitCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToCommitCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToCommitCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDefaultBranchRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDeployKeysArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToDeployKeysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToDeployKeysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDeploymentsArgs {
  environments?: Array<string>;
  orderBy?: DeploymentOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToDeploymentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToDeploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToDiskUsageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToForkCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToForksArgs {
  privacy?: RepositoryPrivacy;
  orderBy?: RepositoryOrder;
  affiliations?: Array<RepositoryAffiliation | null>;
  ownerAffiliations?: Array<RepositoryAffiliation | null>;
  isLocked?: boolean;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToForksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToForksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHasIssuesEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHasWikiEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToHomepageUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsArchivedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsForkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsMirrorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIsPrivateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssueArgs {
  number: number;
}
export interface RepositoryToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssueArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssueOrPullRequestArgs {
  number: number;
}
export interface RepositoryToIssueOrPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssueOrPullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToIssuesArgs {
  orderBy?: IssueOrder;
  labels?: Array<string>;
  states?: Array<IssueState>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLabelArgs {
  name: string;
}
export interface RepositoryToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLabelArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
}
export interface RepositoryToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLanguagesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: LanguageOrder;
}
export interface RepositoryToLanguagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToLanguagesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLicenseInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMentionableUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToMentionableUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMentionableUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMergeCommitAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMilestoneArgs {
  number: number;
}
export interface RepositoryToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMilestoneArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMilestonesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  states?: Array<MilestoneState>;
  orderBy?: MilestoneOrder;
}
export interface RepositoryToMilestonesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToMilestonesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToMirrorUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToNameWithOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToObjectArgs {
  oid?: GitObjectID;
  expression?: string;
}
export interface RepositoryToObjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToObjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToParentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPrimaryLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectArgs {
  number: number;
}
export interface RepositoryToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsArgs {
  orderBy?: ProjectOrder;
  search?: string;
  states?: Array<ProjectState>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToProjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProjectsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToProtectedBranchesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToProtectedBranchesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToProtectedBranchesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPullRequestArgs {
  number: number;
}
export interface RepositoryToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToPullRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPullRequestsArgs {
  states?: Array<PullRequestState>;
  labels?: Array<string>;
  headRefName?: string;
  baseRefName?: string;
  orderBy?: IssueOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToPushedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRebaseMergeAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRefArgs {
  qualifiedName: string;
}
export interface RepositoryToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRefArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRefsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  refPrefix: string;
  direction?: OrderDirection;
  orderBy?: RefOrder;
}
export interface RepositoryToRefsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRefsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToReleaseArgs {
  tagName: string;
}
export interface RepositoryToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToReleaseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToReleasesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: ReleaseOrder;
}
export interface RepositoryToReleasesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToReleasesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToRepositoryTopicsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToRepositoryTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToRepositoryTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToShortDescriptionHTMLArgs {
  limit?: number;
}
export interface RepositoryToShortDescriptionHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToShortDescriptionHTMLArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToSquashMergeAllowedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToSshUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: StarOrder;
}
export interface RepositoryToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanCreateProjectsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerCanUpdateTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryToWatchersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RepositoryToWatchersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RepositoryToWatchersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'Repository' | 'PullRequest' | 'Commit' | 'Team';
}
export interface StarrableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Repository' | 'Topic' | 'Gist';
}
export interface StargazerConnectionTypeResolver<TParent = any> {
  edges?: StargazerConnectionToEdgesResolver<TParent>;
  nodes?: StargazerConnectionToNodesResolver<TParent>;
  pageInfo?: StargazerConnectionToPageInfoResolver<TParent>;
  totalCount?: StargazerConnectionToTotalCountResolver<TParent>;
}

export interface StargazerConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerEdgeTypeResolver<TParent = any> {
  cursor?: StargazerEdgeToCursorResolver<TParent>;
  node?: StargazerEdgeToNodeResolver<TParent>;
  starredAt?: StargazerEdgeToStarredAtResolver<TParent>;
}

export interface StargazerEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StargazerEdgeToStarredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UniformResourceLocatableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Organization' | 'Issue' | 'User' | 'Repository' | 'PullRequest' | 'PullRequestCommit' | 'Commit' | 'Milestone' | 'ClosedEvent' | 'MergedEvent' | 'CrossReferencedEvent' | 'ReviewDismissedEvent' | 'Release' | 'RepositoryTopic' | 'Bot';
}
export interface RepositoryInfoTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Repository';
}
export interface BranchProtectionRuleConnectionTypeResolver<TParent = any> {
  edges?: BranchProtectionRuleConnectionToEdgesResolver<TParent>;
  nodes?: BranchProtectionRuleConnectionToNodesResolver<TParent>;
  pageInfo?: BranchProtectionRuleConnectionToPageInfoResolver<TParent>;
  totalCount?: BranchProtectionRuleConnectionToTotalCountResolver<TParent>;
}

export interface BranchProtectionRuleConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleEdgeTypeResolver<TParent = any> {
  cursor?: BranchProtectionRuleEdgeToCursorResolver<TParent>;
  node?: BranchProtectionRuleEdgeToNodeResolver<TParent>;
}

export interface BranchProtectionRuleEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleTypeResolver<TParent = any> {
  branchProtectionRuleConflicts?: BranchProtectionRuleToBranchProtectionRuleConflictsResolver<TParent>;
  creator?: BranchProtectionRuleToCreatorResolver<TParent>;
  databaseId?: BranchProtectionRuleToDatabaseIdResolver<TParent>;
  dismissesStaleReviews?: BranchProtectionRuleToDismissesStaleReviewsResolver<TParent>;
  id?: BranchProtectionRuleToIdResolver<TParent>;
  isAdminEnforced?: BranchProtectionRuleToIsAdminEnforcedResolver<TParent>;
  matchingRefs?: BranchProtectionRuleToMatchingRefsResolver<TParent>;
  pattern?: BranchProtectionRuleToPatternResolver<TParent>;
  pushAllowances?: BranchProtectionRuleToPushAllowancesResolver<TParent>;
  repository?: BranchProtectionRuleToRepositoryResolver<TParent>;
  requiredApprovingReviewCount?: BranchProtectionRuleToRequiredApprovingReviewCountResolver<TParent>;
  requiredStatusCheckContexts?: BranchProtectionRuleToRequiredStatusCheckContextsResolver<TParent>;
  requiresApprovingReviews?: BranchProtectionRuleToRequiresApprovingReviewsResolver<TParent>;
  requiresCommitSignatures?: BranchProtectionRuleToRequiresCommitSignaturesResolver<TParent>;
  requiresStatusChecks?: BranchProtectionRuleToRequiresStatusChecksResolver<TParent>;
  requiresStrictStatusChecks?: BranchProtectionRuleToRequiresStrictStatusChecksResolver<TParent>;
  restrictsPushes?: BranchProtectionRuleToRestrictsPushesResolver<TParent>;
  restrictsReviewDismissals?: BranchProtectionRuleToRestrictsReviewDismissalsResolver<TParent>;
  reviewDismissalAllowances?: BranchProtectionRuleToReviewDismissalAllowancesResolver<TParent>;
}

export interface BranchProtectionRuleToBranchProtectionRuleConflictsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToBranchProtectionRuleConflictsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToBranchProtectionRuleConflictsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToDismissesStaleReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToIsAdminEnforcedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToMatchingRefsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToMatchingRefsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToMatchingRefsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToPatternResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToPushAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToPushAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToPushAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiredApprovingReviewCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiredStatusCheckContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresApprovingReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresCommitSignaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRequiresStrictStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRestrictsPushesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToRestrictsReviewDismissalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleToReviewDismissalAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface BranchProtectionRuleToReviewDismissalAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BranchProtectionRuleToReviewDismissalAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionTypeResolver<TParent = any> {
  edges?: BranchProtectionRuleConflictConnectionToEdgesResolver<TParent>;
  nodes?: BranchProtectionRuleConflictConnectionToNodesResolver<TParent>;
  pageInfo?: BranchProtectionRuleConflictConnectionToPageInfoResolver<TParent>;
  totalCount?: BranchProtectionRuleConflictConnectionToTotalCountResolver<TParent>;
}

export interface BranchProtectionRuleConflictConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictEdgeTypeResolver<TParent = any> {
  cursor?: BranchProtectionRuleConflictEdgeToCursorResolver<TParent>;
  node?: BranchProtectionRuleConflictEdgeToNodeResolver<TParent>;
}

export interface BranchProtectionRuleConflictEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictTypeResolver<TParent = any> {
  branchProtectionRule?: BranchProtectionRuleConflictToBranchProtectionRuleResolver<TParent>;
  conflictingBranchProtectionRule?: BranchProtectionRuleConflictToConflictingBranchProtectionRuleResolver<TParent>;
  ref?: BranchProtectionRuleConflictToRefResolver<TParent>;
}

export interface BranchProtectionRuleConflictToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictToConflictingBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BranchProtectionRuleConflictToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefTypeResolver<TParent = any> {
  associatedPullRequests?: RefToAssociatedPullRequestsResolver<TParent>;
  id?: RefToIdResolver<TParent>;
  name?: RefToNameResolver<TParent>;
  prefix?: RefToPrefixResolver<TParent>;
  repository?: RefToRepositoryResolver<TParent>;
  target?: RefToTargetResolver<TParent>;
}

export interface RefToAssociatedPullRequestsArgs {
  states?: Array<PullRequestState>;
  labels?: Array<string>;
  headRefName?: string;
  baseRefName?: string;
  orderBy?: IssueOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface RefToAssociatedPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RefToAssociatedPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToPrefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionTypeResolver<TParent = any> {
  edges?: PullRequestConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestEdgeToCursorResolver<TParent>;
  node?: PullRequestEdgeToNodeResolver<TParent>;
}

export interface PullRequestEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTypeResolver<TParent = any> {
  activeLockReason?: PullRequestToActiveLockReasonResolver<TParent>;
  additions?: PullRequestToAdditionsResolver<TParent>;
  assignees?: PullRequestToAssigneesResolver<TParent>;
  author?: PullRequestToAuthorResolver<TParent>;
  authorAssociation?: PullRequestToAuthorAssociationResolver<TParent>;
  baseRef?: PullRequestToBaseRefResolver<TParent>;
  baseRefName?: PullRequestToBaseRefNameResolver<TParent>;
  baseRefOid?: PullRequestToBaseRefOidResolver<TParent>;
  body?: PullRequestToBodyResolver<TParent>;
  bodyHTML?: PullRequestToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestToBodyTextResolver<TParent>;
  changedFiles?: PullRequestToChangedFilesResolver<TParent>;
  closed?: PullRequestToClosedResolver<TParent>;
  closedAt?: PullRequestToClosedAtResolver<TParent>;
  comments?: PullRequestToCommentsResolver<TParent>;
  commits?: PullRequestToCommitsResolver<TParent>;
  createdAt?: PullRequestToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestToDatabaseIdResolver<TParent>;
  deletions?: PullRequestToDeletionsResolver<TParent>;
  editor?: PullRequestToEditorResolver<TParent>;
  headRef?: PullRequestToHeadRefResolver<TParent>;
  headRefName?: PullRequestToHeadRefNameResolver<TParent>;
  headRefOid?: PullRequestToHeadRefOidResolver<TParent>;
  headRepository?: PullRequestToHeadRepositoryResolver<TParent>;
  headRepositoryOwner?: PullRequestToHeadRepositoryOwnerResolver<TParent>;
  id?: PullRequestToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestToIncludesCreatedEditResolver<TParent>;
  isCrossRepository?: PullRequestToIsCrossRepositoryResolver<TParent>;
  labels?: PullRequestToLabelsResolver<TParent>;
  lastEditedAt?: PullRequestToLastEditedAtResolver<TParent>;
  locked?: PullRequestToLockedResolver<TParent>;
  maintainerCanModify?: PullRequestToMaintainerCanModifyResolver<TParent>;
  mergeCommit?: PullRequestToMergeCommitResolver<TParent>;
  mergeable?: PullRequestToMergeableResolver<TParent>;
  merged?: PullRequestToMergedResolver<TParent>;
  mergedAt?: PullRequestToMergedAtResolver<TParent>;
  mergedBy?: PullRequestToMergedByResolver<TParent>;
  milestone?: PullRequestToMilestoneResolver<TParent>;
  number?: PullRequestToNumberResolver<TParent>;
  participants?: PullRequestToParticipantsResolver<TParent>;
  permalink?: PullRequestToPermalinkResolver<TParent>;
  potentialMergeCommit?: PullRequestToPotentialMergeCommitResolver<TParent>;
  projectCards?: PullRequestToProjectCardsResolver<TParent>;
  publishedAt?: PullRequestToPublishedAtResolver<TParent>;
  reactionGroups?: PullRequestToReactionGroupsResolver<TParent>;
  reactions?: PullRequestToReactionsResolver<TParent>;
  repository?: PullRequestToRepositoryResolver<TParent>;
  resourcePath?: PullRequestToResourcePathResolver<TParent>;
  revertResourcePath?: PullRequestToRevertResourcePathResolver<TParent>;
  revertUrl?: PullRequestToRevertUrlResolver<TParent>;
  reviewRequests?: PullRequestToReviewRequestsResolver<TParent>;
  reviews?: PullRequestToReviewsResolver<TParent>;
  state?: PullRequestToStateResolver<TParent>;
  suggestedReviewers?: PullRequestToSuggestedReviewersResolver<TParent>;
  timeline?: PullRequestToTimelineResolver<TParent>;
  title?: PullRequestToTitleResolver<TParent>;
  updatedAt?: PullRequestToUpdatedAtResolver<TParent>;
  url?: PullRequestToUrlResolver<TParent>;
  userContentEdits?: PullRequestToUserContentEditsResolver<TParent>;
  viewerCanApplySuggestion?: PullRequestToViewerCanApplySuggestionResolver<TParent>;
  viewerCanReact?: PullRequestToViewerCanReactResolver<TParent>;
  viewerCanSubscribe?: PullRequestToViewerCanSubscribeResolver<TParent>;
  viewerCanUpdate?: PullRequestToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestToViewerDidAuthorResolver<TParent>;
  viewerSubscription?: PullRequestToViewerSubscriptionResolver<TParent>;
}

export interface PullRequestToActiveLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAdditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAssigneesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToAssigneesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToAssigneesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBaseRefOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToChangedFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCommitsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToCommitsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToCommitsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToDeletionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRefOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToHeadRepositoryOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLabelsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToLabelsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToLabelsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToLockedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMaintainerCanModifyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergeableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMergedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToMilestoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToParticipantsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToParticipantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToParticipantsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPermalinkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPotentialMergeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToProjectCardsArgs {
  archivedStates?: Array<ProjectCardArchivedState | null>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToProjectCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToProjectCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReactionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  content?: ReactionContent;
  orderBy?: ReactionOrder;
}
export interface PullRequestToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRevertResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToRevertUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReviewRequestsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToReviewRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReviewRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToReviewsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  states?: Array<PullRequestReviewState>;
  author?: string;
}
export interface PullRequestToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToSuggestedReviewersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToTimelineArgs {
  since?: DateTime;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToTimelineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToTimelineArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanApplySuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'GistComment';
}
export interface UserContentEditConnectionTypeResolver<TParent = any> {
  edges?: UserContentEditConnectionToEdgesResolver<TParent>;
  nodes?: UserContentEditConnectionToNodesResolver<TParent>;
  pageInfo?: UserContentEditConnectionToPageInfoResolver<TParent>;
  totalCount?: UserContentEditConnectionToTotalCountResolver<TParent>;
}

export interface UserContentEditConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditEdgeTypeResolver<TParent = any> {
  cursor?: UserContentEditEdgeToCursorResolver<TParent>;
  node?: UserContentEditEdgeToNodeResolver<TParent>;
}

export interface UserContentEditEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditTypeResolver<TParent = any> {
  createdAt?: UserContentEditToCreatedAtResolver<TParent>;
  deletedAt?: UserContentEditToDeletedAtResolver<TParent>;
  deletedBy?: UserContentEditToDeletedByResolver<TParent>;
  diff?: UserContentEditToDiffResolver<TParent>;
  editedAt?: UserContentEditToEditedAtResolver<TParent>;
  editor?: UserContentEditToEditorResolver<TParent>;
  id?: UserContentEditToIdResolver<TParent>;
  updatedAt?: UserContentEditToUpdatedAtResolver<TParent>;
}

export interface UserContentEditToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDeletedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToDiffResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserContentEditToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatableCommentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'GistComment';
}
export interface LabelableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface LabelConnectionTypeResolver<TParent = any> {
  edges?: LabelConnectionToEdgesResolver<TParent>;
  nodes?: LabelConnectionToNodesResolver<TParent>;
  pageInfo?: LabelConnectionToPageInfoResolver<TParent>;
  totalCount?: LabelConnectionToTotalCountResolver<TParent>;
}

export interface LabelConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelEdgeTypeResolver<TParent = any> {
  cursor?: LabelEdgeToCursorResolver<TParent>;
  node?: LabelEdgeToNodeResolver<TParent>;
}

export interface LabelEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelTypeResolver<TParent = any> {
  color?: LabelToColorResolver<TParent>;
  createdAt?: LabelToCreatedAtResolver<TParent>;
  description?: LabelToDescriptionResolver<TParent>;
  id?: LabelToIdResolver<TParent>;
  isDefault?: LabelToIsDefaultResolver<TParent>;
  issues?: LabelToIssuesResolver<TParent>;
  name?: LabelToNameResolver<TParent>;
  pullRequests?: LabelToPullRequestsResolver<TParent>;
  repository?: LabelToRepositoryResolver<TParent>;
  resourcePath?: LabelToResourcePathResolver<TParent>;
  updatedAt?: LabelToUpdatedAtResolver<TParent>;
  url?: LabelToUrlResolver<TParent>;
}

export interface LabelToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIsDefaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToIssuesArgs {
  orderBy?: IssueOrder;
  labels?: Array<string>;
  states?: Array<IssueState>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface LabelToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: LabelToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToPullRequestsArgs {
  states?: Array<PullRequestState>;
  labels?: Array<string>;
  headRefName?: string;
  baseRefName?: string;
  orderBy?: IssueOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface LabelToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: LabelToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabelToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionTypeResolver<TParent = any> {
  edges?: IssueConnectionToEdgesResolver<TParent>;
  nodes?: IssueConnectionToNodesResolver<TParent>;
  pageInfo?: IssueConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueConnectionToTotalCountResolver<TParent>;
}

export interface IssueConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueEdgeTypeResolver<TParent = any> {
  cursor?: IssueEdgeToCursorResolver<TParent>;
  node?: IssueEdgeToNodeResolver<TParent>;
}

export interface IssueEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface ReactableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment';
}
export interface ReactionGroupTypeResolver<TParent = any> {
  content?: ReactionGroupToContentResolver<TParent>;
  createdAt?: ReactionGroupToCreatedAtResolver<TParent>;
  subject?: ReactionGroupToSubjectResolver<TParent>;
  users?: ReactionGroupToUsersResolver<TParent>;
  viewerHasReacted?: ReactionGroupToViewerHasReactedResolver<TParent>;
}

export interface ReactionGroupToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToUsersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ReactionGroupToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ReactionGroupToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionGroupToViewerHasReactedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionTypeResolver<TParent = any> {
  edges?: ReactingUserConnectionToEdgesResolver<TParent>;
  nodes?: ReactingUserConnectionToNodesResolver<TParent>;
  pageInfo?: ReactingUserConnectionToPageInfoResolver<TParent>;
  totalCount?: ReactingUserConnectionToTotalCountResolver<TParent>;
}

export interface ReactingUserConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserEdgeTypeResolver<TParent = any> {
  cursor?: ReactingUserEdgeToCursorResolver<TParent>;
  node?: ReactingUserEdgeToNodeResolver<TParent>;
  reactedAt?: ReactingUserEdgeToReactedAtResolver<TParent>;
}

export interface ReactingUserEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactingUserEdgeToReactedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionTypeResolver<TParent = any> {
  edges?: ReactionConnectionToEdgesResolver<TParent>;
  nodes?: ReactionConnectionToNodesResolver<TParent>;
  pageInfo?: ReactionConnectionToPageInfoResolver<TParent>;
  totalCount?: ReactionConnectionToTotalCountResolver<TParent>;
  viewerHasReacted?: ReactionConnectionToViewerHasReactedResolver<TParent>;
}

export interface ReactionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionConnectionToViewerHasReactedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionEdgeTypeResolver<TParent = any> {
  cursor?: ReactionEdgeToCursorResolver<TParent>;
  node?: ReactionEdgeToNodeResolver<TParent>;
}

export interface ReactionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionTypeResolver<TParent = any> {
  content?: ReactionToContentResolver<TParent>;
  createdAt?: ReactionToCreatedAtResolver<TParent>;
  databaseId?: ReactionToDatabaseIdResolver<TParent>;
  id?: ReactionToIdResolver<TParent>;
  reactable?: ReactionToReactableResolver<TParent>;
  user?: ReactionToUserResolver<TParent>;
}

export interface ReactionToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToReactableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReactionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'CommitCommentThread';
}
export interface IssueCommentConnectionTypeResolver<TParent = any> {
  edges?: IssueCommentConnectionToEdgesResolver<TParent>;
  nodes?: IssueCommentConnectionToNodesResolver<TParent>;
  pageInfo?: IssueCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueCommentConnectionToTotalCountResolver<TParent>;
}

export interface IssueCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentEdgeTypeResolver<TParent = any> {
  cursor?: IssueCommentEdgeToCursorResolver<TParent>;
  node?: IssueCommentEdgeToNodeResolver<TParent>;
}

export interface IssueCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentTypeResolver<TParent = any> {
  author?: IssueCommentToAuthorResolver<TParent>;
  authorAssociation?: IssueCommentToAuthorAssociationResolver<TParent>;
  body?: IssueCommentToBodyResolver<TParent>;
  bodyHTML?: IssueCommentToBodyHTMLResolver<TParent>;
  bodyText?: IssueCommentToBodyTextResolver<TParent>;
  createdAt?: IssueCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: IssueCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: IssueCommentToDatabaseIdResolver<TParent>;
  editor?: IssueCommentToEditorResolver<TParent>;
  id?: IssueCommentToIdResolver<TParent>;
  includesCreatedEdit?: IssueCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: IssueCommentToIsMinimizedResolver<TParent>;
  issue?: IssueCommentToIssueResolver<TParent>;
  lastEditedAt?: IssueCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: IssueCommentToMinimizedReasonResolver<TParent>;
  publishedAt?: IssueCommentToPublishedAtResolver<TParent>;
  pullRequest?: IssueCommentToPullRequestResolver<TParent>;
  reactionGroups?: IssueCommentToReactionGroupsResolver<TParent>;
  reactions?: IssueCommentToReactionsResolver<TParent>;
  repository?: IssueCommentToRepositoryResolver<TParent>;
  resourcePath?: IssueCommentToResourcePathResolver<TParent>;
  updatedAt?: IssueCommentToUpdatedAtResolver<TParent>;
  url?: IssueCommentToUrlResolver<TParent>;
  userContentEdits?: IssueCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: IssueCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: IssueCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: IssueCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: IssueCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: IssueCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: IssueCommentToViewerDidAuthorResolver<TParent>;
}

export interface IssueCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToReactionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  content?: ReactionContent;
  orderBy?: ReactionOrder;
}
export interface IssueCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface IssueCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: IssueCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeletableTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'IssueComment' | 'CommitComment' | 'PullRequestReview' | 'PullRequestReviewComment' | 'GistComment';
}
export interface PullRequestCommitConnectionTypeResolver<TParent = any> {
  edges?: PullRequestCommitConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestCommitConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestCommitConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestCommitConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestCommitConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestCommitEdgeToCursorResolver<TParent>;
  node?: PullRequestCommitEdgeToNodeResolver<TParent>;
}

export interface PullRequestCommitEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitTypeResolver<TParent = any> {
  commit?: PullRequestCommitToCommitResolver<TParent>;
  id?: PullRequestCommitToIdResolver<TParent>;
  pullRequest?: PullRequestCommitToPullRequestResolver<TParent>;
  resourcePath?: PullRequestCommitToResourcePathResolver<TParent>;
  url?: PullRequestCommitToUrlResolver<TParent>;
}

export interface PullRequestCommitToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestCommitToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitTypeResolver<TParent = any> {
  abbreviatedOid?: CommitToAbbreviatedOidResolver<TParent>;
  additions?: CommitToAdditionsResolver<TParent>;
  author?: CommitToAuthorResolver<TParent>;
  authoredByCommitter?: CommitToAuthoredByCommitterResolver<TParent>;
  authoredDate?: CommitToAuthoredDateResolver<TParent>;
  blame?: CommitToBlameResolver<TParent>;
  changedFiles?: CommitToChangedFilesResolver<TParent>;
  comments?: CommitToCommentsResolver<TParent>;
  commitResourcePath?: CommitToCommitResourcePathResolver<TParent>;
  commitUrl?: CommitToCommitUrlResolver<TParent>;
  committedDate?: CommitToCommittedDateResolver<TParent>;
  committedViaWeb?: CommitToCommittedViaWebResolver<TParent>;
  committer?: CommitToCommitterResolver<TParent>;
  deletions?: CommitToDeletionsResolver<TParent>;
  deployments?: CommitToDeploymentsResolver<TParent>;
  history?: CommitToHistoryResolver<TParent>;
  id?: CommitToIdResolver<TParent>;
  message?: CommitToMessageResolver<TParent>;
  messageBody?: CommitToMessageBodyResolver<TParent>;
  messageBodyHTML?: CommitToMessageBodyHTMLResolver<TParent>;
  messageHeadline?: CommitToMessageHeadlineResolver<TParent>;
  messageHeadlineHTML?: CommitToMessageHeadlineHTMLResolver<TParent>;
  oid?: CommitToOidResolver<TParent>;
  parents?: CommitToParentsResolver<TParent>;
  pushedDate?: CommitToPushedDateResolver<TParent>;
  repository?: CommitToRepositoryResolver<TParent>;
  resourcePath?: CommitToResourcePathResolver<TParent>;
  signature?: CommitToSignatureResolver<TParent>;
  status?: CommitToStatusResolver<TParent>;
  tarballUrl?: CommitToTarballUrlResolver<TParent>;
  tree?: CommitToTreeResolver<TParent>;
  treeResourcePath?: CommitToTreeResourcePathResolver<TParent>;
  treeUrl?: CommitToTreeUrlResolver<TParent>;
  url?: CommitToUrlResolver<TParent>;
  viewerCanSubscribe?: CommitToViewerCanSubscribeResolver<TParent>;
  viewerSubscription?: CommitToViewerSubscriptionResolver<TParent>;
  zipballUrl?: CommitToZipballUrlResolver<TParent>;
}

export interface CommitToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAdditionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthoredByCommitterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToAuthoredDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToBlameArgs {
  path: string;
}
export interface CommitToBlameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToBlameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToChangedFilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommittedDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommittedViaWebResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToCommitterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToDeletionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToDeploymentsArgs {
  environments?: Array<string>;
  orderBy?: DeploymentOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitToDeploymentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToDeploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToHistoryArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  path?: string;
  author?: CommitAuthor;
  since?: GitTimestamp;
  until?: GitTimestamp;
}
export interface CommitToHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageHeadlineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToMessageHeadlineHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToParentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitToParentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitToParentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToPushedDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTarballUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToTreeUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitToZipballUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitObjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Commit' | 'Tree' | 'Blob' | 'Tag';
}
export interface GitActorTypeResolver<TParent = any> {
  avatarUrl?: GitActorToAvatarUrlResolver<TParent>;
  date?: GitActorToDateResolver<TParent>;
  email?: GitActorToEmailResolver<TParent>;
  name?: GitActorToNameResolver<TParent>;
  user?: GitActorToUserResolver<TParent>;
}

export interface GitActorToAvatarUrlArgs {
  size?: number;
}
export interface GitActorToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GitActorToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitActorToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameTypeResolver<TParent = any> {
  ranges?: BlameToRangesResolver<TParent>;
}

export interface BlameToRangesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeTypeResolver<TParent = any> {
  age?: BlameRangeToAgeResolver<TParent>;
  commit?: BlameRangeToCommitResolver<TParent>;
  endingLine?: BlameRangeToEndingLineResolver<TParent>;
  startingLine?: BlameRangeToStartingLineResolver<TParent>;
}

export interface BlameRangeToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToEndingLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlameRangeToStartingLineResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionTypeResolver<TParent = any> {
  edges?: CommitCommentConnectionToEdgesResolver<TParent>;
  nodes?: CommitCommentConnectionToNodesResolver<TParent>;
  pageInfo?: CommitCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitCommentConnectionToTotalCountResolver<TParent>;
}

export interface CommitCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentEdgeTypeResolver<TParent = any> {
  cursor?: CommitCommentEdgeToCursorResolver<TParent>;
  node?: CommitCommentEdgeToNodeResolver<TParent>;
}

export interface CommitCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentTypeResolver<TParent = any> {
  author?: CommitCommentToAuthorResolver<TParent>;
  authorAssociation?: CommitCommentToAuthorAssociationResolver<TParent>;
  body?: CommitCommentToBodyResolver<TParent>;
  bodyHTML?: CommitCommentToBodyHTMLResolver<TParent>;
  bodyText?: CommitCommentToBodyTextResolver<TParent>;
  commit?: CommitCommentToCommitResolver<TParent>;
  createdAt?: CommitCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: CommitCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: CommitCommentToDatabaseIdResolver<TParent>;
  editor?: CommitCommentToEditorResolver<TParent>;
  id?: CommitCommentToIdResolver<TParent>;
  includesCreatedEdit?: CommitCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: CommitCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: CommitCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: CommitCommentToMinimizedReasonResolver<TParent>;
  path?: CommitCommentToPathResolver<TParent>;
  position?: CommitCommentToPositionResolver<TParent>;
  publishedAt?: CommitCommentToPublishedAtResolver<TParent>;
  reactionGroups?: CommitCommentToReactionGroupsResolver<TParent>;
  reactions?: CommitCommentToReactionsResolver<TParent>;
  repository?: CommitCommentToRepositoryResolver<TParent>;
  resourcePath?: CommitCommentToResourcePathResolver<TParent>;
  updatedAt?: CommitCommentToUpdatedAtResolver<TParent>;
  url?: CommitCommentToUrlResolver<TParent>;
  userContentEdits?: CommitCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: CommitCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: CommitCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: CommitCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: CommitCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: CommitCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: CommitCommentToViewerDidAuthorResolver<TParent>;
}

export interface CommitCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToReactionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  content?: ReactionContent;
  orderBy?: ReactionOrder;
}
export interface CommitCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionTypeResolver<TParent = any> {
  edges?: DeploymentConnectionToEdgesResolver<TParent>;
  nodes?: DeploymentConnectionToNodesResolver<TParent>;
  pageInfo?: DeploymentConnectionToPageInfoResolver<TParent>;
  totalCount?: DeploymentConnectionToTotalCountResolver<TParent>;
}

export interface DeploymentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEdgeTypeResolver<TParent = any> {
  cursor?: DeploymentEdgeToCursorResolver<TParent>;
  node?: DeploymentEdgeToNodeResolver<TParent>;
}

export interface DeploymentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentTypeResolver<TParent = any> {
  commit?: DeploymentToCommitResolver<TParent>;
  commitOid?: DeploymentToCommitOidResolver<TParent>;
  createdAt?: DeploymentToCreatedAtResolver<TParent>;
  creator?: DeploymentToCreatorResolver<TParent>;
  databaseId?: DeploymentToDatabaseIdResolver<TParent>;
  description?: DeploymentToDescriptionResolver<TParent>;
  environment?: DeploymentToEnvironmentResolver<TParent>;
  id?: DeploymentToIdResolver<TParent>;
  latestStatus?: DeploymentToLatestStatusResolver<TParent>;
  payload?: DeploymentToPayloadResolver<TParent>;
  ref?: DeploymentToRefResolver<TParent>;
  repository?: DeploymentToRepositoryResolver<TParent>;
  state?: DeploymentToStateResolver<TParent>;
  statuses?: DeploymentToStatusesResolver<TParent>;
  task?: DeploymentToTaskResolver<TParent>;
  updatedAt?: DeploymentToUpdatedAtResolver<TParent>;
}

export interface DeploymentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCommitOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToEnvironmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToLatestStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToStatusesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface DeploymentToStatusesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: DeploymentToStatusesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToTaskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusTypeResolver<TParent = any> {
  createdAt?: DeploymentStatusToCreatedAtResolver<TParent>;
  creator?: DeploymentStatusToCreatorResolver<TParent>;
  deployment?: DeploymentStatusToDeploymentResolver<TParent>;
  description?: DeploymentStatusToDescriptionResolver<TParent>;
  environmentUrl?: DeploymentStatusToEnvironmentUrlResolver<TParent>;
  id?: DeploymentStatusToIdResolver<TParent>;
  logUrl?: DeploymentStatusToLogUrlResolver<TParent>;
  state?: DeploymentStatusToStateResolver<TParent>;
  updatedAt?: DeploymentStatusToUpdatedAtResolver<TParent>;
}

export interface DeploymentStatusToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToDeploymentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToEnvironmentUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToLogUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionTypeResolver<TParent = any> {
  edges?: DeploymentStatusConnectionToEdgesResolver<TParent>;
  nodes?: DeploymentStatusConnectionToNodesResolver<TParent>;
  pageInfo?: DeploymentStatusConnectionToPageInfoResolver<TParent>;
  totalCount?: DeploymentStatusConnectionToTotalCountResolver<TParent>;
}

export interface DeploymentStatusConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusEdgeTypeResolver<TParent = any> {
  cursor?: DeploymentStatusEdgeToCursorResolver<TParent>;
  node?: DeploymentStatusEdgeToNodeResolver<TParent>;
}

export interface DeploymentStatusEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentStatusEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionTypeResolver<TParent = any> {
  edges?: CommitHistoryConnectionToEdgesResolver<TParent>;
  nodes?: CommitHistoryConnectionToNodesResolver<TParent>;
  pageInfo?: CommitHistoryConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitHistoryConnectionToTotalCountResolver<TParent>;
}

export interface CommitHistoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitHistoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitEdgeTypeResolver<TParent = any> {
  cursor?: CommitEdgeToCursorResolver<TParent>;
  node?: CommitEdgeToNodeResolver<TParent>;
}

export interface CommitEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionTypeResolver<TParent = any> {
  edges?: CommitConnectionToEdgesResolver<TParent>;
  nodes?: CommitConnectionToNodesResolver<TParent>;
  pageInfo?: CommitConnectionToPageInfoResolver<TParent>;
  totalCount?: CommitConnectionToTotalCountResolver<TParent>;
}

export interface CommitConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GitSignatureTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'GpgSignature' | 'SmimeSignature' | 'UnknownSignature';
}
export interface StatusTypeResolver<TParent = any> {
  commit?: StatusToCommitResolver<TParent>;
  context?: StatusToContextResolver<TParent>;
  contexts?: StatusToContextsResolver<TParent>;
  id?: StatusToIdResolver<TParent>;
  state?: StatusToStateResolver<TParent>;
}

export interface StatusToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToContextArgs {
  name: string;
}
export interface StatusToContextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: StatusToContextArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextTypeResolver<TParent = any> {
  commit?: StatusContextToCommitResolver<TParent>;
  context?: StatusContextToContextResolver<TParent>;
  createdAt?: StatusContextToCreatedAtResolver<TParent>;
  creator?: StatusContextToCreatorResolver<TParent>;
  description?: StatusContextToDescriptionResolver<TParent>;
  id?: StatusContextToIdResolver<TParent>;
  state?: StatusContextToStateResolver<TParent>;
  targetUrl?: StatusContextToTargetUrlResolver<TParent>;
}

export interface StatusContextToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToContextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StatusContextToTargetUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeTypeResolver<TParent = any> {
  abbreviatedOid?: TreeToAbbreviatedOidResolver<TParent>;
  commitResourcePath?: TreeToCommitResourcePathResolver<TParent>;
  commitUrl?: TreeToCommitUrlResolver<TParent>;
  entries?: TreeToEntriesResolver<TParent>;
  id?: TreeToIdResolver<TParent>;
  oid?: TreeToOidResolver<TParent>;
  repository?: TreeToRepositoryResolver<TParent>;
}

export interface TreeToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToEntriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryTypeResolver<TParent = any> {
  mode?: TreeEntryToModeResolver<TParent>;
  name?: TreeEntryToNameResolver<TParent>;
  object?: TreeEntryToObjectResolver<TParent>;
  oid?: TreeEntryToOidResolver<TParent>;
  repository?: TreeEntryToRepositoryResolver<TParent>;
  type?: TreeEntryToTypeResolver<TParent>;
}

export interface TreeEntryToModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToObjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TreeEntryToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneTypeResolver<TParent = any> {
  closed?: MilestoneToClosedResolver<TParent>;
  closedAt?: MilestoneToClosedAtResolver<TParent>;
  createdAt?: MilestoneToCreatedAtResolver<TParent>;
  creator?: MilestoneToCreatorResolver<TParent>;
  description?: MilestoneToDescriptionResolver<TParent>;
  dueOn?: MilestoneToDueOnResolver<TParent>;
  id?: MilestoneToIdResolver<TParent>;
  issues?: MilestoneToIssuesResolver<TParent>;
  number?: MilestoneToNumberResolver<TParent>;
  pullRequests?: MilestoneToPullRequestsResolver<TParent>;
  repository?: MilestoneToRepositoryResolver<TParent>;
  resourcePath?: MilestoneToResourcePathResolver<TParent>;
  state?: MilestoneToStateResolver<TParent>;
  title?: MilestoneToTitleResolver<TParent>;
  updatedAt?: MilestoneToUpdatedAtResolver<TParent>;
  url?: MilestoneToUrlResolver<TParent>;
}

export interface MilestoneToClosedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToClosedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToDueOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToIssuesArgs {
  orderBy?: IssueOrder;
  labels?: Array<string>;
  states?: Array<IssueState>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface MilestoneToIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MilestoneToIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToPullRequestsArgs {
  states?: Array<PullRequestState>;
  labels?: Array<string>;
  headRefName?: string;
  baseRefName?: string;
  orderBy?: IssueOrder;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface MilestoneToPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MilestoneToPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionTypeResolver<TParent = any> {
  edges?: ReviewRequestConnectionToEdgesResolver<TParent>;
  nodes?: ReviewRequestConnectionToNodesResolver<TParent>;
  pageInfo?: ReviewRequestConnectionToPageInfoResolver<TParent>;
  totalCount?: ReviewRequestConnectionToTotalCountResolver<TParent>;
}

export interface ReviewRequestConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestEdgeTypeResolver<TParent = any> {
  cursor?: ReviewRequestEdgeToCursorResolver<TParent>;
  node?: ReviewRequestEdgeToNodeResolver<TParent>;
}

export interface ReviewRequestEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestTypeResolver<TParent = any> {
  databaseId?: ReviewRequestToDatabaseIdResolver<TParent>;
  id?: ReviewRequestToIdResolver<TParent>;
  pullRequest?: ReviewRequestToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestedReviewerTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'User' | 'Team';
}
export interface TeamTypeResolver<TParent = any> {
  ancestors?: TeamToAncestorsResolver<TParent>;
  avatarUrl?: TeamToAvatarUrlResolver<TParent>;
  childTeams?: TeamToChildTeamsResolver<TParent>;
  combinedSlug?: TeamToCombinedSlugResolver<TParent>;
  createdAt?: TeamToCreatedAtResolver<TParent>;
  description?: TeamToDescriptionResolver<TParent>;
  editTeamResourcePath?: TeamToEditTeamResourcePathResolver<TParent>;
  editTeamUrl?: TeamToEditTeamUrlResolver<TParent>;
  id?: TeamToIdResolver<TParent>;
  invitations?: TeamToInvitationsResolver<TParent>;
  members?: TeamToMembersResolver<TParent>;
  membersResourcePath?: TeamToMembersResourcePathResolver<TParent>;
  membersUrl?: TeamToMembersUrlResolver<TParent>;
  name?: TeamToNameResolver<TParent>;
  newTeamResourcePath?: TeamToNewTeamResourcePathResolver<TParent>;
  newTeamUrl?: TeamToNewTeamUrlResolver<TParent>;
  organization?: TeamToOrganizationResolver<TParent>;
  parentTeam?: TeamToParentTeamResolver<TParent>;
  privacy?: TeamToPrivacyResolver<TParent>;
  repositories?: TeamToRepositoriesResolver<TParent>;
  repositoriesResourcePath?: TeamToRepositoriesResourcePathResolver<TParent>;
  repositoriesUrl?: TeamToRepositoriesUrlResolver<TParent>;
  resourcePath?: TeamToResourcePathResolver<TParent>;
  slug?: TeamToSlugResolver<TParent>;
  teamsResourcePath?: TeamToTeamsResourcePathResolver<TParent>;
  teamsUrl?: TeamToTeamsUrlResolver<TParent>;
  updatedAt?: TeamToUpdatedAtResolver<TParent>;
  url?: TeamToUrlResolver<TParent>;
  viewerCanAdminister?: TeamToViewerCanAdministerResolver<TParent>;
  viewerCanSubscribe?: TeamToViewerCanSubscribeResolver<TParent>;
  viewerSubscription?: TeamToViewerSubscriptionResolver<TParent>;
}

export interface TeamToAncestorsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamToAncestorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToAncestorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToAvatarUrlArgs {
  size?: number;
}
export interface TeamToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToChildTeamsArgs {
  orderBy?: TeamOrder;
  userLogins?: Array<string>;
  immediateOnly?: boolean;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamToChildTeamsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToChildTeamsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToCombinedSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToEditTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToEditTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToInvitationsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface TeamToInvitationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToInvitationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
  membership?: TeamMembershipType;
  role?: TeamMemberRole;
  orderBy?: TeamMemberOrder;
}
export interface TeamToMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToMembersUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNewTeamResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToNewTeamUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToParentTeamResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToPrivacyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  query?: string;
  orderBy?: TeamRepositoryOrder;
}
export interface TeamToRepositoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TeamToRepositoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToRepositoriesUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToTeamsResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToTeamsUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerCanAdministerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerCanSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamToViewerSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionTypeResolver<TParent = any> {
  edges?: TeamConnectionToEdgesResolver<TParent>;
  nodes?: TeamConnectionToNodesResolver<TParent>;
  pageInfo?: TeamConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamConnectionToTotalCountResolver<TParent>;
}

export interface TeamConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamEdgeTypeResolver<TParent = any> {
  cursor?: TeamEdgeToCursorResolver<TParent>;
  node?: TeamEdgeToNodeResolver<TParent>;
}

export interface TeamEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionTypeResolver<TParent = any> {
  edges?: OrganizationInvitationConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationInvitationConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationInvitationConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationInvitationConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationInvitationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationInvitationEdgeToCursorResolver<TParent>;
  node?: OrganizationInvitationEdgeToNodeResolver<TParent>;
}

export interface OrganizationInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationTypeResolver<TParent = any> {
  createdAt?: OrganizationInvitationToCreatedAtResolver<TParent>;
  email?: OrganizationInvitationToEmailResolver<TParent>;
  id?: OrganizationInvitationToIdResolver<TParent>;
  invitationType?: OrganizationInvitationToInvitationTypeResolver<TParent>;
  invitee?: OrganizationInvitationToInviteeResolver<TParent>;
  inviter?: OrganizationInvitationToInviterResolver<TParent>;
  organization?: OrganizationInvitationToOrganizationResolver<TParent>;
  role?: OrganizationInvitationToRoleResolver<TParent>;
}

export interface OrganizationInvitationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInvitationTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInviteeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToInviterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationInvitationToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionTypeResolver<TParent = any> {
  edges?: TeamMemberConnectionToEdgesResolver<TParent>;
  nodes?: TeamMemberConnectionToNodesResolver<TParent>;
  pageInfo?: TeamMemberConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamMemberConnectionToTotalCountResolver<TParent>;
}

export interface TeamMemberConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeTypeResolver<TParent = any> {
  cursor?: TeamMemberEdgeToCursorResolver<TParent>;
  memberAccessResourcePath?: TeamMemberEdgeToMemberAccessResourcePathResolver<TParent>;
  memberAccessUrl?: TeamMemberEdgeToMemberAccessUrlResolver<TParent>;
  node?: TeamMemberEdgeToNodeResolver<TParent>;
  role?: TeamMemberEdgeToRoleResolver<TParent>;
}

export interface TeamMemberEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToMemberAccessResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToMemberAccessUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamMemberEdgeToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionTypeResolver<TParent = any> {
  edges?: TeamRepositoryConnectionToEdgesResolver<TParent>;
  nodes?: TeamRepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: TeamRepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: TeamRepositoryConnectionToTotalCountResolver<TParent>;
}

export interface TeamRepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryEdgeTypeResolver<TParent = any> {
  cursor?: TeamRepositoryEdgeToCursorResolver<TParent>;
  node?: TeamRepositoryEdgeToNodeResolver<TParent>;
  permission?: TeamRepositoryEdgeToPermissionResolver<TParent>;
}

export interface TeamRepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TeamRepositoryEdgeToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionTypeResolver<TParent = any> {
  edges?: PullRequestReviewConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestReviewConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestReviewConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestReviewConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestReviewConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestReviewEdgeToCursorResolver<TParent>;
  node?: PullRequestReviewEdgeToNodeResolver<TParent>;
}

export interface PullRequestReviewEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewTypeResolver<TParent = any> {
  author?: PullRequestReviewToAuthorResolver<TParent>;
  authorAssociation?: PullRequestReviewToAuthorAssociationResolver<TParent>;
  body?: PullRequestReviewToBodyResolver<TParent>;
  bodyHTML?: PullRequestReviewToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestReviewToBodyTextResolver<TParent>;
  comments?: PullRequestReviewToCommentsResolver<TParent>;
  commit?: PullRequestReviewToCommitResolver<TParent>;
  createdAt?: PullRequestReviewToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestReviewToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestReviewToDatabaseIdResolver<TParent>;
  editor?: PullRequestReviewToEditorResolver<TParent>;
  id?: PullRequestReviewToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestReviewToIncludesCreatedEditResolver<TParent>;
  lastEditedAt?: PullRequestReviewToLastEditedAtResolver<TParent>;
  onBehalfOf?: PullRequestReviewToOnBehalfOfResolver<TParent>;
  publishedAt?: PullRequestReviewToPublishedAtResolver<TParent>;
  pullRequest?: PullRequestReviewToPullRequestResolver<TParent>;
  reactionGroups?: PullRequestReviewToReactionGroupsResolver<TParent>;
  reactions?: PullRequestReviewToReactionsResolver<TParent>;
  repository?: PullRequestReviewToRepositoryResolver<TParent>;
  resourcePath?: PullRequestReviewToResourcePathResolver<TParent>;
  state?: PullRequestReviewToStateResolver<TParent>;
  submittedAt?: PullRequestReviewToSubmittedAtResolver<TParent>;
  updatedAt?: PullRequestReviewToUpdatedAtResolver<TParent>;
  url?: PullRequestReviewToUrlResolver<TParent>;
  userContentEdits?: PullRequestReviewToUserContentEditsResolver<TParent>;
  viewerCanDelete?: PullRequestReviewToViewerCanDeleteResolver<TParent>;
  viewerCanReact?: PullRequestReviewToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: PullRequestReviewToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestReviewToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestReviewToViewerDidAuthorResolver<TParent>;
}

export interface PullRequestReviewToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToOnBehalfOfArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToOnBehalfOfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToOnBehalfOfArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToReactionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  content?: ReactionContent;
  orderBy?: ReactionOrder;
}
export interface PullRequestReviewToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToSubmittedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionTypeResolver<TParent = any> {
  edges?: PullRequestReviewCommentConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestReviewCommentConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestReviewCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestReviewCommentConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestReviewCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestReviewCommentEdgeToCursorResolver<TParent>;
  node?: PullRequestReviewCommentEdgeToNodeResolver<TParent>;
}

export interface PullRequestReviewCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentTypeResolver<TParent = any> {
  author?: PullRequestReviewCommentToAuthorResolver<TParent>;
  authorAssociation?: PullRequestReviewCommentToAuthorAssociationResolver<TParent>;
  body?: PullRequestReviewCommentToBodyResolver<TParent>;
  bodyHTML?: PullRequestReviewCommentToBodyHTMLResolver<TParent>;
  bodyText?: PullRequestReviewCommentToBodyTextResolver<TParent>;
  commit?: PullRequestReviewCommentToCommitResolver<TParent>;
  createdAt?: PullRequestReviewCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: PullRequestReviewCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: PullRequestReviewCommentToDatabaseIdResolver<TParent>;
  diffHunk?: PullRequestReviewCommentToDiffHunkResolver<TParent>;
  draftedAt?: PullRequestReviewCommentToDraftedAtResolver<TParent>;
  editor?: PullRequestReviewCommentToEditorResolver<TParent>;
  id?: PullRequestReviewCommentToIdResolver<TParent>;
  includesCreatedEdit?: PullRequestReviewCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: PullRequestReviewCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: PullRequestReviewCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: PullRequestReviewCommentToMinimizedReasonResolver<TParent>;
  originalCommit?: PullRequestReviewCommentToOriginalCommitResolver<TParent>;
  originalPosition?: PullRequestReviewCommentToOriginalPositionResolver<TParent>;
  outdated?: PullRequestReviewCommentToOutdatedResolver<TParent>;
  path?: PullRequestReviewCommentToPathResolver<TParent>;
  position?: PullRequestReviewCommentToPositionResolver<TParent>;
  publishedAt?: PullRequestReviewCommentToPublishedAtResolver<TParent>;
  pullRequest?: PullRequestReviewCommentToPullRequestResolver<TParent>;
  pullRequestReview?: PullRequestReviewCommentToPullRequestReviewResolver<TParent>;
  reactionGroups?: PullRequestReviewCommentToReactionGroupsResolver<TParent>;
  reactions?: PullRequestReviewCommentToReactionsResolver<TParent>;
  replyTo?: PullRequestReviewCommentToReplyToResolver<TParent>;
  repository?: PullRequestReviewCommentToRepositoryResolver<TParent>;
  resourcePath?: PullRequestReviewCommentToResourcePathResolver<TParent>;
  state?: PullRequestReviewCommentToStateResolver<TParent>;
  updatedAt?: PullRequestReviewCommentToUpdatedAtResolver<TParent>;
  url?: PullRequestReviewCommentToUrlResolver<TParent>;
  userContentEdits?: PullRequestReviewCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: PullRequestReviewCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: PullRequestReviewCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanReact?: PullRequestReviewCommentToViewerCanReactResolver<TParent>;
  viewerCanUpdate?: PullRequestReviewCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: PullRequestReviewCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: PullRequestReviewCommentToViewerDidAuthorResolver<TParent>;
}

export interface PullRequestReviewCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDiffHunkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToDraftedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOriginalCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOriginalPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToOutdatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReactionGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReactionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  content?: ReactionContent;
  orderBy?: ReactionOrder;
}
export interface PullRequestReviewCommentToReactionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewCommentToReactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToReplyToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanReactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SuggestedReviewerTypeResolver<TParent = any> {
  isAuthor?: SuggestedReviewerToIsAuthorResolver<TParent>;
  isCommenter?: SuggestedReviewerToIsCommenterResolver<TParent>;
  reviewer?: SuggestedReviewerToReviewerResolver<TParent>;
}

export interface SuggestedReviewerToIsAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SuggestedReviewerToIsCommenterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SuggestedReviewerToReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionTypeResolver<TParent = any> {
  edges?: PullRequestTimelineConnectionToEdgesResolver<TParent>;
  nodes?: PullRequestTimelineConnectionToNodesResolver<TParent>;
  pageInfo?: PullRequestTimelineConnectionToPageInfoResolver<TParent>;
  totalCount?: PullRequestTimelineConnectionToTotalCountResolver<TParent>;
}

export interface PullRequestTimelineConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestTimelineItemEdgeToCursorResolver<TParent>;
  node?: PullRequestTimelineItemEdgeToNodeResolver<TParent>;
}

export interface PullRequestTimelineItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Commit' | 'CommitCommentThread' | 'PullRequestReview' | 'PullRequestReviewThread' | 'PullRequestReviewComment' | 'IssueComment' | 'ClosedEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'UnsubscribedEvent' | 'MergedEvent' | 'ReferencedEvent' | 'CrossReferencedEvent' | 'AssignedEvent' | 'UnassignedEvent' | 'LabeledEvent' | 'UnlabeledEvent' | 'MilestonedEvent' | 'DemilestonedEvent' | 'RenamedTitleEvent' | 'LockedEvent' | 'UnlockedEvent' | 'DeployedEvent' | 'DeploymentEnvironmentChangedEvent' | 'HeadRefDeletedEvent' | 'HeadRefRestoredEvent' | 'HeadRefForcePushedEvent' | 'BaseRefForcePushedEvent' | 'ReviewRequestedEvent' | 'ReviewRequestRemovedEvent' | 'ReviewDismissedEvent';
}
export interface CommitCommentThreadTypeResolver<TParent = any> {
  comments?: CommitCommentThreadToCommentsResolver<TParent>;
  commit?: CommitCommentThreadToCommitResolver<TParent>;
  id?: CommitCommentThreadToIdResolver<TParent>;
  path?: CommitCommentThreadToPathResolver<TParent>;
  position?: CommitCommentThreadToPositionResolver<TParent>;
  repository?: CommitCommentThreadToRepositoryResolver<TParent>;
}

export interface CommitCommentThreadToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface CommitCommentThreadToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CommitCommentThreadToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommitCommentThreadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadTypeResolver<TParent = any> {
  comments?: PullRequestReviewThreadToCommentsResolver<TParent>;
  id?: PullRequestReviewThreadToIdResolver<TParent>;
  pullRequest?: PullRequestReviewThreadToPullRequestResolver<TParent>;
  repository?: PullRequestReviewThreadToRepositoryResolver<TParent>;
}

export interface PullRequestReviewThreadToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface PullRequestReviewThreadToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PullRequestReviewThreadToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventTypeResolver<TParent = any> {
  actor?: ClosedEventToActorResolver<TParent>;
  closable?: ClosedEventToClosableResolver<TParent>;
  closer?: ClosedEventToCloserResolver<TParent>;
  createdAt?: ClosedEventToCreatedAtResolver<TParent>;
  id?: ClosedEventToIdResolver<TParent>;
  resourcePath?: ClosedEventToResourcePathResolver<TParent>;
  url?: ClosedEventToUrlResolver<TParent>;
}

export interface ClosedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToClosableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToCloserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ClosedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CloserTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Commit' | 'PullRequest';
}
export interface ReopenedEventTypeResolver<TParent = any> {
  actor?: ReopenedEventToActorResolver<TParent>;
  closable?: ReopenedEventToClosableResolver<TParent>;
  createdAt?: ReopenedEventToCreatedAtResolver<TParent>;
  id?: ReopenedEventToIdResolver<TParent>;
}

export interface ReopenedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToClosableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReopenedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventTypeResolver<TParent = any> {
  actor?: SubscribedEventToActorResolver<TParent>;
  createdAt?: SubscribedEventToCreatedAtResolver<TParent>;
  id?: SubscribedEventToIdResolver<TParent>;
  subscribable?: SubscribedEventToSubscribableResolver<TParent>;
}

export interface SubscribedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubscribedEventToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventTypeResolver<TParent = any> {
  actor?: UnsubscribedEventToActorResolver<TParent>;
  createdAt?: UnsubscribedEventToCreatedAtResolver<TParent>;
  id?: UnsubscribedEventToIdResolver<TParent>;
  subscribable?: UnsubscribedEventToSubscribableResolver<TParent>;
}

export interface UnsubscribedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnsubscribedEventToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventTypeResolver<TParent = any> {
  actor?: MergedEventToActorResolver<TParent>;
  commit?: MergedEventToCommitResolver<TParent>;
  createdAt?: MergedEventToCreatedAtResolver<TParent>;
  id?: MergedEventToIdResolver<TParent>;
  mergeRef?: MergedEventToMergeRefResolver<TParent>;
  mergeRefName?: MergedEventToMergeRefNameResolver<TParent>;
  pullRequest?: MergedEventToPullRequestResolver<TParent>;
  resourcePath?: MergedEventToResourcePathResolver<TParent>;
  url?: MergedEventToUrlResolver<TParent>;
}

export interface MergedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToMergeRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToMergeRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MergedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventTypeResolver<TParent = any> {
  actor?: ReferencedEventToActorResolver<TParent>;
  commit?: ReferencedEventToCommitResolver<TParent>;
  commitRepository?: ReferencedEventToCommitRepositoryResolver<TParent>;
  createdAt?: ReferencedEventToCreatedAtResolver<TParent>;
  id?: ReferencedEventToIdResolver<TParent>;
  isCrossRepository?: ReferencedEventToIsCrossRepositoryResolver<TParent>;
  isDirectReference?: ReferencedEventToIsDirectReferenceResolver<TParent>;
  subject?: ReferencedEventToSubjectResolver<TParent>;
}

export interface ReferencedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCommitRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToIsDirectReferenceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReferencedSubjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface CrossReferencedEventTypeResolver<TParent = any> {
  actor?: CrossReferencedEventToActorResolver<TParent>;
  createdAt?: CrossReferencedEventToCreatedAtResolver<TParent>;
  id?: CrossReferencedEventToIdResolver<TParent>;
  isCrossRepository?: CrossReferencedEventToIsCrossRepositoryResolver<TParent>;
  referencedAt?: CrossReferencedEventToReferencedAtResolver<TParent>;
  resourcePath?: CrossReferencedEventToResourcePathResolver<TParent>;
  source?: CrossReferencedEventToSourceResolver<TParent>;
  target?: CrossReferencedEventToTargetResolver<TParent>;
  url?: CrossReferencedEventToUrlResolver<TParent>;
  willCloseTarget?: CrossReferencedEventToWillCloseTargetResolver<TParent>;
}

export interface CrossReferencedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToIsCrossRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToReferencedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToSourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CrossReferencedEventToWillCloseTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventTypeResolver<TParent = any> {
  actor?: AssignedEventToActorResolver<TParent>;
  assignable?: AssignedEventToAssignableResolver<TParent>;
  createdAt?: AssignedEventToCreatedAtResolver<TParent>;
  id?: AssignedEventToIdResolver<TParent>;
  user?: AssignedEventToUserResolver<TParent>;
}

export interface AssignedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignedEventToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventTypeResolver<TParent = any> {
  actor?: UnassignedEventToActorResolver<TParent>;
  assignable?: UnassignedEventToAssignableResolver<TParent>;
  createdAt?: UnassignedEventToCreatedAtResolver<TParent>;
  id?: UnassignedEventToIdResolver<TParent>;
  user?: UnassignedEventToUserResolver<TParent>;
}

export interface UnassignedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToAssignableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnassignedEventToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventTypeResolver<TParent = any> {
  actor?: LabeledEventToActorResolver<TParent>;
  createdAt?: LabeledEventToCreatedAtResolver<TParent>;
  id?: LabeledEventToIdResolver<TParent>;
  label?: LabeledEventToLabelResolver<TParent>;
  labelable?: LabeledEventToLabelableResolver<TParent>;
}

export interface LabeledEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LabeledEventToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventTypeResolver<TParent = any> {
  actor?: UnlabeledEventToActorResolver<TParent>;
  createdAt?: UnlabeledEventToCreatedAtResolver<TParent>;
  id?: UnlabeledEventToIdResolver<TParent>;
  label?: UnlabeledEventToLabelResolver<TParent>;
  labelable?: UnlabeledEventToLabelableResolver<TParent>;
}

export interface UnlabeledEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlabeledEventToLabelableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventTypeResolver<TParent = any> {
  actor?: MilestonedEventToActorResolver<TParent>;
  createdAt?: MilestonedEventToCreatedAtResolver<TParent>;
  id?: MilestonedEventToIdResolver<TParent>;
  milestoneTitle?: MilestonedEventToMilestoneTitleResolver<TParent>;
  subject?: MilestonedEventToSubjectResolver<TParent>;
}

export interface MilestonedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToMilestoneTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestonedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface DemilestonedEventTypeResolver<TParent = any> {
  actor?: DemilestonedEventToActorResolver<TParent>;
  createdAt?: DemilestonedEventToCreatedAtResolver<TParent>;
  id?: DemilestonedEventToIdResolver<TParent>;
  milestoneTitle?: DemilestonedEventToMilestoneTitleResolver<TParent>;
  subject?: DemilestonedEventToSubjectResolver<TParent>;
}

export interface DemilestonedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToMilestoneTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DemilestonedEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventTypeResolver<TParent = any> {
  actor?: RenamedTitleEventToActorResolver<TParent>;
  createdAt?: RenamedTitleEventToCreatedAtResolver<TParent>;
  currentTitle?: RenamedTitleEventToCurrentTitleResolver<TParent>;
  id?: RenamedTitleEventToIdResolver<TParent>;
  previousTitle?: RenamedTitleEventToPreviousTitleResolver<TParent>;
  subject?: RenamedTitleEventToSubjectResolver<TParent>;
}

export interface RenamedTitleEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToCurrentTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToPreviousTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleEventToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RenamedTitleSubjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface LockedEventTypeResolver<TParent = any> {
  actor?: LockedEventToActorResolver<TParent>;
  createdAt?: LockedEventToCreatedAtResolver<TParent>;
  id?: LockedEventToIdResolver<TParent>;
  lockReason?: LockedEventToLockReasonResolver<TParent>;
  lockable?: LockedEventToLockableResolver<TParent>;
}

export interface LockedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToLockReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockedEventToLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventTypeResolver<TParent = any> {
  actor?: UnlockedEventToActorResolver<TParent>;
  createdAt?: UnlockedEventToCreatedAtResolver<TParent>;
  id?: UnlockedEventToIdResolver<TParent>;
  lockable?: UnlockedEventToLockableResolver<TParent>;
}

export interface UnlockedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockedEventToLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventTypeResolver<TParent = any> {
  actor?: DeployedEventToActorResolver<TParent>;
  createdAt?: DeployedEventToCreatedAtResolver<TParent>;
  databaseId?: DeployedEventToDatabaseIdResolver<TParent>;
  deployment?: DeployedEventToDeploymentResolver<TParent>;
  id?: DeployedEventToIdResolver<TParent>;
  pullRequest?: DeployedEventToPullRequestResolver<TParent>;
  ref?: DeployedEventToRefResolver<TParent>;
}

export interface DeployedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToDeploymentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventTypeResolver<TParent = any> {
  actor?: DeploymentEnvironmentChangedEventToActorResolver<TParent>;
  createdAt?: DeploymentEnvironmentChangedEventToCreatedAtResolver<TParent>;
  deploymentStatus?: DeploymentEnvironmentChangedEventToDeploymentStatusResolver<TParent>;
  id?: DeploymentEnvironmentChangedEventToIdResolver<TParent>;
  pullRequest?: DeploymentEnvironmentChangedEventToPullRequestResolver<TParent>;
}

export interface DeploymentEnvironmentChangedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToDeploymentStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeploymentEnvironmentChangedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventTypeResolver<TParent = any> {
  actor?: HeadRefDeletedEventToActorResolver<TParent>;
  createdAt?: HeadRefDeletedEventToCreatedAtResolver<TParent>;
  headRef?: HeadRefDeletedEventToHeadRefResolver<TParent>;
  headRefName?: HeadRefDeletedEventToHeadRefNameResolver<TParent>;
  id?: HeadRefDeletedEventToIdResolver<TParent>;
  pullRequest?: HeadRefDeletedEventToPullRequestResolver<TParent>;
}

export interface HeadRefDeletedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToHeadRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToHeadRefNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefDeletedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventTypeResolver<TParent = any> {
  actor?: HeadRefRestoredEventToActorResolver<TParent>;
  createdAt?: HeadRefRestoredEventToCreatedAtResolver<TParent>;
  id?: HeadRefRestoredEventToIdResolver<TParent>;
  pullRequest?: HeadRefRestoredEventToPullRequestResolver<TParent>;
}

export interface HeadRefRestoredEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefRestoredEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventTypeResolver<TParent = any> {
  actor?: HeadRefForcePushedEventToActorResolver<TParent>;
  afterCommit?: HeadRefForcePushedEventToAfterCommitResolver<TParent>;
  beforeCommit?: HeadRefForcePushedEventToBeforeCommitResolver<TParent>;
  createdAt?: HeadRefForcePushedEventToCreatedAtResolver<TParent>;
  id?: HeadRefForcePushedEventToIdResolver<TParent>;
  pullRequest?: HeadRefForcePushedEventToPullRequestResolver<TParent>;
  ref?: HeadRefForcePushedEventToRefResolver<TParent>;
}

export interface HeadRefForcePushedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToAfterCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToBeforeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HeadRefForcePushedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventTypeResolver<TParent = any> {
  actor?: BaseRefForcePushedEventToActorResolver<TParent>;
  afterCommit?: BaseRefForcePushedEventToAfterCommitResolver<TParent>;
  beforeCommit?: BaseRefForcePushedEventToBeforeCommitResolver<TParent>;
  createdAt?: BaseRefForcePushedEventToCreatedAtResolver<TParent>;
  id?: BaseRefForcePushedEventToIdResolver<TParent>;
  pullRequest?: BaseRefForcePushedEventToPullRequestResolver<TParent>;
  ref?: BaseRefForcePushedEventToRefResolver<TParent>;
}

export interface BaseRefForcePushedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToAfterCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToBeforeCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefForcePushedEventToRefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventTypeResolver<TParent = any> {
  actor?: ReviewRequestedEventToActorResolver<TParent>;
  createdAt?: ReviewRequestedEventToCreatedAtResolver<TParent>;
  id?: ReviewRequestedEventToIdResolver<TParent>;
  pullRequest?: ReviewRequestedEventToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestedEventToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestedEventToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventTypeResolver<TParent = any> {
  actor?: ReviewRequestRemovedEventToActorResolver<TParent>;
  createdAt?: ReviewRequestRemovedEventToCreatedAtResolver<TParent>;
  id?: ReviewRequestRemovedEventToIdResolver<TParent>;
  pullRequest?: ReviewRequestRemovedEventToPullRequestResolver<TParent>;
  requestedReviewer?: ReviewRequestRemovedEventToRequestedReviewerResolver<TParent>;
}

export interface ReviewRequestRemovedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewRequestRemovedEventToRequestedReviewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventTypeResolver<TParent = any> {
  actor?: ReviewDismissedEventToActorResolver<TParent>;
  createdAt?: ReviewDismissedEventToCreatedAtResolver<TParent>;
  databaseId?: ReviewDismissedEventToDatabaseIdResolver<TParent>;
  id?: ReviewDismissedEventToIdResolver<TParent>;
  message?: ReviewDismissedEventToMessageResolver<TParent>;
  messageHtml?: ReviewDismissedEventToMessageHtmlResolver<TParent>;
  previousReviewState?: ReviewDismissedEventToPreviousReviewStateResolver<TParent>;
  pullRequest?: ReviewDismissedEventToPullRequestResolver<TParent>;
  pullRequestCommit?: ReviewDismissedEventToPullRequestCommitResolver<TParent>;
  resourcePath?: ReviewDismissedEventToResourcePathResolver<TParent>;
  review?: ReviewDismissedEventToReviewResolver<TParent>;
  url?: ReviewDismissedEventToUrlResolver<TParent>;
}

export interface ReviewDismissedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToMessageHtmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPreviousReviewStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToPullRequestCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissedEventToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionTypeResolver<TParent = any> {
  edges?: RefConnectionToEdgesResolver<TParent>;
  nodes?: RefConnectionToNodesResolver<TParent>;
  pageInfo?: RefConnectionToPageInfoResolver<TParent>;
  totalCount?: RefConnectionToTotalCountResolver<TParent>;
}

export interface RefConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefEdgeTypeResolver<TParent = any> {
  cursor?: RefEdgeToCursorResolver<TParent>;
  node?: RefEdgeToNodeResolver<TParent>;
}

export interface RefEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionTypeResolver<TParent = any> {
  edges?: PushAllowanceConnectionToEdgesResolver<TParent>;
  nodes?: PushAllowanceConnectionToNodesResolver<TParent>;
  pageInfo?: PushAllowanceConnectionToPageInfoResolver<TParent>;
  totalCount?: PushAllowanceConnectionToTotalCountResolver<TParent>;
}

export interface PushAllowanceConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceEdgeTypeResolver<TParent = any> {
  cursor?: PushAllowanceEdgeToCursorResolver<TParent>;
  node?: PushAllowanceEdgeToNodeResolver<TParent>;
}

export interface PushAllowanceEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceTypeResolver<TParent = any> {
  actor?: PushAllowanceToActorResolver<TParent>;
  branchProtectionRule?: PushAllowanceToBranchProtectionRuleResolver<TParent>;
  id?: PushAllowanceToIdResolver<TParent>;
}

export interface PushAllowanceToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PushAllowanceActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'User' | 'Team';
}
export interface ReviewDismissalAllowanceConnectionTypeResolver<TParent = any> {
  edges?: ReviewDismissalAllowanceConnectionToEdgesResolver<TParent>;
  nodes?: ReviewDismissalAllowanceConnectionToNodesResolver<TParent>;
  pageInfo?: ReviewDismissalAllowanceConnectionToPageInfoResolver<TParent>;
  totalCount?: ReviewDismissalAllowanceConnectionToTotalCountResolver<TParent>;
}

export interface ReviewDismissalAllowanceConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceEdgeTypeResolver<TParent = any> {
  cursor?: ReviewDismissalAllowanceEdgeToCursorResolver<TParent>;
  node?: ReviewDismissalAllowanceEdgeToNodeResolver<TParent>;
}

export interface ReviewDismissalAllowanceEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceTypeResolver<TParent = any> {
  actor?: ReviewDismissalAllowanceToActorResolver<TParent>;
  branchProtectionRule?: ReviewDismissalAllowanceToBranchProtectionRuleResolver<TParent>;
  id?: ReviewDismissalAllowanceToIdResolver<TParent>;
}

export interface ReviewDismissalAllowanceToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReviewDismissalAllowanceActorTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'User' | 'Team';
}
export interface RepositoryCollaboratorConnectionTypeResolver<TParent = any> {
  edges?: RepositoryCollaboratorConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryCollaboratorConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryCollaboratorConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryCollaboratorConnectionToTotalCountResolver<TParent>;
}

export interface RepositoryCollaboratorConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryCollaboratorEdgeToCursorResolver<TParent>;
  node?: RepositoryCollaboratorEdgeToNodeResolver<TParent>;
  permission?: RepositoryCollaboratorEdgeToPermissionResolver<TParent>;
}

export interface RepositoryCollaboratorEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryCollaboratorEdgeToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionTypeResolver<TParent = any> {
  edges?: DeployKeyConnectionToEdgesResolver<TParent>;
  nodes?: DeployKeyConnectionToNodesResolver<TParent>;
  pageInfo?: DeployKeyConnectionToPageInfoResolver<TParent>;
  totalCount?: DeployKeyConnectionToTotalCountResolver<TParent>;
}

export interface DeployKeyConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyEdgeTypeResolver<TParent = any> {
  cursor?: DeployKeyEdgeToCursorResolver<TParent>;
  node?: DeployKeyEdgeToNodeResolver<TParent>;
}

export interface DeployKeyEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyTypeResolver<TParent = any> {
  createdAt?: DeployKeyToCreatedAtResolver<TParent>;
  id?: DeployKeyToIdResolver<TParent>;
  key?: DeployKeyToKeyResolver<TParent>;
  readOnly?: DeployKeyToReadOnlyResolver<TParent>;
  title?: DeployKeyToTitleResolver<TParent>;
  verified?: DeployKeyToVerifiedResolver<TParent>;
}

export interface DeployKeyToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToReadOnlyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployKeyToVerifiedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueOrPullRequestTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest';
}
export interface LanguageConnectionTypeResolver<TParent = any> {
  edges?: LanguageConnectionToEdgesResolver<TParent>;
  nodes?: LanguageConnectionToNodesResolver<TParent>;
  pageInfo?: LanguageConnectionToPageInfoResolver<TParent>;
  totalCount?: LanguageConnectionToTotalCountResolver<TParent>;
  totalSize?: LanguageConnectionToTotalSizeResolver<TParent>;
}

export interface LanguageConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageConnectionToTotalSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageEdgeTypeResolver<TParent = any> {
  cursor?: LanguageEdgeToCursorResolver<TParent>;
  node?: LanguageEdgeToNodeResolver<TParent>;
  size?: LanguageEdgeToSizeResolver<TParent>;
}

export interface LanguageEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageEdgeToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageTypeResolver<TParent = any> {
  color?: LanguageToColorResolver<TParent>;
  id?: LanguageToIdResolver<TParent>;
  name?: LanguageToNameResolver<TParent>;
}

export interface LanguageToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LanguageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionTypeResolver<TParent = any> {
  edges?: MilestoneConnectionToEdgesResolver<TParent>;
  nodes?: MilestoneConnectionToNodesResolver<TParent>;
  pageInfo?: MilestoneConnectionToPageInfoResolver<TParent>;
  totalCount?: MilestoneConnectionToTotalCountResolver<TParent>;
}

export interface MilestoneConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneEdgeTypeResolver<TParent = any> {
  cursor?: MilestoneEdgeToCursorResolver<TParent>;
  node?: MilestoneEdgeToNodeResolver<TParent>;
}

export interface MilestoneEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MilestoneEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionTypeResolver<TParent = any> {
  edges?: ProjectConnectionToEdgesResolver<TParent>;
  nodes?: ProjectConnectionToNodesResolver<TParent>;
  pageInfo?: ProjectConnectionToPageInfoResolver<TParent>;
  totalCount?: ProjectConnectionToTotalCountResolver<TParent>;
}

export interface ProjectConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectEdgeTypeResolver<TParent = any> {
  cursor?: ProjectEdgeToCursorResolver<TParent>;
  node?: ProjectEdgeToNodeResolver<TParent>;
}

export interface ProjectEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProjectEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchConnectionTypeResolver<TParent = any> {
  edges?: ProtectedBranchConnectionToEdgesResolver<TParent>;
  nodes?: ProtectedBranchConnectionToNodesResolver<TParent>;
  pageInfo?: ProtectedBranchConnectionToPageInfoResolver<TParent>;
  totalCount?: ProtectedBranchConnectionToTotalCountResolver<TParent>;
}

export interface ProtectedBranchConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchEdgeTypeResolver<TParent = any> {
  cursor?: ProtectedBranchEdgeToCursorResolver<TParent>;
  node?: ProtectedBranchEdgeToNodeResolver<TParent>;
}

export interface ProtectedBranchEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchTypeResolver<TParent = any> {
  creator?: ProtectedBranchToCreatorResolver<TParent>;
  hasDismissableStaleReviews?: ProtectedBranchToHasDismissableStaleReviewsResolver<TParent>;
  hasRequiredReviews?: ProtectedBranchToHasRequiredReviewsResolver<TParent>;
  hasRequiredStatusChecks?: ProtectedBranchToHasRequiredStatusChecksResolver<TParent>;
  hasRestrictedPushes?: ProtectedBranchToHasRestrictedPushesResolver<TParent>;
  hasRestrictedReviewDismissals?: ProtectedBranchToHasRestrictedReviewDismissalsResolver<TParent>;
  hasStrictRequiredStatusChecks?: ProtectedBranchToHasStrictRequiredStatusChecksResolver<TParent>;
  id?: ProtectedBranchToIdResolver<TParent>;
  isAdminEnforced?: ProtectedBranchToIsAdminEnforcedResolver<TParent>;
  name?: ProtectedBranchToNameResolver<TParent>;
  pushAllowances?: ProtectedBranchToPushAllowancesResolver<TParent>;
  repository?: ProtectedBranchToRepositoryResolver<TParent>;
  requiredStatusCheckContexts?: ProtectedBranchToRequiredStatusCheckContextsResolver<TParent>;
  reviewDismissalAllowances?: ProtectedBranchToReviewDismissalAllowancesResolver<TParent>;
}

export interface ProtectedBranchToCreatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasDismissableStaleReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasRequiredReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasRequiredStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasRestrictedPushesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasRestrictedReviewDismissalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToHasStrictRequiredStatusChecksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToIsAdminEnforcedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToPushAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProtectedBranchToPushAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProtectedBranchToPushAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToRequiredStatusCheckContextsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProtectedBranchToReviewDismissalAllowancesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface ProtectedBranchToReviewDismissalAllowancesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ProtectedBranchToReviewDismissalAllowancesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseTypeResolver<TParent = any> {
  author?: ReleaseToAuthorResolver<TParent>;
  createdAt?: ReleaseToCreatedAtResolver<TParent>;
  description?: ReleaseToDescriptionResolver<TParent>;
  id?: ReleaseToIdResolver<TParent>;
  isDraft?: ReleaseToIsDraftResolver<TParent>;
  isPrerelease?: ReleaseToIsPrereleaseResolver<TParent>;
  name?: ReleaseToNameResolver<TParent>;
  publishedAt?: ReleaseToPublishedAtResolver<TParent>;
  releaseAssets?: ReleaseToReleaseAssetsResolver<TParent>;
  resourcePath?: ReleaseToResourcePathResolver<TParent>;
  tag?: ReleaseToTagResolver<TParent>;
  tagName?: ReleaseToTagNameResolver<TParent>;
  updatedAt?: ReleaseToUpdatedAtResolver<TParent>;
  url?: ReleaseToUrlResolver<TParent>;
}

export interface ReleaseToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIsDraftResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToIsPrereleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToReleaseAssetsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  name?: string;
}
export interface ReleaseToReleaseAssetsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ReleaseToReleaseAssetsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToTagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToTagNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionTypeResolver<TParent = any> {
  edges?: ReleaseAssetConnectionToEdgesResolver<TParent>;
  nodes?: ReleaseAssetConnectionToNodesResolver<TParent>;
  pageInfo?: ReleaseAssetConnectionToPageInfoResolver<TParent>;
  totalCount?: ReleaseAssetConnectionToTotalCountResolver<TParent>;
}

export interface ReleaseAssetConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetEdgeTypeResolver<TParent = any> {
  cursor?: ReleaseAssetEdgeToCursorResolver<TParent>;
  node?: ReleaseAssetEdgeToNodeResolver<TParent>;
}

export interface ReleaseAssetEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetTypeResolver<TParent = any> {
  contentType?: ReleaseAssetToContentTypeResolver<TParent>;
  createdAt?: ReleaseAssetToCreatedAtResolver<TParent>;
  downloadCount?: ReleaseAssetToDownloadCountResolver<TParent>;
  downloadUrl?: ReleaseAssetToDownloadUrlResolver<TParent>;
  id?: ReleaseAssetToIdResolver<TParent>;
  name?: ReleaseAssetToNameResolver<TParent>;
  release?: ReleaseAssetToReleaseResolver<TParent>;
  size?: ReleaseAssetToSizeResolver<TParent>;
  updatedAt?: ReleaseAssetToUpdatedAtResolver<TParent>;
  uploadedBy?: ReleaseAssetToUploadedByResolver<TParent>;
  url?: ReleaseAssetToUrlResolver<TParent>;
}

export interface ReleaseAssetToContentTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToDownloadCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToReleaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUploadedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseAssetToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionTypeResolver<TParent = any> {
  edges?: ReleaseConnectionToEdgesResolver<TParent>;
  nodes?: ReleaseConnectionToNodesResolver<TParent>;
  pageInfo?: ReleaseConnectionToPageInfoResolver<TParent>;
  totalCount?: ReleaseConnectionToTotalCountResolver<TParent>;
}

export interface ReleaseConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseEdgeTypeResolver<TParent = any> {
  cursor?: ReleaseEdgeToCursorResolver<TParent>;
  node?: ReleaseEdgeToNodeResolver<TParent>;
}

export interface ReleaseEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReleaseEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionTypeResolver<TParent = any> {
  edges?: RepositoryTopicConnectionToEdgesResolver<TParent>;
  nodes?: RepositoryTopicConnectionToNodesResolver<TParent>;
  pageInfo?: RepositoryTopicConnectionToPageInfoResolver<TParent>;
  totalCount?: RepositoryTopicConnectionToTotalCountResolver<TParent>;
}

export interface RepositoryTopicConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryTopicEdgeToCursorResolver<TParent>;
  node?: RepositoryTopicEdgeToNodeResolver<TParent>;
}

export interface RepositoryTopicEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicTypeResolver<TParent = any> {
  id?: RepositoryTopicToIdResolver<TParent>;
  resourcePath?: RepositoryTopicToResourcePathResolver<TParent>;
  topic?: RepositoryTopicToTopicResolver<TParent>;
  url?: RepositoryTopicToUrlResolver<TParent>;
}

export interface RepositoryTopicToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryTopicToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicTypeResolver<TParent = any> {
  id?: TopicToIdResolver<TParent>;
  name?: TopicToNameResolver<TParent>;
  relatedTopics?: TopicToRelatedTopicsResolver<TParent>;
  stargazers?: TopicToStargazersResolver<TParent>;
  viewerHasStarred?: TopicToViewerHasStarredResolver<TParent>;
}

export interface TopicToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToRelatedTopicsArgs {
  first?: number;
}
export interface TopicToRelatedTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TopicToRelatedTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: StarOrder;
}
export interface TopicToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: TopicToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionTypeResolver<TParent = any> {
  contributionCalendar?: ContributionsCollectionToContributionCalendarResolver<TParent>;
  doesEndInCurrentMonth?: ContributionsCollectionToDoesEndInCurrentMonthResolver<TParent>;
  earliestRestrictedContributionDate?: ContributionsCollectionToEarliestRestrictedContributionDateResolver<TParent>;
  endedAt?: ContributionsCollectionToEndedAtResolver<TParent>;
  firstIssueContribution?: ContributionsCollectionToFirstIssueContributionResolver<TParent>;
  firstPullRequestContribution?: ContributionsCollectionToFirstPullRequestContributionResolver<TParent>;
  hasActivityInThePast?: ContributionsCollectionToHasActivityInThePastResolver<TParent>;
  hasAnyContributions?: ContributionsCollectionToHasAnyContributionsResolver<TParent>;
  hasAnyRestrictedContributions?: ContributionsCollectionToHasAnyRestrictedContributionsResolver<TParent>;
  isSingleDay?: ContributionsCollectionToIsSingleDayResolver<TParent>;
  issueContributions?: ContributionsCollectionToIssueContributionsResolver<TParent>;
  joinedGitHubContribution?: ContributionsCollectionToJoinedGitHubContributionResolver<TParent>;
  latestRestrictedContributionDate?: ContributionsCollectionToLatestRestrictedContributionDateResolver<TParent>;
  mostRecentCollectionWithActivity?: ContributionsCollectionToMostRecentCollectionWithActivityResolver<TParent>;
  mostRecentCollectionWithoutActivity?: ContributionsCollectionToMostRecentCollectionWithoutActivityResolver<TParent>;
  popularIssueContribution?: ContributionsCollectionToPopularIssueContributionResolver<TParent>;
  popularPullRequestContribution?: ContributionsCollectionToPopularPullRequestContributionResolver<TParent>;
  restrictedContributionsCount?: ContributionsCollectionToRestrictedContributionsCountResolver<TParent>;
  startedAt?: ContributionsCollectionToStartedAtResolver<TParent>;
  totalCommitContributions?: ContributionsCollectionToTotalCommitContributionsResolver<TParent>;
  totalIssueContributions?: ContributionsCollectionToTotalIssueContributionsResolver<TParent>;
  totalPullRequestContributions?: ContributionsCollectionToTotalPullRequestContributionsResolver<TParent>;
  totalPullRequestReviewContributions?: ContributionsCollectionToTotalPullRequestReviewContributionsResolver<TParent>;
  totalRepositoriesWithContributedCommits?: ContributionsCollectionToTotalRepositoriesWithContributedCommitsResolver<TParent>;
  totalRepositoriesWithContributedIssues?: ContributionsCollectionToTotalRepositoriesWithContributedIssuesResolver<TParent>;
  totalRepositoriesWithContributedPullRequestReviews?: ContributionsCollectionToTotalRepositoriesWithContributedPullRequestReviewsResolver<TParent>;
  totalRepositoriesWithContributedPullRequests?: ContributionsCollectionToTotalRepositoriesWithContributedPullRequestsResolver<TParent>;
  totalRepositoryContributions?: ContributionsCollectionToTotalRepositoryContributionsResolver<TParent>;
  user?: ContributionsCollectionToUserResolver<TParent>;
}

export interface ContributionsCollectionToContributionCalendarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToDoesEndInCurrentMonthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToEarliestRestrictedContributionDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToEndedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToFirstIssueContributionArgs {
  ignoreTimeRange?: boolean;
}
export interface ContributionsCollectionToFirstIssueContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToFirstIssueContributionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToFirstPullRequestContributionArgs {
  ignoreTimeRange?: boolean;
}
export interface ContributionsCollectionToFirstPullRequestContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToFirstPullRequestContributionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToHasActivityInThePastResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToHasAnyContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToHasAnyRestrictedContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToIsSingleDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToIssueContributionsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToIssueContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToIssueContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToJoinedGitHubContributionArgs {
  ignoreTimeRange?: boolean;
}
export interface ContributionsCollectionToJoinedGitHubContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToJoinedGitHubContributionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToLatestRestrictedContributionDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToMostRecentCollectionWithActivityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToMostRecentCollectionWithoutActivityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToPopularIssueContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToPopularPullRequestContributionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToRestrictedContributionsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToStartedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalCommitContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalIssueContributionsArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToTotalIssueContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalIssueContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalPullRequestContributionsArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToTotalPullRequestContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalPullRequestContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalPullRequestReviewContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoriesWithContributedCommitsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoriesWithContributedIssuesArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToTotalRepositoriesWithContributedIssuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalRepositoriesWithContributedIssuesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoriesWithContributedPullRequestReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoriesWithContributedPullRequestsArgs {
  excludeFirst?: boolean;
  excludePopular?: boolean;
}
export interface ContributionsCollectionToTotalRepositoriesWithContributedPullRequestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalRepositoriesWithContributedPullRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToTotalRepositoryContributionsArgs {
  excludeFirst?: boolean;
}
export interface ContributionsCollectionToTotalRepositoryContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ContributionsCollectionToTotalRepositoryContributionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionsCollectionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarTypeResolver<TParent = any> {
  colors?: ContributionCalendarToColorsResolver<TParent>;
  isHalloween?: ContributionCalendarToIsHalloweenResolver<TParent>;
  months?: ContributionCalendarToMonthsResolver<TParent>;
  totalContributions?: ContributionCalendarToTotalContributionsResolver<TParent>;
  weeks?: ContributionCalendarToWeeksResolver<TParent>;
}

export interface ContributionCalendarToColorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarToIsHalloweenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarToMonthsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarToTotalContributionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarToWeeksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarMonthTypeResolver<TParent = any> {
  firstDay?: ContributionCalendarMonthToFirstDayResolver<TParent>;
  name?: ContributionCalendarMonthToNameResolver<TParent>;
  totalWeeks?: ContributionCalendarMonthToTotalWeeksResolver<TParent>;
  year?: ContributionCalendarMonthToYearResolver<TParent>;
}

export interface ContributionCalendarMonthToFirstDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarMonthToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarMonthToTotalWeeksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarMonthToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarWeekTypeResolver<TParent = any> {
  contributionDays?: ContributionCalendarWeekToContributionDaysResolver<TParent>;
  firstDay?: ContributionCalendarWeekToFirstDayResolver<TParent>;
}

export interface ContributionCalendarWeekToContributionDaysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarWeekToFirstDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarDayTypeResolver<TParent = any> {
  color?: ContributionCalendarDayToColorResolver<TParent>;
  contributionCount?: ContributionCalendarDayToContributionCountResolver<TParent>;
  date?: ContributionCalendarDayToDateResolver<TParent>;
  weekday?: ContributionCalendarDayToWeekdayResolver<TParent>;
}

export interface ContributionCalendarDayToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarDayToContributionCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarDayToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionCalendarDayToWeekdayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueOrRestrictedContributionTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CreatedIssueContribution' | 'RestrictedContribution';
}
export interface CreatedIssueContributionTypeResolver<TParent = any> {
  isRestricted?: CreatedIssueContributionToIsRestrictedResolver<TParent>;
  issue?: CreatedIssueContributionToIssueResolver<TParent>;
  occurredAt?: CreatedIssueContributionToOccurredAtResolver<TParent>;
  resourcePath?: CreatedIssueContributionToResourcePathResolver<TParent>;
  url?: CreatedIssueContributionToUrlResolver<TParent>;
  user?: CreatedIssueContributionToUserResolver<TParent>;
}

export interface CreatedIssueContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContributionTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CreatedIssueContribution' | 'RestrictedContribution' | 'CreatedPullRequestContribution' | 'JoinedGitHubContribution';
}
export interface RestrictedContributionTypeResolver<TParent = any> {
  isRestricted?: RestrictedContributionToIsRestrictedResolver<TParent>;
  occurredAt?: RestrictedContributionToOccurredAtResolver<TParent>;
  resourcePath?: RestrictedContributionToResourcePathResolver<TParent>;
  url?: RestrictedContributionToUrlResolver<TParent>;
  user?: RestrictedContributionToUserResolver<TParent>;
}

export interface RestrictedContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RestrictedContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RestrictedContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RestrictedContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RestrictedContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestOrRestrictedContributionTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CreatedPullRequestContribution' | 'RestrictedContribution';
}
export interface CreatedPullRequestContributionTypeResolver<TParent = any> {
  isRestricted?: CreatedPullRequestContributionToIsRestrictedResolver<TParent>;
  occurredAt?: CreatedPullRequestContributionToOccurredAtResolver<TParent>;
  pullRequest?: CreatedPullRequestContributionToPullRequestResolver<TParent>;
  resourcePath?: CreatedPullRequestContributionToResourcePathResolver<TParent>;
  url?: CreatedPullRequestContributionToUrlResolver<TParent>;
  user?: CreatedPullRequestContributionToUserResolver<TParent>;
}

export interface CreatedPullRequestContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionConnectionTypeResolver<TParent = any> {
  edges?: CreatedIssueContributionConnectionToEdgesResolver<TParent>;
  nodes?: CreatedIssueContributionConnectionToNodesResolver<TParent>;
  pageInfo?: CreatedIssueContributionConnectionToPageInfoResolver<TParent>;
  totalCount?: CreatedIssueContributionConnectionToTotalCountResolver<TParent>;
}

export interface CreatedIssueContributionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionEdgeTypeResolver<TParent = any> {
  cursor?: CreatedIssueContributionEdgeToCursorResolver<TParent>;
  node?: CreatedIssueContributionEdgeToNodeResolver<TParent>;
}

export interface CreatedIssueContributionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedIssueContributionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionTypeResolver<TParent = any> {
  isRestricted?: JoinedGitHubContributionToIsRestrictedResolver<TParent>;
  occurredAt?: JoinedGitHubContributionToOccurredAtResolver<TParent>;
  resourcePath?: JoinedGitHubContributionToResourcePathResolver<TParent>;
  url?: JoinedGitHubContributionToUrlResolver<TParent>;
  user?: JoinedGitHubContributionToUserResolver<TParent>;
}

export interface JoinedGitHubContributionToIsRestrictedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionToOccurredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface JoinedGitHubContributionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionTypeResolver<TParent = any> {
  edges?: FollowerConnectionToEdgesResolver<TParent>;
  nodes?: FollowerConnectionToNodesResolver<TParent>;
  pageInfo?: FollowerConnectionToPageInfoResolver<TParent>;
  totalCount?: FollowerConnectionToTotalCountResolver<TParent>;
}

export interface FollowerConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowerConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionTypeResolver<TParent = any> {
  edges?: FollowingConnectionToEdgesResolver<TParent>;
  nodes?: FollowingConnectionToNodesResolver<TParent>;
  pageInfo?: FollowingConnectionToPageInfoResolver<TParent>;
  totalCount?: FollowingConnectionToTotalCountResolver<TParent>;
}

export interface FollowingConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FollowingConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistTypeResolver<TParent = any> {
  comments?: GistToCommentsResolver<TParent>;
  createdAt?: GistToCreatedAtResolver<TParent>;
  description?: GistToDescriptionResolver<TParent>;
  id?: GistToIdResolver<TParent>;
  isPublic?: GistToIsPublicResolver<TParent>;
  name?: GistToNameResolver<TParent>;
  owner?: GistToOwnerResolver<TParent>;
  pushedAt?: GistToPushedAtResolver<TParent>;
  stargazers?: GistToStargazersResolver<TParent>;
  updatedAt?: GistToUpdatedAtResolver<TParent>;
  viewerHasStarred?: GistToViewerHasStarredResolver<TParent>;
}

export interface GistToCommentsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface GistToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToIsPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToPushedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToStargazersArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
  orderBy?: StarOrder;
}
export interface GistToStargazersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistToStargazersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistToViewerHasStarredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionTypeResolver<TParent = any> {
  edges?: GistCommentConnectionToEdgesResolver<TParent>;
  nodes?: GistCommentConnectionToNodesResolver<TParent>;
  pageInfo?: GistCommentConnectionToPageInfoResolver<TParent>;
  totalCount?: GistCommentConnectionToTotalCountResolver<TParent>;
}

export interface GistCommentConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentEdgeTypeResolver<TParent = any> {
  cursor?: GistCommentEdgeToCursorResolver<TParent>;
  node?: GistCommentEdgeToNodeResolver<TParent>;
}

export interface GistCommentEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentTypeResolver<TParent = any> {
  author?: GistCommentToAuthorResolver<TParent>;
  authorAssociation?: GistCommentToAuthorAssociationResolver<TParent>;
  body?: GistCommentToBodyResolver<TParent>;
  bodyHTML?: GistCommentToBodyHTMLResolver<TParent>;
  bodyText?: GistCommentToBodyTextResolver<TParent>;
  createdAt?: GistCommentToCreatedAtResolver<TParent>;
  createdViaEmail?: GistCommentToCreatedViaEmailResolver<TParent>;
  databaseId?: GistCommentToDatabaseIdResolver<TParent>;
  editor?: GistCommentToEditorResolver<TParent>;
  gist?: GistCommentToGistResolver<TParent>;
  id?: GistCommentToIdResolver<TParent>;
  includesCreatedEdit?: GistCommentToIncludesCreatedEditResolver<TParent>;
  isMinimized?: GistCommentToIsMinimizedResolver<TParent>;
  lastEditedAt?: GistCommentToLastEditedAtResolver<TParent>;
  minimizedReason?: GistCommentToMinimizedReasonResolver<TParent>;
  publishedAt?: GistCommentToPublishedAtResolver<TParent>;
  updatedAt?: GistCommentToUpdatedAtResolver<TParent>;
  userContentEdits?: GistCommentToUserContentEditsResolver<TParent>;
  viewerCanDelete?: GistCommentToViewerCanDeleteResolver<TParent>;
  viewerCanMinimize?: GistCommentToViewerCanMinimizeResolver<TParent>;
  viewerCanUpdate?: GistCommentToViewerCanUpdateResolver<TParent>;
  viewerCannotUpdateReasons?: GistCommentToViewerCannotUpdateReasonsResolver<TParent>;
  viewerDidAuthor?: GistCommentToViewerDidAuthorResolver<TParent>;
}

export interface GistCommentToAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToAuthorAssociationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyHTMLResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToBodyTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToCreatedViaEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToEditorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToGistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIncludesCreatedEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToIsMinimizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToLastEditedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToMinimizedReasonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToUserContentEditsArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface GistCommentToUserContentEditsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GistCommentToUserContentEditsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanMinimizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerCannotUpdateReasonsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistCommentToViewerDidAuthorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionTypeResolver<TParent = any> {
  edges?: GistConnectionToEdgesResolver<TParent>;
  nodes?: GistConnectionToNodesResolver<TParent>;
  pageInfo?: GistConnectionToPageInfoResolver<TParent>;
  totalCount?: GistConnectionToTotalCountResolver<TParent>;
}

export interface GistConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistEdgeTypeResolver<TParent = any> {
  cursor?: GistEdgeToCursorResolver<TParent>;
  node?: GistEdgeToNodeResolver<TParent>;
}

export interface GistEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GistEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionTypeResolver<TParent = any> {
  edges?: OrganizationConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationEdgeToCursorResolver<TParent>;
  node?: OrganizationEdgeToNodeResolver<TParent>;
}

export interface OrganizationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionTypeResolver<TParent = any> {
  edges?: PublicKeyConnectionToEdgesResolver<TParent>;
  nodes?: PublicKeyConnectionToNodesResolver<TParent>;
  pageInfo?: PublicKeyConnectionToPageInfoResolver<TParent>;
  totalCount?: PublicKeyConnectionToTotalCountResolver<TParent>;
}

export interface PublicKeyConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyEdgeTypeResolver<TParent = any> {
  cursor?: PublicKeyEdgeToCursorResolver<TParent>;
  node?: PublicKeyEdgeToNodeResolver<TParent>;
}

export interface PublicKeyEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyTypeResolver<TParent = any> {
  id?: PublicKeyToIdResolver<TParent>;
  key?: PublicKeyToKeyResolver<TParent>;
}

export interface PublicKeyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PublicKeyToKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionTypeResolver<TParent = any> {
  edges?: StarredRepositoryConnectionToEdgesResolver<TParent>;
  nodes?: StarredRepositoryConnectionToNodesResolver<TParent>;
  pageInfo?: StarredRepositoryConnectionToPageInfoResolver<TParent>;
  totalCount?: StarredRepositoryConnectionToTotalCountResolver<TParent>;
}

export interface StarredRepositoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryEdgeTypeResolver<TParent = any> {
  cursor?: StarredRepositoryEdgeToCursorResolver<TParent>;
  node?: StarredRepositoryEdgeToNodeResolver<TParent>;
  starredAt?: StarredRepositoryEdgeToStarredAtResolver<TParent>;
}

export interface StarredRepositoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StarredRepositoryEdgeToStarredAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionTypeResolver<TParent = any> {
  edges?: IssueTimelineConnectionToEdgesResolver<TParent>;
  nodes?: IssueTimelineConnectionToNodesResolver<TParent>;
  pageInfo?: IssueTimelineConnectionToPageInfoResolver<TParent>;
  totalCount?: IssueTimelineConnectionToTotalCountResolver<TParent>;
}

export interface IssueTimelineConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemEdgeTypeResolver<TParent = any> {
  cursor?: IssueTimelineItemEdgeToCursorResolver<TParent>;
  node?: IssueTimelineItemEdgeToNodeResolver<TParent>;
}

export interface IssueTimelineItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Commit' | 'IssueComment' | 'CrossReferencedEvent' | 'ClosedEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'UnsubscribedEvent' | 'ReferencedEvent' | 'AssignedEvent' | 'UnassignedEvent' | 'LabeledEvent' | 'UnlabeledEvent' | 'MilestonedEvent' | 'DemilestonedEvent' | 'RenamedTitleEvent' | 'LockedEvent' | 'UnlockedEvent' | 'TransferredEvent';
}
export interface TransferredEventTypeResolver<TParent = any> {
  actor?: TransferredEventToActorResolver<TParent>;
  createdAt?: TransferredEventToCreatedAtResolver<TParent>;
  fromRepository?: TransferredEventToFromRepositoryResolver<TParent>;
  id?: TransferredEventToIdResolver<TParent>;
  issue?: TransferredEventToIssueResolver<TParent>;
}

export interface TransferredEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToFromRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransferredEventToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberConnectionTypeResolver<TParent = any> {
  edges?: OrganizationMemberConnectionToEdgesResolver<TParent>;
  nodes?: OrganizationMemberConnectionToNodesResolver<TParent>;
  pageInfo?: OrganizationMemberConnectionToPageInfoResolver<TParent>;
  totalCount?: OrganizationMemberConnectionToTotalCountResolver<TParent>;
}

export interface OrganizationMemberConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberEdgeTypeResolver<TParent = any> {
  cursor?: OrganizationMemberEdgeToCursorResolver<TParent>;
  node?: OrganizationMemberEdgeToNodeResolver<TParent>;
  role?: OrganizationMemberEdgeToRoleResolver<TParent>;
}

export interface OrganizationMemberEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationMemberEdgeToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderTypeResolver<TParent = any> {
  digestMethod?: OrganizationIdentityProviderToDigestMethodResolver<TParent>;
  externalIdentities?: OrganizationIdentityProviderToExternalIdentitiesResolver<TParent>;
  id?: OrganizationIdentityProviderToIdResolver<TParent>;
  idpCertificate?: OrganizationIdentityProviderToIdpCertificateResolver<TParent>;
  issuer?: OrganizationIdentityProviderToIssuerResolver<TParent>;
  organization?: OrganizationIdentityProviderToOrganizationResolver<TParent>;
  signatureMethod?: OrganizationIdentityProviderToSignatureMethodResolver<TParent>;
  ssoUrl?: OrganizationIdentityProviderToSsoUrlResolver<TParent>;
}

export interface OrganizationIdentityProviderToDigestMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToExternalIdentitiesArgs {
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface OrganizationIdentityProviderToExternalIdentitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: OrganizationIdentityProviderToExternalIdentitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIdpCertificateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToIssuerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToSignatureMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrganizationIdentityProviderToSsoUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionTypeResolver<TParent = any> {
  edges?: ExternalIdentityConnectionToEdgesResolver<TParent>;
  nodes?: ExternalIdentityConnectionToNodesResolver<TParent>;
  pageInfo?: ExternalIdentityConnectionToPageInfoResolver<TParent>;
  totalCount?: ExternalIdentityConnectionToTotalCountResolver<TParent>;
}

export interface ExternalIdentityConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityEdgeTypeResolver<TParent = any> {
  cursor?: ExternalIdentityEdgeToCursorResolver<TParent>;
  node?: ExternalIdentityEdgeToNodeResolver<TParent>;
}

export interface ExternalIdentityEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityTypeResolver<TParent = any> {
  guid?: ExternalIdentityToGuidResolver<TParent>;
  id?: ExternalIdentityToIdResolver<TParent>;
  organizationInvitation?: ExternalIdentityToOrganizationInvitationResolver<TParent>;
  samlIdentity?: ExternalIdentityToSamlIdentityResolver<TParent>;
  scimIdentity?: ExternalIdentityToScimIdentityResolver<TParent>;
  user?: ExternalIdentityToUserResolver<TParent>;
}

export interface ExternalIdentityToGuidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToOrganizationInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToSamlIdentityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToScimIdentityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentitySamlAttributesTypeResolver<TParent = any> {
  nameId?: ExternalIdentitySamlAttributesToNameIdResolver<TParent>;
}

export interface ExternalIdentitySamlAttributesToNameIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExternalIdentityScimAttributesTypeResolver<TParent = any> {
  username?: ExternalIdentityScimAttributesToUsernameResolver<TParent>;
}

export interface ExternalIdentityScimAttributesToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitTypeResolver<TParent = any> {
  cost?: RateLimitToCostResolver<TParent>;
  limit?: RateLimitToLimitResolver<TParent>;
  nodeCount?: RateLimitToNodeCountResolver<TParent>;
  remaining?: RateLimitToRemainingResolver<TParent>;
  resetAt?: RateLimitToResetAtResolver<TParent>;
}

export interface RateLimitToCostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToNodeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToRemainingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RateLimitToResetAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionTypeResolver<TParent = any> {
  codeCount?: SearchResultItemConnectionToCodeCountResolver<TParent>;
  edges?: SearchResultItemConnectionToEdgesResolver<TParent>;
  issueCount?: SearchResultItemConnectionToIssueCountResolver<TParent>;
  nodes?: SearchResultItemConnectionToNodesResolver<TParent>;
  pageInfo?: SearchResultItemConnectionToPageInfoResolver<TParent>;
  repositoryCount?: SearchResultItemConnectionToRepositoryCountResolver<TParent>;
  userCount?: SearchResultItemConnectionToUserCountResolver<TParent>;
  wikiCount?: SearchResultItemConnectionToWikiCountResolver<TParent>;
}

export interface SearchResultItemConnectionToCodeCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToIssueCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToRepositoryCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToUserCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemConnectionToWikiCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemEdgeTypeResolver<TParent = any> {
  cursor?: SearchResultItemEdgeToCursorResolver<TParent>;
  node?: SearchResultItemEdgeToNodeResolver<TParent>;
  textMatches?: SearchResultItemEdgeToTextMatchesResolver<TParent>;
}

export interface SearchResultItemEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemEdgeToTextMatchesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultItemTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Issue' | 'PullRequest' | 'Repository' | 'User' | 'Organization' | 'MarketplaceListing';
}
export interface TextMatchTypeResolver<TParent = any> {
  fragment?: TextMatchToFragmentResolver<TParent>;
  highlights?: TextMatchToHighlightsResolver<TParent>;
  property?: TextMatchToPropertyResolver<TParent>;
}

export interface TextMatchToFragmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchToHighlightsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchToPropertyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchHighlightTypeResolver<TParent = any> {
  beginIndice?: TextMatchHighlightToBeginIndiceResolver<TParent>;
  endIndice?: TextMatchHighlightToEndIndiceResolver<TParent>;
  text?: TextMatchHighlightToTextResolver<TParent>;
}

export interface TextMatchHighlightToBeginIndiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchHighlightToEndIndiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextMatchHighlightToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryConnectionTypeResolver<TParent = any> {
  edges?: SecurityAdvisoryConnectionToEdgesResolver<TParent>;
  nodes?: SecurityAdvisoryConnectionToNodesResolver<TParent>;
  pageInfo?: SecurityAdvisoryConnectionToPageInfoResolver<TParent>;
  totalCount?: SecurityAdvisoryConnectionToTotalCountResolver<TParent>;
}

export interface SecurityAdvisoryConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryEdgeTypeResolver<TParent = any> {
  cursor?: SecurityAdvisoryEdgeToCursorResolver<TParent>;
  node?: SecurityAdvisoryEdgeToNodeResolver<TParent>;
}

export interface SecurityAdvisoryEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryTypeResolver<TParent = any> {
  databaseId?: SecurityAdvisoryToDatabaseIdResolver<TParent>;
  description?: SecurityAdvisoryToDescriptionResolver<TParent>;
  ghsaId?: SecurityAdvisoryToGhsaIdResolver<TParent>;
  id?: SecurityAdvisoryToIdResolver<TParent>;
  identifiers?: SecurityAdvisoryToIdentifiersResolver<TParent>;
  publishedAt?: SecurityAdvisoryToPublishedAtResolver<TParent>;
  references?: SecurityAdvisoryToReferencesResolver<TParent>;
  severity?: SecurityAdvisoryToSeverityResolver<TParent>;
  summary?: SecurityAdvisoryToSummaryResolver<TParent>;
  updatedAt?: SecurityAdvisoryToUpdatedAtResolver<TParent>;
  vulnerabilities?: SecurityAdvisoryToVulnerabilitiesResolver<TParent>;
  withdrawnAt?: SecurityAdvisoryToWithdrawnAtResolver<TParent>;
}

export interface SecurityAdvisoryToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToGhsaIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToIdentifiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToPublishedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToReferencesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToSeverityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToSummaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToVulnerabilitiesArgs {
  orderBy?: SecurityVulnerabilityOrder;
  ecosystem?: SecurityAdvisoryEcosystem;
  package?: string;
  severities?: Array<SecurityAdvisorySeverity>;
  after?: string;
  before?: string;
  first?: number;
  last?: number;
}
export interface SecurityAdvisoryToVulnerabilitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SecurityAdvisoryToVulnerabilitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryToWithdrawnAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryIdentifierTypeResolver<TParent = any> {
  type?: SecurityAdvisoryIdentifierToTypeResolver<TParent>;
  value?: SecurityAdvisoryIdentifierToValueResolver<TParent>;
}

export interface SecurityAdvisoryIdentifierToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryIdentifierToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryReferenceTypeResolver<TParent = any> {
  url?: SecurityAdvisoryReferenceToUrlResolver<TParent>;
}

export interface SecurityAdvisoryReferenceToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityConnectionTypeResolver<TParent = any> {
  edges?: SecurityVulnerabilityConnectionToEdgesResolver<TParent>;
  nodes?: SecurityVulnerabilityConnectionToNodesResolver<TParent>;
  pageInfo?: SecurityVulnerabilityConnectionToPageInfoResolver<TParent>;
  totalCount?: SecurityVulnerabilityConnectionToTotalCountResolver<TParent>;
}

export interface SecurityVulnerabilityConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityEdgeTypeResolver<TParent = any> {
  cursor?: SecurityVulnerabilityEdgeToCursorResolver<TParent>;
  node?: SecurityVulnerabilityEdgeToNodeResolver<TParent>;
}

export interface SecurityVulnerabilityEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityTypeResolver<TParent = any> {
  advisory?: SecurityVulnerabilityToAdvisoryResolver<TParent>;
  firstPatchedVersion?: SecurityVulnerabilityToFirstPatchedVersionResolver<TParent>;
  package?: SecurityVulnerabilityToPackageResolver<TParent>;
  severity?: SecurityVulnerabilityToSeverityResolver<TParent>;
  updatedAt?: SecurityVulnerabilityToUpdatedAtResolver<TParent>;
  vulnerableVersionRange?: SecurityVulnerabilityToVulnerableVersionRangeResolver<TParent>;
}

export interface SecurityVulnerabilityToAdvisoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToFirstPatchedVersionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToPackageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToSeverityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityVulnerabilityToVulnerableVersionRangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryPackageVersionTypeResolver<TParent = any> {
  identifier?: SecurityAdvisoryPackageVersionToIdentifierResolver<TParent>;
}

export interface SecurityAdvisoryPackageVersionToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryPackageTypeResolver<TParent = any> {
  ecosystem?: SecurityAdvisoryPackageToEcosystemResolver<TParent>;
  name?: SecurityAdvisoryPackageToNameResolver<TParent>;
}

export interface SecurityAdvisoryPackageToEcosystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SecurityAdvisoryPackageToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationTypeResolver<TParent = any> {
  acceptTopicSuggestion?: MutationToAcceptTopicSuggestionResolver<TParent>;
  addComment?: MutationToAddCommentResolver<TParent>;
  addProjectCard?: MutationToAddProjectCardResolver<TParent>;
  addProjectColumn?: MutationToAddProjectColumnResolver<TParent>;
  addPullRequestReview?: MutationToAddPullRequestReviewResolver<TParent>;
  addPullRequestReviewComment?: MutationToAddPullRequestReviewCommentResolver<TParent>;
  addReaction?: MutationToAddReactionResolver<TParent>;
  addStar?: MutationToAddStarResolver<TParent>;
  createBranchProtectionRule?: MutationToCreateBranchProtectionRuleResolver<TParent>;
  createProject?: MutationToCreateProjectResolver<TParent>;
  declineTopicSuggestion?: MutationToDeclineTopicSuggestionResolver<TParent>;
  deleteBranchProtectionRule?: MutationToDeleteBranchProtectionRuleResolver<TParent>;
  deleteProject?: MutationToDeleteProjectResolver<TParent>;
  deleteProjectCard?: MutationToDeleteProjectCardResolver<TParent>;
  deleteProjectColumn?: MutationToDeleteProjectColumnResolver<TParent>;
  deletePullRequestReview?: MutationToDeletePullRequestReviewResolver<TParent>;
  dismissPullRequestReview?: MutationToDismissPullRequestReviewResolver<TParent>;
  lockLockable?: MutationToLockLockableResolver<TParent>;
  moveProjectCard?: MutationToMoveProjectCardResolver<TParent>;
  moveProjectColumn?: MutationToMoveProjectColumnResolver<TParent>;
  removeOutsideCollaborator?: MutationToRemoveOutsideCollaboratorResolver<TParent>;
  removeReaction?: MutationToRemoveReactionResolver<TParent>;
  removeStar?: MutationToRemoveStarResolver<TParent>;
  requestReviews?: MutationToRequestReviewsResolver<TParent>;
  submitPullRequestReview?: MutationToSubmitPullRequestReviewResolver<TParent>;
  unlockLockable?: MutationToUnlockLockableResolver<TParent>;
  updateBranchProtectionRule?: MutationToUpdateBranchProtectionRuleResolver<TParent>;
  updateProject?: MutationToUpdateProjectResolver<TParent>;
  updateProjectCard?: MutationToUpdateProjectCardResolver<TParent>;
  updateProjectColumn?: MutationToUpdateProjectColumnResolver<TParent>;
  updatePullRequestReview?: MutationToUpdatePullRequestReviewResolver<TParent>;
  updatePullRequestReviewComment?: MutationToUpdatePullRequestReviewCommentResolver<TParent>;
  updateSubscription?: MutationToUpdateSubscriptionResolver<TParent>;
  updateTopics?: MutationToUpdateTopicsResolver<TParent>;
}

export interface MutationToAcceptTopicSuggestionArgs {
  input: AcceptTopicSuggestionInput;
}
export interface MutationToAcceptTopicSuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAcceptTopicSuggestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddCommentArgs {
  input: AddCommentInput;
}
export interface MutationToAddCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProjectCardArgs {
  input: AddProjectCardInput;
}
export interface MutationToAddProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProjectColumnArgs {
  input: AddProjectColumnInput;
}
export interface MutationToAddProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddPullRequestReviewArgs {
  input: AddPullRequestReviewInput;
}
export interface MutationToAddPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddPullRequestReviewCommentArgs {
  input: AddPullRequestReviewCommentInput;
}
export interface MutationToAddPullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddPullRequestReviewCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddReactionArgs {
  input: AddReactionInput;
}
export interface MutationToAddReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddReactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddStarArgs {
  input: AddStarInput;
}
export interface MutationToAddStarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddStarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateBranchProtectionRuleArgs {
  input: CreateBranchProtectionRuleInput;
}
export interface MutationToCreateBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateProjectArgs {
  input: CreateProjectInput;
}
export interface MutationToCreateProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeclineTopicSuggestionArgs {
  input: DeclineTopicSuggestionInput;
}
export interface MutationToDeclineTopicSuggestionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeclineTopicSuggestionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteBranchProtectionRuleArgs {
  input: DeleteBranchProtectionRuleInput;
}
export interface MutationToDeleteBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectArgs {
  input: DeleteProjectInput;
}
export interface MutationToDeleteProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectCardArgs {
  input: DeleteProjectCardInput;
}
export interface MutationToDeleteProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteProjectColumnArgs {
  input: DeleteProjectColumnInput;
}
export interface MutationToDeleteProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePullRequestReviewArgs {
  input: DeletePullRequestReviewInput;
}
export interface MutationToDeletePullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDismissPullRequestReviewArgs {
  input: DismissPullRequestReviewInput;
}
export interface MutationToDismissPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDismissPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLockLockableArgs {
  input: LockLockableInput;
}
export interface MutationToLockLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLockLockableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMoveProjectCardArgs {
  input: MoveProjectCardInput;
}
export interface MutationToMoveProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMoveProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMoveProjectColumnArgs {
  input: MoveProjectColumnInput;
}
export interface MutationToMoveProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMoveProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveOutsideCollaboratorArgs {
  input: RemoveOutsideCollaboratorInput;
}
export interface MutationToRemoveOutsideCollaboratorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveOutsideCollaboratorArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveReactionArgs {
  input: RemoveReactionInput;
}
export interface MutationToRemoveReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveReactionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveStarArgs {
  input: RemoveStarInput;
}
export interface MutationToRemoveStarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveStarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRequestReviewsArgs {
  input: RequestReviewsInput;
}
export interface MutationToRequestReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRequestReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSubmitPullRequestReviewArgs {
  input: SubmitPullRequestReviewInput;
}
export interface MutationToSubmitPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSubmitPullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUnlockLockableArgs {
  input: UnlockLockableInput;
}
export interface MutationToUnlockLockableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUnlockLockableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateBranchProtectionRuleArgs {
  input: UpdateBranchProtectionRuleInput;
}
export interface MutationToUpdateBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateBranchProtectionRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectArgs {
  input: UpdateProjectInput;
}
export interface MutationToUpdateProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectCardArgs {
  input: UpdateProjectCardInput;
}
export interface MutationToUpdateProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectCardArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProjectColumnArgs {
  input: UpdateProjectColumnInput;
}
export interface MutationToUpdateProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProjectColumnArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePullRequestReviewArgs {
  input: UpdatePullRequestReviewInput;
}
export interface MutationToUpdatePullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePullRequestReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePullRequestReviewCommentArgs {
  input: UpdatePullRequestReviewCommentInput;
}
export interface MutationToUpdatePullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePullRequestReviewCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateSubscriptionArgs {
  input: UpdateSubscriptionInput;
}
export interface MutationToUpdateSubscriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateSubscriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTopicsArgs {
  input: UpdateTopicsInput;
}
export interface MutationToUpdateTopicsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AcceptTopicSuggestionPayloadTypeResolver<TParent = any> {
  clientMutationId?: AcceptTopicSuggestionPayloadToClientMutationIdResolver<TParent>;
  topic?: AcceptTopicSuggestionPayloadToTopicResolver<TParent>;
}

export interface AcceptTopicSuggestionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AcceptTopicSuggestionPayloadToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddCommentPayloadToClientMutationIdResolver<TParent>;
  commentEdge?: AddCommentPayloadToCommentEdgeResolver<TParent>;
  subject?: AddCommentPayloadToSubjectResolver<TParent>;
  timelineEdge?: AddCommentPayloadToTimelineEdgeResolver<TParent>;
}

export interface AddCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToCommentEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddCommentPayloadToTimelineEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectCardPayloadTypeResolver<TParent = any> {
  cardEdge?: AddProjectCardPayloadToCardEdgeResolver<TParent>;
  clientMutationId?: AddProjectCardPayloadToClientMutationIdResolver<TParent>;
  projectColumn?: AddProjectCardPayloadToProjectColumnResolver<TParent>;
}

export interface AddProjectCardPayloadToCardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectCardPayloadToProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddProjectColumnPayloadToClientMutationIdResolver<TParent>;
  columnEdge?: AddProjectColumnPayloadToColumnEdgeResolver<TParent>;
  project?: AddProjectColumnPayloadToProjectResolver<TParent>;
}

export interface AddProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectColumnPayloadToColumnEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProjectColumnPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: AddPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
  reviewEdge?: AddPullRequestReviewPayloadToReviewEdgeResolver<TParent>;
}

export interface AddPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewPayloadToReviewEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddPullRequestReviewCommentPayloadToClientMutationIdResolver<TParent>;
  comment?: AddPullRequestReviewCommentPayloadToCommentResolver<TParent>;
  commentEdge?: AddPullRequestReviewCommentPayloadToCommentEdgeResolver<TParent>;
}

export interface AddPullRequestReviewCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewCommentPayloadToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddPullRequestReviewCommentPayloadToCommentEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddReactionPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddReactionPayloadToClientMutationIdResolver<TParent>;
  reaction?: AddReactionPayloadToReactionResolver<TParent>;
  subject?: AddReactionPayloadToSubjectResolver<TParent>;
}

export interface AddReactionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddReactionPayloadToReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddReactionPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddStarPayloadTypeResolver<TParent = any> {
  clientMutationId?: AddStarPayloadToClientMutationIdResolver<TParent>;
  starrable?: AddStarPayloadToStarrableResolver<TParent>;
}

export interface AddStarPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddStarPayloadToStarrableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateBranchProtectionRulePayloadTypeResolver<TParent = any> {
  branchProtectionRule?: CreateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent>;
  clientMutationId?: CreateBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface CreateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: CreateProjectPayloadToClientMutationIdResolver<TParent>;
  project?: CreateProjectPayloadToProjectResolver<TParent>;
}

export interface CreateProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeclineTopicSuggestionPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeclineTopicSuggestionPayloadToClientMutationIdResolver<TParent>;
  topic?: DeclineTopicSuggestionPayloadToTopicResolver<TParent>;
}

export interface DeclineTopicSuggestionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeclineTopicSuggestionPayloadToTopicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteBranchProtectionRulePayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface DeleteBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectPayloadToClientMutationIdResolver<TParent>;
  owner?: DeleteProjectPayloadToOwnerResolver<TParent>;
}

export interface DeleteProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectPayloadToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectCardPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectCardPayloadToClientMutationIdResolver<TParent>;
  column?: DeleteProjectCardPayloadToColumnResolver<TParent>;
  deletedCardId?: DeleteProjectCardPayloadToDeletedCardIdResolver<TParent>;
}

export interface DeleteProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectCardPayloadToColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectCardPayloadToDeletedCardIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeleteProjectColumnPayloadToClientMutationIdResolver<TParent>;
  deletedColumnId?: DeleteProjectColumnPayloadToDeletedColumnIdResolver<TParent>;
  project?: DeleteProjectColumnPayloadToProjectResolver<TParent>;
}

export interface DeleteProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectColumnPayloadToDeletedColumnIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeleteProjectColumnPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeletePullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: DeletePullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: DeletePullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface DeletePullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeletePullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DismissPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: DismissPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: DismissPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface DismissPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DismissPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockLockablePayloadTypeResolver<TParent = any> {
  clientMutationId?: LockLockablePayloadToClientMutationIdResolver<TParent>;
  lockedRecord?: LockLockablePayloadToLockedRecordResolver<TParent>;
}

export interface LockLockablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LockLockablePayloadToLockedRecordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoveProjectCardPayloadTypeResolver<TParent = any> {
  cardEdge?: MoveProjectCardPayloadToCardEdgeResolver<TParent>;
  clientMutationId?: MoveProjectCardPayloadToClientMutationIdResolver<TParent>;
}

export interface MoveProjectCardPayloadToCardEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoveProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoveProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: MoveProjectColumnPayloadToClientMutationIdResolver<TParent>;
  columnEdge?: MoveProjectColumnPayloadToColumnEdgeResolver<TParent>;
}

export interface MoveProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoveProjectColumnPayloadToColumnEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveOutsideCollaboratorPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveOutsideCollaboratorPayloadToClientMutationIdResolver<TParent>;
  removedUser?: RemoveOutsideCollaboratorPayloadToRemovedUserResolver<TParent>;
}

export interface RemoveOutsideCollaboratorPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveOutsideCollaboratorPayloadToRemovedUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveReactionPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveReactionPayloadToClientMutationIdResolver<TParent>;
  reaction?: RemoveReactionPayloadToReactionResolver<TParent>;
  subject?: RemoveReactionPayloadToSubjectResolver<TParent>;
}

export interface RemoveReactionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveReactionPayloadToReactionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveReactionPayloadToSubjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveStarPayloadTypeResolver<TParent = any> {
  clientMutationId?: RemoveStarPayloadToClientMutationIdResolver<TParent>;
  starrable?: RemoveStarPayloadToStarrableResolver<TParent>;
}

export interface RemoveStarPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveStarPayloadToStarrableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestReviewsPayloadTypeResolver<TParent = any> {
  clientMutationId?: RequestReviewsPayloadToClientMutationIdResolver<TParent>;
  pullRequest?: RequestReviewsPayloadToPullRequestResolver<TParent>;
  requestedReviewersEdge?: RequestReviewsPayloadToRequestedReviewersEdgeResolver<TParent>;
}

export interface RequestReviewsPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestReviewsPayloadToPullRequestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RequestReviewsPayloadToRequestedReviewersEdgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmitPullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: SubmitPullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: SubmitPullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface SubmitPullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SubmitPullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockLockablePayloadTypeResolver<TParent = any> {
  clientMutationId?: UnlockLockablePayloadToClientMutationIdResolver<TParent>;
  unlockedRecord?: UnlockLockablePayloadToUnlockedRecordResolver<TParent>;
}

export interface UnlockLockablePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnlockLockablePayloadToUnlockedRecordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateBranchProtectionRulePayloadTypeResolver<TParent = any> {
  branchProtectionRule?: UpdateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent>;
  clientMutationId?: UpdateBranchProtectionRulePayloadToClientMutationIdResolver<TParent>;
}

export interface UpdateBranchProtectionRulePayloadToBranchProtectionRuleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateBranchProtectionRulePayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectPayloadToClientMutationIdResolver<TParent>;
  project?: UpdateProjectPayloadToProjectResolver<TParent>;
}

export interface UpdateProjectPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectPayloadToProjectResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectCardPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectCardPayloadToClientMutationIdResolver<TParent>;
  projectCard?: UpdateProjectCardPayloadToProjectCardResolver<TParent>;
}

export interface UpdateProjectCardPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectCardPayloadToProjectCardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectColumnPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateProjectColumnPayloadToClientMutationIdResolver<TParent>;
  projectColumn?: UpdateProjectColumnPayloadToProjectColumnResolver<TParent>;
}

export interface UpdateProjectColumnPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProjectColumnPayloadToProjectColumnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestReviewPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdatePullRequestReviewPayloadToClientMutationIdResolver<TParent>;
  pullRequestReview?: UpdatePullRequestReviewPayloadToPullRequestReviewResolver<TParent>;
}

export interface UpdatePullRequestReviewPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestReviewPayloadToPullRequestReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestReviewCommentPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdatePullRequestReviewCommentPayloadToClientMutationIdResolver<TParent>;
  pullRequestReviewComment?: UpdatePullRequestReviewCommentPayloadToPullRequestReviewCommentResolver<TParent>;
}

export interface UpdatePullRequestReviewCommentPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdatePullRequestReviewCommentPayloadToPullRequestReviewCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateSubscriptionPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateSubscriptionPayloadToClientMutationIdResolver<TParent>;
  subscribable?: UpdateSubscriptionPayloadToSubscribableResolver<TParent>;
}

export interface UpdateSubscriptionPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateSubscriptionPayloadToSubscribableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopicsPayloadTypeResolver<TParent = any> {
  clientMutationId?: UpdateTopicsPayloadToClientMutationIdResolver<TParent>;
  invalidTopicNames?: UpdateTopicsPayloadToInvalidTopicNamesResolver<TParent>;
  repository?: UpdateTopicsPayloadToRepositoryResolver<TParent>;
}

export interface UpdateTopicsPayloadToClientMutationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopicsPayloadToInvalidTopicNamesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateTopicsPayloadToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventTypeResolver<TParent = any> {
  actor?: AddedToProjectEventToActorResolver<TParent>;
  createdAt?: AddedToProjectEventToCreatedAtResolver<TParent>;
  databaseId?: AddedToProjectEventToDatabaseIdResolver<TParent>;
  id?: AddedToProjectEventToIdResolver<TParent>;
}

export interface AddedToProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddedToProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppEdgeTypeResolver<TParent = any> {
  cursor?: AppEdgeToCursorResolver<TParent>;
  node?: AppEdgeToNodeResolver<TParent>;
}

export interface AppEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventTypeResolver<TParent = any> {
  actor?: BaseRefChangedEventToActorResolver<TParent>;
  createdAt?: BaseRefChangedEventToCreatedAtResolver<TParent>;
  databaseId?: BaseRefChangedEventToDatabaseIdResolver<TParent>;
  id?: BaseRefChangedEventToIdResolver<TParent>;
}

export interface BaseRefChangedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseRefChangedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobTypeResolver<TParent = any> {
  abbreviatedOid?: BlobToAbbreviatedOidResolver<TParent>;
  byteSize?: BlobToByteSizeResolver<TParent>;
  commitResourcePath?: BlobToCommitResourcePathResolver<TParent>;
  commitUrl?: BlobToCommitUrlResolver<TParent>;
  id?: BlobToIdResolver<TParent>;
  isBinary?: BlobToIsBinaryResolver<TParent>;
  isTruncated?: BlobToIsTruncatedResolver<TParent>;
  oid?: BlobToOidResolver<TParent>;
  repository?: BlobToRepositoryResolver<TParent>;
  text?: BlobToTextResolver<TParent>;
}

export interface BlobToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToByteSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIsBinaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToIsTruncatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlobToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotTypeResolver<TParent = any> {
  avatarUrl?: BotToAvatarUrlResolver<TParent>;
  createdAt?: BotToCreatedAtResolver<TParent>;
  databaseId?: BotToDatabaseIdResolver<TParent>;
  id?: BotToIdResolver<TParent>;
  login?: BotToLoginResolver<TParent>;
  resourcePath?: BotToResourcePathResolver<TParent>;
  updatedAt?: BotToUpdatedAtResolver<TParent>;
  url?: BotToUrlResolver<TParent>;
}

export interface BotToAvatarUrlArgs {
  size?: number;
}
export interface BotToAvatarUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BotToAvatarUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BotToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollectionItemContentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Repository' | 'Organization' | 'User';
}
export interface CommentDeletedEventTypeResolver<TParent = any> {
  actor?: CommentDeletedEventToActorResolver<TParent>;
  createdAt?: CommentDeletedEventToCreatedAtResolver<TParent>;
  databaseId?: CommentDeletedEventToDatabaseIdResolver<TParent>;
  id?: CommentDeletedEventToIdResolver<TParent>;
}

export interface CommentDeletedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentAttachmentTypeResolver<TParent = any> {
  body?: ContentAttachmentToBodyResolver<TParent>;
  contentReference?: ContentAttachmentToContentReferenceResolver<TParent>;
  databaseId?: ContentAttachmentToDatabaseIdResolver<TParent>;
  id?: ContentAttachmentToIdResolver<TParent>;
  title?: ContentAttachmentToTitleResolver<TParent>;
}

export interface ContentAttachmentToBodyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentAttachmentToContentReferenceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentAttachmentToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentAttachmentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentAttachmentToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentReferenceTypeResolver<TParent = any> {
  databaseId?: ContentReferenceToDatabaseIdResolver<TParent>;
  id?: ContentReferenceToIdResolver<TParent>;
  reference?: ContentReferenceToReferenceResolver<TParent>;
}

export interface ContentReferenceToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentReferenceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContentReferenceToReferenceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventTypeResolver<TParent = any> {
  actor?: ConvertedNoteToIssueEventToActorResolver<TParent>;
  createdAt?: ConvertedNoteToIssueEventToCreatedAtResolver<TParent>;
  databaseId?: ConvertedNoteToIssueEventToDatabaseIdResolver<TParent>;
  id?: ConvertedNoteToIssueEventToIdResolver<TParent>;
}

export interface ConvertedNoteToIssueEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConvertedNoteToIssueEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionConnectionTypeResolver<TParent = any> {
  edges?: CreatedPullRequestContributionConnectionToEdgesResolver<TParent>;
  nodes?: CreatedPullRequestContributionConnectionToNodesResolver<TParent>;
  pageInfo?: CreatedPullRequestContributionConnectionToPageInfoResolver<TParent>;
  totalCount?: CreatedPullRequestContributionConnectionToTotalCountResolver<TParent>;
}

export interface CreatedPullRequestContributionConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionEdgeTypeResolver<TParent = any> {
  cursor?: CreatedPullRequestContributionEdgeToCursorResolver<TParent>;
  node?: CreatedPullRequestContributionEdgeToNodeResolver<TParent>;
}

export interface CreatedPullRequestContributionEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatedPullRequestContributionEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureTypeResolver<TParent = any> {
  email?: GpgSignatureToEmailResolver<TParent>;
  isValid?: GpgSignatureToIsValidResolver<TParent>;
  keyId?: GpgSignatureToKeyIdResolver<TParent>;
  payload?: GpgSignatureToPayloadResolver<TParent>;
  signature?: GpgSignatureToSignatureResolver<TParent>;
  signer?: GpgSignatureToSignerResolver<TParent>;
  state?: GpgSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: GpgSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface GpgSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToKeyIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GpgSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'IssueComment' | 'CrossReferencedEvent' | 'AddedToProjectEvent' | 'AssignedEvent' | 'ClosedEvent' | 'CommentDeletedEvent' | 'ConvertedNoteToIssueEvent' | 'DemilestonedEvent' | 'LabeledEvent' | 'LockedEvent' | 'MentionedEvent' | 'MilestonedEvent' | 'MovedColumnsInProjectEvent' | 'PinnedEvent' | 'ReferencedEvent' | 'RemovedFromProjectEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnpinnedEvent' | 'UnsubscribedEvent';
}
export interface MentionedEventTypeResolver<TParent = any> {
  actor?: MentionedEventToActorResolver<TParent>;
  createdAt?: MentionedEventToCreatedAtResolver<TParent>;
  databaseId?: MentionedEventToDatabaseIdResolver<TParent>;
  id?: MentionedEventToIdResolver<TParent>;
}

export interface MentionedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MentionedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventTypeResolver<TParent = any> {
  actor?: MovedColumnsInProjectEventToActorResolver<TParent>;
  createdAt?: MovedColumnsInProjectEventToCreatedAtResolver<TParent>;
  databaseId?: MovedColumnsInProjectEventToDatabaseIdResolver<TParent>;
  id?: MovedColumnsInProjectEventToIdResolver<TParent>;
}

export interface MovedColumnsInProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MovedColumnsInProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnedEventTypeResolver<TParent = any> {
  actor?: PinnedEventToActorResolver<TParent>;
  createdAt?: PinnedEventToCreatedAtResolver<TParent>;
  id?: PinnedEventToIdResolver<TParent>;
  issue?: PinnedEventToIssueResolver<TParent>;
}

export interface PinnedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PinnedEventToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventTypeResolver<TParent = any> {
  actor?: RemovedFromProjectEventToActorResolver<TParent>;
  createdAt?: RemovedFromProjectEventToCreatedAtResolver<TParent>;
  databaseId?: RemovedFromProjectEventToDatabaseIdResolver<TParent>;
  id?: RemovedFromProjectEventToIdResolver<TParent>;
}

export interface RemovedFromProjectEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToDatabaseIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemovedFromProjectEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnpinnedEventTypeResolver<TParent = any> {
  actor?: UnpinnedEventToActorResolver<TParent>;
  createdAt?: UnpinnedEventToCreatedAtResolver<TParent>;
  id?: UnpinnedEventToIdResolver<TParent>;
  issue?: UnpinnedEventToIssueResolver<TParent>;
}

export interface UnpinnedEventToActorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnpinnedEventToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnpinnedEventToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnpinnedEventToIssueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsEdgeTypeResolver<TParent = any> {
  cursor?: IssueTimelineItemsEdgeToCursorResolver<TParent>;
  node?: IssueTimelineItemsEdgeToNodeResolver<TParent>;
}

export interface IssueTimelineItemsEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IssueTimelineItemsEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestReviewThreadEdgeToCursorResolver<TParent>;
  node?: PullRequestReviewThreadEdgeToNodeResolver<TParent>;
}

export interface PullRequestReviewThreadEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestReviewThreadEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'PullRequestCommit' | 'PullRequestReview' | 'PullRequestReviewThread' | 'BaseRefChangedEvent' | 'BaseRefForcePushedEvent' | 'DeployedEvent' | 'DeploymentEnvironmentChangedEvent' | 'HeadRefDeletedEvent' | 'HeadRefForcePushedEvent' | 'HeadRefRestoredEvent' | 'MergedEvent' | 'ReviewDismissedEvent' | 'ReviewRequestedEvent' | 'ReviewRequestRemovedEvent' | 'IssueComment' | 'CrossReferencedEvent' | 'AddedToProjectEvent' | 'AssignedEvent' | 'ClosedEvent' | 'CommentDeletedEvent' | 'ConvertedNoteToIssueEvent' | 'DemilestonedEvent' | 'LabeledEvent' | 'LockedEvent' | 'MentionedEvent' | 'MilestonedEvent' | 'MovedColumnsInProjectEvent' | 'PinnedEvent' | 'ReferencedEvent' | 'RemovedFromProjectEvent' | 'RenamedTitleEvent' | 'ReopenedEvent' | 'SubscribedEvent' | 'TransferredEvent' | 'UnassignedEvent' | 'UnlabeledEvent' | 'UnlockedEvent' | 'UnpinnedEvent' | 'UnsubscribedEvent';
}
export interface PullRequestTimelineItemsEdgeTypeResolver<TParent = any> {
  cursor?: PullRequestTimelineItemsEdgeToCursorResolver<TParent>;
  node?: PullRequestTimelineItemsEdgeToNodeResolver<TParent>;
}

export interface PullRequestTimelineItemsEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PullRequestTimelineItemsEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationTypeResolver<TParent = any> {
  id?: RepositoryInvitationToIdResolver<TParent>;
  invitee?: RepositoryInvitationToInviteeResolver<TParent>;
  inviter?: RepositoryInvitationToInviterResolver<TParent>;
  permission?: RepositoryInvitationToPermissionResolver<TParent>;
  repository?: RepositoryInvitationToRepositoryResolver<TParent>;
}

export interface RepositoryInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToInviteeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToInviterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationEdgeTypeResolver<TParent = any> {
  cursor?: RepositoryInvitationEdgeToCursorResolver<TParent>;
  node?: RepositoryInvitationEdgeToNodeResolver<TParent>;
}

export interface RepositoryInvitationEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RepositoryInvitationEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureTypeResolver<TParent = any> {
  email?: SmimeSignatureToEmailResolver<TParent>;
  isValid?: SmimeSignatureToIsValidResolver<TParent>;
  payload?: SmimeSignatureToPayloadResolver<TParent>;
  signature?: SmimeSignatureToSignatureResolver<TParent>;
  signer?: SmimeSignatureToSignerResolver<TParent>;
  state?: SmimeSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: SmimeSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface SmimeSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmimeSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagTypeResolver<TParent = any> {
  abbreviatedOid?: TagToAbbreviatedOidResolver<TParent>;
  commitResourcePath?: TagToCommitResourcePathResolver<TParent>;
  commitUrl?: TagToCommitUrlResolver<TParent>;
  id?: TagToIdResolver<TParent>;
  message?: TagToMessageResolver<TParent>;
  name?: TagToNameResolver<TParent>;
  oid?: TagToOidResolver<TParent>;
  repository?: TagToRepositoryResolver<TParent>;
  tagger?: TagToTaggerResolver<TParent>;
  target?: TagToTargetResolver<TParent>;
}

export interface TagToAbbreviatedOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToCommitResourcePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToCommitUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToOidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToRepositoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToTaggerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TagToTargetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicConnectionTypeResolver<TParent = any> {
  edges?: TopicConnectionToEdgesResolver<TParent>;
  nodes?: TopicConnectionToNodesResolver<TParent>;
  pageInfo?: TopicConnectionToPageInfoResolver<TParent>;
  totalCount?: TopicConnectionToTotalCountResolver<TParent>;
}

export interface TopicConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicConnectionToNodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicConnectionToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicEdgeTypeResolver<TParent = any> {
  cursor?: TopicEdgeToCursorResolver<TParent>;
  node?: TopicEdgeToNodeResolver<TParent>;
}

export interface TopicEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TopicEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureTypeResolver<TParent = any> {
  email?: UnknownSignatureToEmailResolver<TParent>;
  isValid?: UnknownSignatureToIsValidResolver<TParent>;
  payload?: UnknownSignatureToPayloadResolver<TParent>;
  signature?: UnknownSignatureToSignatureResolver<TParent>;
  signer?: UnknownSignatureToSignerResolver<TParent>;
  state?: UnknownSignatureToStateResolver<TParent>;
  wasSignedByGitHub?: UnknownSignatureToWasSignedByGitHubResolver<TParent>;
}

export interface UnknownSignatureToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToIsValidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToSignerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UnknownSignatureToWasSignedByGitHubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
